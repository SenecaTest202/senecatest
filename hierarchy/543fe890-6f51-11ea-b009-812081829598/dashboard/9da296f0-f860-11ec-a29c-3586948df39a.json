{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "b2e4f868-2015-4c26-9806-3fdf76432624" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "entities_table",
          "type" : "latest",
          "title" : "New widget",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673791370011,
                  "endTimeMs" : 1673877770011
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "enableSearch" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "displayEntityName" : true,
              "displayEntityType" : false,
              "enableSelectColumnDisplay" : true,
              "entitiesTitle" : "Alarm Profiles",
              "entityNameColumnTitle" : "Profile",
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityLabel" : false,
              "useRowStyleFunction" : false
            },
            "title" : "New Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "35dc906d-c6e3-ee92-d741-bb79eb15f7bd",
              "filterId" : null,
              "dataKeys" : [ ]
            } ],
            "actions" : {
              "headerButton" : [ {
                "name" : "Create alarm profile",
                "icon" : "add",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #alarmProfileForm=\"ngForm\" [formGroup]=\"alarmProfile\" *ngIf=\"alarmProfile\"\r\n      (ngSubmit)=\"save()\" class=\"add-entity-form\" style=\"min-width: 900px\">\r\n  <mat-toolbar fxLayout=\"row\" color=\"primary\">\r\n    <h2>Add Alarm Profile</h2>\r\n    <span fxFlex></span>\r\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n      <mat-icon class=\"material-icons\">close</mat-icon>\r\n    </button>\r\n  </mat-toolbar>\r\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\r\n  </mat-progress-bar>\r\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n  <div mat-dialog-content fxLayout=\"column\" class=\"form_content\">\r\n    <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n      <mat-form-field fxFlex class=\"mat-block\">\r\n        <mat-label>Entity Name</mat-label>\r\n        <input matInput formControlName=\"alarmProfileName\">\r\n        <mat-error *ngIf=\"alarmProfile.get('alarmProfileName').hasError('required')\">\r\n          Alarm profile name is required.\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <div fxLayout=\"column\" fxFlex>\r\n      <div class=\"tb-device-profile-alarms\" *ngIf=\"alarmsFormArray().controls.length\">\r\n        <div *ngFor=\"let alarmControl of alarmsFormArray().controls; let $index = index; last as isLast;\"\r\n             [ngStyle]=\"!isLast ? {paddingBottom: '8px'} : {}\">\r\n          <mat-expansion-panel class=\"device-profile-alarm\" fxFlex [formGroup]=\"alarmControl\" expanded=\"true\">\r\n            <mat-expansion-panel-header>\r\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                <mat-panel-title>\r\n                  <div fxLayout=\"row\" fxFlex fxLayoutAlign=\"start center\">\r\n                    {{ alarmControl.get('alarmType').value }}\r\n                  </div>\r\n                </mat-panel-title>\r\n                <span fxFlex></span>\r\n                <button *ngIf=\"!disabled\" mat-icon-button style=\"min-width: 40px;\" type=\"button\"\r\n                        (click)=\"alarmsFormArray().removeAt($index)\" matTooltip=\"{{ 'action.remove' | translate }}\"\r\n                        matTooltipPosition=\"above\">\r\n                  <mat-icon>delete</mat-icon>\r\n                </button>\r\n              </div>\r\n            </mat-expansion-panel-header>\r\n            <div>\r\n              <div fxLayout=\"column\" fxLayoutGap=\"0.5em\" *ngIf=\"alarmControl.get('alarmType')\">\r\n                <mat-divider></mat-divider>\r\n                <mat-form-field fxFlex floatLabel=\"always\">\r\n                  <mat-label>{{'device-profile.alarm-type' | translate}}</mat-label>\r\n                  <input required matInput formControlName=\"alarmType\" placeholder=\"Enter alarm type\">\r\n                  <mat-error *ngIf=\"alarmControl.get('alarmType').hasError('required')\">\r\n                    {{ 'device-profile.alarm-type-required' | translate }}\r\n                  </mat-error>\r\n                  <mat-error *ngIf=\"alarmControl.get('alarmType').hasError('unique')\">\r\n                    {{ 'device-profile.alarm-type-unique' | translate }}\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                <mat-checkbox formControlName=\"isUtilizationAlarm\" style=\"display: block; padding-bottom: 16px;\">\r\n                    Is Utilization Alarm\r\n                  </mat-checkbox>\r\n                <div fxLayout=\"row\">\r\n                      <mat-checkbox formControlName=\"enableReminder\" style=\"display: block; padding-bottom: 16px;\">\r\n                    Enable Remainder (Use case group)\r\n                  </mat-checkbox>\r\n                  <mat-form-field fxFlex floatLabel=\"always\" class=\"interval_box\">\r\n                  <mat-label>Notification interval (seconds)</mat-label>\r\n                  <input required matInput formControlName=\"notifications_interaval\" placeholder=\"Notification interval\" type=\"number\">\r\n                  <mat-error *ngIf=\"alarmControl.get('notifications_interaval').hasError('required')\">\r\n                    Notification interval is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                  </div>\r\n                <div fxLayout=\"row\">\r\n                      <mat-checkbox formControlName=\"enableEscalation\" style=\"display: block; padding-bottom: 16px;\">\r\n                    Enable Escalation\r\n                  </mat-checkbox>\r\n                  <mat-form-field fxFlex floatLabel=\"always\" class=\"interval_box\">\r\n                  <mat-label>Escalation interval (seconds)</mat-label>\r\n                  <input required matInput formControlName=\"escalation_interaval\" placeholder=\"Escalation interval\" type=\"number\">\r\n                  <mat-error *ngIf=\"alarmControl.get('escalation_interaval').hasError('required')\">\r\n                    Escalation interval is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                  </div>\r\n              </div>\r\n              <mat-expansion-panel class=\"advanced-settings\" [expanded]=\"false\">\r\n                <mat-expansion-panel-header>\r\n                  <mat-panel-title>\r\n                    <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n                      <div class=\"tb-small\" translate>device-profile.advanced-settings</div>\r\n                    </div>\r\n                  </mat-panel-title>\r\n                </mat-expansion-panel-header>\r\n                <div matExpansionPanelContent *ngIf=\"alarmControl && alarmControl.get('propagate')\">\r\n                  <mat-checkbox formControlName=\"propagate\" style=\"display: block; padding-bottom: 16px;\">\r\n                    {{ 'device-profile.propagate-alarm' | translate }}\r\n                  </mat-checkbox>\r\n                  <section *ngIf=\"alarmControl.get('propagate').value === true\" style=\"padding-bottom: 1em;\">\r\n                    <mat-form-field floatLabel=\"always\" class=\"mat-block\">\r\n                      <mat-label translate>device-profile.alarm-rule-relation-types-list</mat-label>\r\n                      <mat-chip-list #relationTypesChipList [disabled]=\"alarmControl.get('propagate').value !== true\">\r\n                        <mat-chip\r\n                          *ngFor=\"let key of alarmControl.get('propagateRelationTypes').value;\"\r\n                          (removed)=\"removeRelationType(key, alarmControl.get('propagateRelationTypes'))\">\r\n                          {{key}}\r\n                          <mat-icon matChipRemove>close</mat-icon>\r\n                        </mat-chip>\r\n                        <input matInput type=\"text\"\r\n                               placeholder=\"{{'device-profile.alarm-rule-relation-types-list' | translate}}\"\r\n                               style=\"max-width: 200px;\"\r\n                               [matChipInputFor]=\"relationTypesChipList\"\r\n                               [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n                               (matChipInputTokenEnd)=\"addRelationType($event, alarmControl)\"\r\n                               [matChipInputAddOnBlur]=\"true\">\r\n                      </mat-chip-list>\r\n                      <mat-hint\r\n                        innerHTML=\"{{ 'device-profile.alarm-rule-relation-types-list-hint' | translate }}\"></mat-hint>\r\n                    </mat-form-field>\r\n                  </section>\r\n                </div>\r\n              </mat-expansion-panel>\r\n              <div fxFlex fxLayout=\"column\">\r\n                <div translate class=\"tb-small\" style=\"padding-bottom: 8px;\">device-profile.create-alarm-rules</div>\r\n                <!--tb-create-alarm-rules-->\r\n                <div fxFlex fxLayout=\"column\" *ngIf=\"alarmControl && alarmControl.get('createAlarmRules')\">\r\n                  <div *ngFor=\"let createAlarmRuleControl of alarmControl.get('createAlarmRules').controls; let $index = index;\r\n                                           last as isLast;\" fxLayout=\"row\" fxLayoutAlign=\"start center\"\r\n                       fxLayoutGap=\"8px\" style=\"padding-bottom: 8px;\" [formGroup]=\"createAlarmRuleControl\">\r\n                    <div class=\"create-alarm-rule\" fxFlex fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayoutAlign=\"start\">\r\n                      <mat-form-field class=\"severity mat-block\" floatLabel=\"always\" hideRequiredMarker>\r\n                        <mat-label translate>alarm.severity</mat-label>\r\n                        <mat-select formControlName=\"severity\"\r\n                                    required\r\n                                    placeholder=\"{{ 'device-profile.select-alarm-severity' | translate }}\">\r\n                          <mat-option *ngFor=\"let alarmSeverity of alarmSeverities\" [value]=\"alarmSeverity\"\r\n                          [disabled]=\"isDisabledSeverity(alarmControl.get('createAlarmRules').value, createAlarmRuleControl, alarmSeverity)\">\r\n                            {{ alarmSeverityTranslationMap.get(alarmSeverity) | translate }}\r\n                          </mat-option>\r\n                        </mat-select>\r\n                        <mat-error *ngIf=\"createAlarmRuleControl.get('severity').hasError('required')\">\r\n                          {{ 'device-profile.alarm-severity-required' | translate }}\r\n                        </mat-error>\r\n                      </mat-form-field>\r\n                      <mat-divider vertical></mat-divider>\r\n                      <!--tb-alarm-rule-->\r\n                      <div fxLayout=\"column\" formGroupName=\"alarmRule\">\r\n                        <!--<tb-alarm-rule-condition formControlName=\"condition\">-->\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" formGroupName=\"condition\" style=\"min-width: 0;\">\r\n                          <div class=\"tb-alarm-rule-condition\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"center\" (click)=\"openFilterDialog($event, createAlarmRuleControl)\">\r\n                            <!--<tb-filter-text formControlName=\"condition\"\r\n                                            [nowrap]=\"true\"\r\n                                            required\r\n                                            addFilterPrompt=\"{{'device-profile.enter-alarm-rule-condition-prompt' | translate}}\">\r\n                            </tb-filter-text>-->\r\n                            {{!conditionSet(createAlarmRuleControl) ? translate.instant('device-profile.enter-alarm-rule-condition-prompt'): \"\"}}\r\n                            <div class=\"tb-filter-text\"  [innerHTML]=\"createAlarmText(createAlarmRuleControl.value)\"></div>\r\n                            <span *ngIf=\"specText\" class=\"tb-alarm-rule-condition-spec\" [ngClass]=\"{disabled: this.disabled}\" [innerHTML]=\"specText\">\r\n                            </span>\r\n                          </div>\r\n                          <button mat-icon-button\r\n                                  [color]=\"conditionSet(createAlarmRuleControl) ? 'primary' : 'warn'\"\r\n                                  type=\"button\"\r\n                                  (click)=\"openFilterDialog($event, createAlarmRuleControl)\"\r\n                                  matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                  matTooltipPosition=\"above\">\r\n                            <mat-icon>{{ disabled ? 'visibility' : (conditionSet(createAlarmRuleControl) ? 'edit' : 'add') }}</mat-icon>\r\n                          </button>\r\n                        </div>\r\n                        <!--</tb-alarm-rule-condition>-->\r\n                        <!--<tb-alarm-schedule-info formControlName=\"schedule\">-->\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"min-width: 0;\">\r\n                          <span class=\"tb-alarm-rule-schedule title\"\r\n                                (click)=\"openScheduleDialog($event, createAlarmRuleControl.get('alarmRule.schedule'))\">{{('device-profile.schedule' | translate) + \":  \"}}</span>\r\n                          <span class=\"tb-alarm-rule-schedule\" (click)=\"openScheduleDialog($event, createAlarmRuleControl.get('alarmRule.schedule'))\"\r\n                                [innerHTML]=\"scheduleText(createAlarmRuleControl.get('alarmRule.schedule'))\"></span>\r\n                          <button mat-icon-button color=\"primary\" type=\"button\" (click)=\"openScheduleDialog($event, createAlarmRuleControl.get('alarmRule.schedule'))\"\r\n                                  matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                  matTooltipPosition=\"above\">\r\n                            <mat-icon>{{ disabled ? 'visibility' : 'edit' }}</mat-icon>\r\n                          </button>\r\n                        </div>\r\n                        <!--</tb-alarm-schedule-info>-->\r\n                        <div *ngIf=\"!disabled || createAlarmRuleControl.get('alarmRule.alarmDetails').value\"\r\n                             fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                                          <span class=\"tb-alarm-rule-details title\"\r\n                                                (click)=\"openEditDetailsDialog($event, createAlarmRuleControl.get('alarmRule.alarmDetails'))\">\r\n                                              {{ createAlarmRuleControl.get('alarmRule.alarmDetails').value ? ('device-profile.alarm-rule-details' | translate) + ': ' : ('device-profile.add-alarm-rule-details' | translate) }}\r\n                                            </span>\r\n                          <span *ngIf=\"createAlarmRuleControl.get('alarmRule.alarmDetails').value\"\r\n                                class=\"tb-alarm-rule-details\"\r\n                                (click)=\"openEditDetailsDialog($event, createAlarmRuleControl.get('alarmRule.alarmDetails'))\"\r\n                                [innerHTML]=\"createAlarmRuleControl.get('alarmRule.alarmDetails').value\"></span>\r\n                          <button mat-icon-button color=\"primary\" type=\"button\"\r\n                                  (click)=\"openEditDetailsDialog($event, createAlarmRuleControl.get('alarmRule.alarmDetails'))\"\r\n                                  matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                  matTooltipPosition=\"above\">\r\n                            <mat-icon>{{ disabled ? 'visibility' : (createAlarmRuleControl.get('alarmRule.alarmDetails').value ? 'edit' : 'add') }}</mat-icon>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <button *ngIf=\"!disabled\"\r\n                            mat-icon-button color=\"primary\" style=\"min-width: 40px;\"\r\n                            type=\"button\"\r\n                            (click)=\"removeCreateAlarmRule(alarmControl.get('createAlarmRules'),$index)\"\r\n                            matTooltip=\"{{ 'action.remove' | translate }}\"\r\n                            matTooltipPosition=\"above\">\r\n                      <mat-icon>remove_circle_outline</mat-icon>\r\n                    </button>\r\n                  </div>\r\n                  <div *ngIf=\"!alarmControl.get('createAlarmRules').controls.length && !disabled\">\r\n                                  <span translate fxLayoutAlign=\"center center\" style=\"margin: 16px 0\"\r\n                                        class=\"tb-prompt required\">device-profile.add-create-alarm-rule-prompt</span>\r\n                  </div>\r\n                  <div *ngIf=\"!disabled\">\r\n                    <button mat-stroked-button color=\"primary\"\r\n                            type=\"button\"\r\n                            (click)=\"addCreateAlarmRule(alarmControl.get('createAlarmRules'))\"\r\n                            matTooltip=\"{{ 'device-profile.add-create-alarm-rule' | translate }}\"\r\n                            matTooltipPosition=\"above\">\r\n                      <mat-icon class=\"button-icon\">add_circle_outline</mat-icon>\r\n                      {{ 'device-profile.add-create-alarm-rule' | translate }}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div translate class=\"tb-small\" style=\"padding-bottom: 8px;\">device-profile.clear-alarm-rule</div>\r\n                <div fxLayout=\"row\" fxLayoutGap=\"8px;\" fxLayoutAlign=\"start center\"\r\n                     *ngIf=\"alarmControl.get('clearRule').get('condition')\"\r\n                     style=\"padding-bottom: 8px;\" formGroupName=\"clearRule\">\r\n                  <div class=\"clear-alarm-rule\" fxFlex fxLayout=\"row\">\r\n                      <div class=\"create-alarm-rule\" fxFlex fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayoutAlign=\"start\">\r\n                          <div fxLayout=\"column\">\r\n                            <!--<tb-alarm-rule-condition formControlName=\"condition\">-->\r\n                            <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"min-width: 0;\">\r\n                              <div class=\"tb-alarm-rule-condition\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"center\" (click)=\"openFilterDialog($event, alarmControl.get('clearRule'), true)\">\r\n                                {{!conditionSet(alarmControl.get('clearRule')) ? translate.instant('device-profile.enter-alarm-rule-condition-prompt'): \"Alarm clear filter condition:  \"}}\r\n                                <span *ngIf=\"specText\" class=\"tb-alarm-rule-condition-spec\" [ngClass]=\"{disabled: this.disabled}\" [innerHTML]=\"specText\">\r\n                                </span>\r\n                              </div>\r\n                              <div class=\"tb-filter-text\" [innerHTML]=\"clearAlarmText(alarmControl.get('clearRule')?.value)\"></div>\r\n                              <button mat-icon-button\r\n                                      [color]=\"conditionSet(alarmControl.get('clearRule')) ? 'primary' : 'warn'\"\r\n                                      type=\"button\"\r\n                                      (click)=\"openFilterDialog($event, alarmControl.get('clearRule'), true)\"\r\n                                      matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                      matTooltipPosition=\"above\">\r\n                                <mat-icon>{{ disabled ? 'visibility' : (conditionSet(alarmControl.get('clearRule')) ? 'edit' : 'add') }}</mat-icon>\r\n                              </button>\r\n                            </div>\r\n                            <!--</tb-alarm-rule-condition>-->\r\n                            <!--<tb-alarm-schedule-info formControlName=\"schedule\">-->\r\n                            <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"min-width: 0;\">\r\n                              <span class=\"tb-alarm-rule-schedule title\"\r\n                                    (click)=\"openScheduleDialog($event, alarmControl.get('clearRule.schedule'))\">{{('device-profile.schedule' | translate) + \":  \"}}</span>\r\n                              <span class=\"tb-alarm-rule-schedule\" (click)=\"openScheduleDialog($event,alarmControl.get('clearRule').get('schedule'))\"\r\n                                    [innerHTML]=\"scheduleText(alarmControl.get('clearRule.schedule'))\"></span>\r\n                              <button mat-icon-button color=\"primary\" type=\"button\" (click)=\"openScheduleDialog($event, alarmControl.get('clearRule.schedule'))\"\r\n                                      matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                      matTooltipPosition=\"above\">\r\n                                <mat-icon>{{ disabled ? 'visibility' : 'edit' }}</mat-icon>\r\n                              </button>\r\n                            </div>\r\n                            <!--</tb-alarm-schedule-info>-->\r\n                            <div *ngIf=\"!disabled || alarmControl.get('clearRule.alarmDetails').value\"\r\n                                 fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                                              <span class=\"tb-alarm-rule-details title\"\r\n                                                    (click)=\"openEditDetailsDialog($event, alarmControl.get('clearRule.alarmDetails'))\">\r\n                                                  {{ alarmControl.get('clearRule.alarmDetails').value ? ('device-profile.alarm-rule-details' | translate) + ': ' : ('device-profile.add-alarm-rule-details' | translate) }}\r\n                                                </span>\r\n                              <span *ngIf=\"alarmControl.get('clearRule.alarmDetails').value\"\r\n                                    class=\"tb-alarm-rule-details\"\r\n                                    (click)=\"openEditDetailsDialog($event, alarmControl.get('clearRule.alarmDetails'))\"\r\n                                    [innerHTML]=\"alarmControl.get('clearRule.alarmDetails').value\"></span>\r\n                              <button mat-icon-button color=\"primary\" type=\"button\"\r\n                                      (click)=\"openEditDetailsDialog($event, alarmControl.get('clearRule.alarmDetails'))\"\r\n                                      matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                      matTooltipPosition=\"above\">\r\n                                <mat-icon>{{ disabled ? 'visibility' : (alarmControl.get('clearRule.alarmDetails').value ? 'edit' : 'add') }}</mat-icon>\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                    </div>\r\n                  </div>\r\n                  <button *ngIf=\"!disabled\"\r\n                          mat-icon-button color=\"primary\" style=\"min-width: 40px;\"\r\n                          type=\"button\"\r\n                          (click)=\"removeClearAlarmRule(alarmControl.get('clearRule'))\"\r\n                          matTooltip=\"{{ 'action.remove' | translate }}\"\r\n                          matTooltipPosition=\"above\">\r\n                    <mat-icon>remove_circle_outline</mat-icon>\r\n                  </button>\r\n                </div>\r\n                <div *ngIf=\"!alarmControl.get('clearRule.condition')\">\r\n                            <span translate fxLayoutAlign=\"center center\" style=\"margin: 16px 0\"\r\n                                  class=\"tb-prompt\">device-profile.no-clear-alarm-rule</span>\r\n                </div>\r\n                <div *ngIf=\"!disabled\" [fxShow]=\"!alarmControl.get('clearRule.condition')\">\r\n                  <button mat-stroked-button color=\"primary\"\r\n                          type=\"button\"\r\n                          (click)=\"addClearAlarmRule(alarmControl)\"\r\n                          matTooltip=\"{{ 'device-profile.add-clear-alarm-rule' | translate }}\"\r\n                          matTooltipPosition=\"above\">\r\n                    <mat-icon class=\"button-icon\">add_circle_outline</mat-icon>\r\n                    {{ 'device-profile.add-clear-alarm-rule' | translate }}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </mat-expansion-panel>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"!alarmsFormArray().controls.length\">\r\n        <span translate fxLayoutAlign=\"center center\" class=\"tb-prompt\">device-profile.no-alarm-rules</span>\r\n      </div>\r\n      <div *ngIf=\"!disabled\" style=\"padding-top: 16px;\">\r\n        <button mat-raised-button color=\"primary\"\r\n                type=\"button\"\r\n                (click)=\"addAlarm()\"\r\n                matTooltip=\"{{ 'device-profile.add-alarm-rule' | translate }}\"\r\n                matTooltipPosition=\"above\">\r\n          <span translate>device-profile.add-alarm-rule</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n    <button mat-button mat-raised-button color=\"primary\"\r\n            type=\"submit\"\r\n            [disabled]=\"(isLoading$ | async) || alarmProfile.invalid || !alarmProfile.dirty\">\r\n      Create\r\n    </button>\r\n    <button mat-button color=\"primary\"\r\n            type=\"button\"\r\n            [disabled]=\"(isLoading$ | async)\"\r\n            (click)=\"cancel()\" cdkFocusInitial>\r\n      Cancel\r\n    </button>\r\n  </div>\r\n</form>\r\n",
                "customCss" : "form {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\nform .form_content {\n    flex-grow: 1;\n}\n\n.tb-device-profile-alarms {\n    flex-grow: 1;\n    overflow-y: auto;\n}\n\n.mat-expansion-panel {\n\t box-shadow: none;\n}\n .mat-expansion-panel.device-profile-alarm {\n\t border: 1px groove rgba(0, 0, 0, .25);\n}\n .mat-expansion-panel.device-profile-alarm .mat-expansion-panel-header {\n\t padding: 0 24px 0 8px;\n}\n .mat-expansion-panel.device-profile-alarm .mat-expansion-panel-header.mat-expanded {\n\t height: 48px;\n}\n .mat-expansion-panel.advanced-settings {\n\t border: none;\n\t padding: 0;\n}\n .mat-expansion-panel.advanced-settings .mat-expansion-panel-header {\n\t padding: 0 8px;\n}\n\n .tb-device-profile-alarms.mat-padding {\n\t padding: 8px;\n}\n .tb-prompt {\n\t margin: 30px 0;\n}\n\n.create-alarm-rule {\n    border: 2px groove rgba(0, 0, 0, .45);\n    border-radius: 4px;\n    padding: 8px;\n    min-width: 0;\n  }\n  \n  .mat-form-field.severity .mat-form-field-infix {\n\t width: 160px;\n}\n .button-icon {\n\t font-size: 20px;\n\t width: 20px;\n\t height: 20px;\n}\n\n.mat-dialog-content {\n    overflow-y: auto;\n}\n \n ",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap\n    .get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap\n    .get('assetService'));\nlet deviceService = $injector.get(widgetContext.servicesMap\n    .get('deviceService'));\nlet attributeService = $injector.get(widgetContext\n    .servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext\n    .servicesMap.get('entityRelationService'));\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n    customDialog.customDialog(htmlTemplate,\n        AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n    let vm = instance;\n    vm.translate = widgetContext.translate;\n    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\n    vm.entitySearchDirection = {\n        from: \"FROM\",\n        to: \"TO\"\n    };\n\n    AlarmSeverity = {\n        CRITICAL: 'CRITICAL',\n        MAJOR: 'MAJOR',\n        MINOR: 'MINOR',\n        WARNING: 'WARNING',\n        INDETERMINATE: 'INDETERMINATE'\n    }\n\n    vm.addClearAlarmRule = function(addClearAlarmRule) {\n        //   addClearAlarmRule.get(\"clearRule\").setValue({\n        //     condition: vm.fb.group({ \n        //       condition: [[]],\n        //       spec: [{type: \"SIMPLE\"}]\n        //     }), \n        //     schedule: [null],\n        //     alarmDetails: [null]\n        //   });\n        addClearAlarmRule.get(\"clearRule\").addControl(\n            \"condition\", vm.fb.group({\n                condition: [\n                    []\n                ],\n                spec: [{\n                    type: \"SIMPLE\"\n                }]\n            }));\n        addClearAlarmRule.get(\"clearRule\").addControl(\n            \"schedule\", vm.fb.control(null));\n        addClearAlarmRule.get(\"clearRule\").addControl(\n            \"alarmDetails\", vm.fb.control(null));\n    }\n    vm.removeClearAlarmRule = function (alarmControl) {\n        alarmControl.removeControl(\"condition\");\n        alarmControl.removeControl(\"schedule\")\n        alarmControl.removeControl(\"alarmDetails\")\n    }\n    vm.AlarmSeverity = AlarmSeverity;\n    vm.alarmSeverities = Object.keys(AlarmSeverity);\n\n    vm.isDisabledSeverity = function(arrayControlsValue, createAlarmRuleControl,\n        currentSeverity) {\n        return arrayControlsValue.some(value => {\n            return value.severity ===\n                currentSeverity;\n        });\n    };\n    const alarmSeverityTranslations = new Map([\n        [\"CRITICAL\", 'alarm.severity-critical'],\n        [\"MAJOR\", 'alarm.severity-major'],\n        [\"MINOR\", 'alarm.severity-minor'],\n        [\"WARNING\", 'alarm.severity-warning'],\n        [\"INDETERMINATE\",\n            'alarm.severity-indeterminate'\n        ]\n    ]);\n\n    function timeOfDayToMoment(date) {\n        if (typeof date === 'number' || date === null) {\n            return moment([1970, 0, 1, 0, 0, 0, 0]);\n        }\n        return moment([1970, 0, 1, date.getHours(), date\n            .getMinutes(), 0, 0\n        ]);\n    }\n\n    function timeOfDayToUTCTimestamp(date) {\n        if (typeof date === 'number' || date === null) {\n            return 0;\n        }\n        return moment.utc([1970, 0, 1, date.getHours(), date\n            .getMinutes(), date.getSeconds(), 0\n        ]).valueOf();\n    }\n\n    vm.alarmSeverityTranslationMap =\n        alarmSeverityTranslations;\n\n    vm.scheduleText = function(control) {\n        let schedule = control.value;\n        let scheduleText = \"\";\n        if (control.value === undefined || control\n            .value === null) {\n            schedule = {\n                type: \"ANY_TIME\"\n            };\n        }\n\n        const dayOfWeekTranslations = new Array(\n            'device-profile.schedule-day.monday',\n            'device-profile.schedule-day.tuesday',\n            'device-profile.schedule-day.wednesday',\n            'device-profile.schedule-day.thursday',\n            'device-profile.schedule-day.friday',\n            'device-profile.schedule-day.saturday',\n            'device-profile.schedule-day.sunday'\n        );\n\n        function getAlarmScheduleRangeText(startsOn,\n            endsOn) {\n            const start = timeOfDayToMoment(startsOn);\n            const end = timeOfDayToMoment(endsOn);\n            if (start < end) {\n                return `<span><span class=\"nowrap\">${start.format('hh:mm A')}</span> – <span class=\"nowrap\">${end.format('hh:mm A')}</span></span>`;\n            } else if (start.valueOf() === 0 && end\n                .valueOf() === 0 || start.isSame(moment(\n                    [1970, 0])) && end.isSame(moment([\n                    1970, 0\n                ]))) {\n                return '<span><span class=\"nowrap\">12:00 AM</span> – <span class=\"nowrap\">12:00 PM</span></span>';\n            }\n            return `<span><span class=\"nowrap\">12:00 AM</span> – <span class=\"nowrap\">${end.format('hh:mm A')}</span>` +\n                ` and <span class=\"nowrap\">${start.format('hh:mm A')}</span> – <span class=\"nowrap\">12:00 PM</span></span>`;\n        }\n\n        switch (schedule.type) {\n            case \"ANY_TIME\":\n                scheduleText = widgetContext.translate\n                    .instant(\n                        'device-profile.schedule-any-time'\n                        );\n                break;\n            case \"SPECIFIC_TIME\":\n                for (const day of schedule.daysOfWeek) {\n                    if (scheduleText.length) {\n                        scheduleText += \", \";\n                    }\n                    scheduleText += widgetContext.translate\n                        .instant(dayOfWeekTranslations[\n                            day - 1]);\n                }\n                scheduleText += ' <b>' +\n                    getAlarmScheduleRangeText(\n                        utcTimestampToTimeOfDay(schedule\n                            .startsOn),\n                        utcTimestampToTimeOfDay(schedule\n                            .endsOn)) + '</b>';\n                break;\n            case \"CUSTOM\":\n                for (const item of schedule.items) {\n                    if (item.enabled) {\n                        if (schedule.length) {\n                            scheduleText += ', ';\n                        }\n                        scheduleText += widgetContext\n                            .translate.instant(\n                                dayOfWeekTranslations[\n                                    item.dayOfWeek - 1]\n                                );\n                        scheduleText += ' <b>' +\n                            getAlarmScheduleRangeText(\n                                utcTimestampToTimeOfDay(\n                                    item.startsOn),\n                                utcTimestampToTimeOfDay(\n                                    item.endsOn)) +\n                            '</b>';\n                    }\n                }\n                break;\n        }\n        return scheduleText;\n    };\n\n    function utcTimestampToTimeOfDay(time = 0) {\n        return new Date(time + new Date(time)\n            .getTimezoneOffset() * 60 * 1000);\n    }\n\n    vm.alarmProfile = vm.fb.group({\n        alarmProfileName: ['', [vm.validators\n            .required\n        ]],\n        alarms: vm.fb.array([], [vm.validators\n            .required\n        ])\n    });\n\n    vm.openScheduleDialog = function($event, control) {\n        if ($event) {\n            $event.stopPropagation();\n        }\n        let htmlTemplate =\n            \"<form *ngIf=\\\"alarmScheduleForm\\\" [formGroup]=\\\"alarmScheduleForm\\\"  (ngSubmit)=\\\"save()\\\" style=\\\"min-width: 800px;\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <h2>{{ (readonly ? \\'device-profile.schedule\\' : \\'device-profile.edit-schedule\\') | translate }}<\\/h2>\\r\\n    <span fxFlex><\\/span>\\r\\n    <button mat-icon-button\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            type=\\\"button\\\">\\r\\n      <mat-icon class=\\\"material-icons\\\">close<\\/mat-icon>\\r\\n    <\\/button>\\r\\n  <\\/mat-toolbar>\\r\\n  <mat-progress-bar color=\\\"warn\\\" mode=\\\"indeterminate\\\" *ngIf=\\\"isLoading$ | async\\\">\\r\\n  <\\/mat-progress-bar>\\r\\n  <div mat-dialog-content>\\r\\n    <fieldset [disabled]=\\\"isLoading$ | async\\\">\\r\\n      <div fxFlex fxLayout=\\\"column\\\">\\r\\n<section fxLayout=\\\"column\\\">\\r\\n  <mat-form-field class=\\\"mat-block\\\" hideRequiredMarker floatLabel=\\\"always\\\">\\r\\n    <mat-label> <\\/mat-label>\\r\\n    <mat-select formControlName=\\\"type\\\" required placeholder=\\\"{{ \\'device-profile.schedule-type\\' | translate }}\\\">\\r\\n      <mat-option *ngFor=\\\"let alarmScheduleType of alarmScheduleTypes\\\" [value]=\\\"alarmScheduleType\\\">\\r\\n        {{ alarmScheduleTypeTranslate.get(alarmScheduleType) | translate }}\\r\\n      <\\/mat-option>\\r\\n    <\\/mat-select>\\r\\n    <mat-error *ngIf=\\\"alarmScheduleForm.get(\\'type\\').hasError(\\'required\\')\\\">\\r\\n      {{ \\'device-profile.schedule-type-required\\' | translate }}\\r\\n    <\\/mat-error>\\r\\n  <\\/mat-form-field>\\r\\n  <div *ngIf=\\\"alarmScheduleForm.get(\\'type\\').value !== alarmScheduleType.ANY_TIME\\\">\\r\\n    <tb-timezone-select\\r\\n      userTimezoneByDefault\\r\\n      required\\r\\n      formControlName=\\\"timezone\\\">\\r\\n    <\\/tb-timezone-select>\\r\\n    <section *ngIf=\\\"alarmScheduleForm.get(\\'type\\').value === alarmScheduleType.SPECIFIC_TIME\\\">\\r\\n      <div class=\\\"tb-small\\\" style=\\\"margin-bottom: 0.5em\\\" translate>device-profile.schedule-days<\\/div>\\r\\n      <div fxLayout=\\\"column\\\" fxLayout.gt-md=\\\"row\\\" fxLayoutGap=\\\"16px\\\">\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"16px\\\">\\r\\n          <mat-checkbox *ngFor=\\\"let day of firstRowDays\\\" [formControl]=\\\"weeklyRepeatControl(day)\\\">\\r\\n            {{ dayOfWeekTranslationsArray[day] | translate }}\\r\\n          <\\/mat-checkbox>\\r\\n        <\\/div>\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"16px\\\">\\r\\n          <mat-checkbox *ngFor=\\\"let day of secondRowDays\\\" [formControl]=\\\"weeklyRepeatControl(day)\\\">\\r\\n            {{ dayOfWeekTranslationsArray[day] | translate }}\\r\\n          <\\/mat-checkbox>\\r\\n        <\\/div>\\r\\n      <\\/div>\\r\\n      <tb-error style=\\\"display: block;\\\" [error]=\\\"alarmScheduleForm.get(\\'daysOfWeek\\').hasError(\\'dayOfWeeks\\')\\r\\n                  ? (\\'device-profile.schedule-days-of-week-required\\' | translate) : \\'\\'\\\"><\\/tb-error>\\r\\n      <div class=\\\"tb-small\\\" style=\\\"margin-bottom: 0.5em\\\" translate>device-profile.schedule-time<\\/div>\\r\\n      <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-xs=\\\"8px\\\">\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\" fxFlex.gt-md>\\r\\n          <mat-form-field fxFlex.xs fxFlex.sm=\\\"150px\\\" fxFlex.md=\\\"150px\\\" fxFlex.gt-md>\\r\\n            <mat-label translate>device-profile.schedule-time-from<\\/mat-label>\\r\\n            <mat-datetimepicker-toggle [for]=\\\"startTimePicker\\\" matPrefix><\\/mat-datetimepicker-toggle>\\r\\n            <mat-datetimepicker #startTimePicker type=\\\"time\\\" openOnFocus=\\\"true\\\"><\\/mat-datetimepicker>\\r\\n            <input required matInput formControlName=\\\"startsOn\\\" [matDatetimepicker]=\\\"startTimePicker\\\">\\r\\n          <\\/mat-form-field>\\r\\n          <mat-form-field fxFlex.xs fxFlex.sm=\\\"150px\\\" fxFlex.md=\\\"150px\\\" fxFlex.gt-md>\\r\\n            <mat-label translate>device-profile.schedule-time-to<\\/mat-label>\\r\\n            <mat-datetimepicker-toggle [for]=\\\"endTimePicker\\\" matPrefix><\\/mat-datetimepicker-toggle>\\r\\n            <mat-datetimepicker #endTimePicker type=\\\"time\\\" openOnFocus=\\\"true\\\"><\\/mat-datetimepicker>\\r\\n            <input required matInput formControlName=\\\"endsOn\\\" [matDatetimepicker]=\\\"endTimePicker\\\">\\r\\n          <\\/mat-form-field>\\r\\n        <\\/div>\\r\\n        <div fxFlex fxLayoutAlign=\\\"center center\\\" style=\\\"margin: auto\\\">\\r\\n          <div style=\\\"text-align: center\\\"\\r\\n               [innerHTML]=\\\"getSchedulerRangeText(alarmScheduleForm)\\\">\\r\\n          <\\/div>\\r\\n        <\\/div>\\r\\n      <\\/div>\\r\\n    <\\/section>\\r\\n    <section *ngIf=\\\"alarmScheduleForm.get(\\'type\\').value === alarmScheduleType.CUSTOM\\\">\\r\\n      <div class=\\\"tb-small\\\" style=\\\"margin-bottom: 0.5em\\\" translate>device-profile.schedule-days<\\/div>\\r\\n\\r\\n      <div *ngFor=\\\"let day of allDays\\\" fxLayout=\\\"column\\\" formArrayName=\\\"items\\\" fxLayoutGap=\\\"1em\\\">\\r\\n        <div fxLayout.xs=\\\"column\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\" [formGroupName]=\\\"\\'\\'+day\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutAlign.xs=\\\"center start\\\">\\r\\n          <mat-checkbox formControlName=\\\"enabled\\\" fxFlex=\\\"17\\\" (change)=\\\"changeCustomScheduler($event, day)\\\">\\r\\n            {{ dayOfWeekTranslationsArray[day] | translate }}\\r\\n          <\\/mat-checkbox>\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\" fxFlex>\\r\\n            <mat-form-field fxFlex.xs fxFlex.sm=\\\"100px\\\" fxFlex.md=\\\"100px\\\">\\r\\n              <mat-label translate>device-profile.schedule-time-from<\\/mat-label>\\r\\n              <mat-datetimepicker-toggle [for]=\\\"startTimePicker\\\" matPrefix><\\/mat-datetimepicker-toggle>\\r\\n              <mat-datetimepicker #startTimePicker type=\\\"time\\\" openOnFocus=\\\"true\\\"><\\/mat-datetimepicker>\\r\\n              <input required matInput formControlName=\\\"startsOn\\\" [matDatetimepicker]=\\\"startTimePicker\\\">\\r\\n            <\\/mat-form-field>\\r\\n            <mat-form-field fxFlex.xs fxFlex.sm=\\\"100px\\\" fxFlex.md=\\\"100px\\\">\\r\\n              <mat-label translate>device-profile.schedule-time-to<\\/mat-label>\\r\\n              <mat-datetimepicker-toggle [for]=\\\"endTimePicker\\\" matPrefix><\\/mat-datetimepicker-toggle>\\r\\n              <mat-datetimepicker #endTimePicker type=\\\"time\\\" openOnFocus=\\\"true\\\"><\\/mat-datetimepicker>\\r\\n              <input required matInput formControlName=\\\"endsOn\\\" [matDatetimepicker]=\\\"endTimePicker\\\">\\r\\n            <\\/mat-form-field>\\r\\n          <\\/div>\\r\\n          <div fxFlex fxLayoutAlign=\\\"center center\\\"\\r\\n               style=\\\"text-align: center\\\"\\r\\n               [innerHTML]=\\\"getSchedulerRangeText(itemsSchedulerForm().at(day))\\\">\\r\\n          <\\/div>\\r\\n        <\\/div>\\r\\n      <\\/div>\\r\\n\\r\\n      <tb-error style=\\\"display: block;\\\" [error]=\\\"alarmScheduleForm.get(\\'items\\').hasError(\\'dayOfWeeks\\')\\r\\n                  ? (\\'device-profile.schedule-days-of-week-required\\' | translate) : \\'\\'\\\"><\\/tb-error>\\r\\n    <\\/section>\\r\\n  <\\/div>\\r\\n<\\/section>\\r\\n<\\/div>\\r\\n    <\\/fieldset>\\r\\n  <\\/div>\\r\\n  <div mat-dialog-actions fxLayoutAlign=\\\"end center\\\">\\r\\n    <button mat-button color=\\\"primary\\\"\\r\\n            type=\\\"button\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async)\\\"\\r\\n            (click)=\\\"cancel()\\\" cdkFocusInitial>\\r\\n      {{ (readonly ? \\'action.close\\' : \\'action.cancel\\') | translate }}\\r\\n    <\\/button>\\r\\n    <button mat-raised-button color=\\\"primary\\\"\\r\\n            *ngIf=\\\"!readonly\\\"\\r\\n            type=\\\"submit\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async) || alarmScheduleForm.invalid || !alarmScheduleForm.dirty\\\">\\r\\n      {{ \\'action.save\\' | translate }}\\r\\n    <\\/button>\\r\\n  <\\/div>\\r\\n<\\/form>\\r\\n\";\n        const AlarmScheduleType = {\n            ANY_TIME: 'ANY_TIME',\n            SPECIFIC_TIME: 'SPECIFIC_TIME',\n            CUSTOM: 'CUSTOM'\n        };\n        const AlarmScheduleTypeTranslationMap = new Map(\n            [\n                [AlarmScheduleType.ANY_TIME,\n                    'device-profile.schedule-any-time'\n                ],\n                [AlarmScheduleType.SPECIFIC_TIME,\n                    'device-profile.schedule-specific-time'\n                ],\n                [AlarmScheduleType.CUSTOM,\n                    'device-profile.schedule-custom'\n                ]\n            ]);\n        const dayOfWeekTranslations = new Array(\n            'device-profile.schedule-day.monday',\n            'device-profile.schedule-day.tuesday',\n            'device-profile.schedule-day.wednesday',\n            'device-profile.schedule-day.thursday',\n            'device-profile.schedule-day.friday',\n            'device-profile.schedule-day.saturday',\n            'device-profile.schedule-day.sunday'\n        );\n\n        function editScheduleDialogCtrl(instace) {\n            let vm = instace;\n            vm.alarmScheduleTypes = Object.keys(\n                AlarmScheduleType);\n            vm.alarmScheduleType = AlarmScheduleType;\n            vm.alarmScheduleTypeTranslate =\n                AlarmScheduleTypeTranslationMap;\n            vm.dayOfWeekTranslationsArray =\n                dayOfWeekTranslations;\n            vm.dayOfWeekTranslationsArray =\n                dayOfWeekTranslations;\n            vm.allDays = Array(7).fill(0).map((x, i) =>\n                i);\n            vm.firstRowDays = Array(4).fill(0).map((x,\n                i) => i);\n            vm.secondRowDays = Array(3).fill(0).map((x,\n                i) => i + 4);\n            vm.defaultItems = Array.from({\n                length: 7\n            }, (value, i) => ({\n                enabled: true,\n                dayOfWeek: i + 1\n            }));\n            vm.propagateChange = (v) => {};\n\n            function validateDayOfWeeks(control) {\n                const dayOfWeeks = control.value;\n                if (!dayOfWeeks || !dayOfWeeks.length ||\n                    !dayOfWeeks.find(v => v === true)) {\n                    return {\n                        dayOfWeeks: true\n                    };\n                }\n                return null;\n            }\n\n            vm.validateDayOfWeeks = validateDayOfWeeks;\n\n            function defaultItemsScheduler(index) {\n                return vm.fb.group({\n                    enabled: [true],\n                    dayOfWeek: [index + 1],\n                    startsOn: [0, vm.validators\n                        .required\n                    ],\n                    endsOn: [0, vm.validators\n                        .required\n                    ]\n                });\n            }\n\n            vm.defaultItemsScheduler =\n                defaultItemsScheduler;\n\n            function validateItems(control) {\n                const items = control.value;\n                if (!items || !items.length || !items\n                    .find(v => v.enabled === true)) {\n                    return {\n                        dayOfWeeks: true\n                    };\n                }\n                return null;\n            }\n\n            vm.validateItems = validateItems;\n\n            function getDefaultTimezone() {\n\n            }\n\n            vm.getDefaultTimezone = getDefaultTimezone;\n\n            function updateValidators(type,\n                changedType = false) {\n                switch (type) {\n                    case AlarmScheduleType.ANY_TIME:\n                        vm.alarmScheduleForm.get(\n                            'timezone').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'daysOfWeek').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'startsOn').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'endsOn').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'items').disable({\n                            emitEvent: false\n                        });\n                        break;\n                    case AlarmScheduleType\n                    .SPECIFIC_TIME:\n                        vm.alarmScheduleForm.get(\n                            'timezone').enable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'daysOfWeek').enable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'startsOn').enable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'endsOn').enable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'items').disable({\n                            emitEvent: false\n                        });\n                        break;\n                    case AlarmScheduleType.CUSTOM:\n                        vm.alarmScheduleForm.get(\n                            'timezone').enable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'daysOfWeek').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'startsOn').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'endsOn').disable({\n                            emitEvent: false\n                        });\n                        if (changedType) {\n                            vm.alarmScheduleForm.get(\n                                'items').enable({\n                                emitEvent: false\n                            });\n                        }\n                        break;\n                }\n            }\n\n            vm.updateValidators = updateValidators;\n\n            function changeCustomScheduler($event,\n                index) {\n                const value = $event.checked;\n                vm.disabledSelectedTime(value, index,\n                    true);\n            }\n\n            vm.changeCustomScheduler =\n                changeCustomScheduler;\n\n            function disabledSelectedTime(enable, index,\n                emitEvent = false) {\n                if (enable) {\n                    vm.itemsSchedulerForm().at(index)\n                        .get('startsOn').enable({\n                            emitEvent: false\n                        });\n                    vm.itemsSchedulerForm().at(index)\n                        .get('endsOn').enable({\n                            emitEvent\n                        });\n                } else {\n                    vm.itemsSchedulerForm().at(index)\n                        .get('startsOn').disable({\n                            emitEvent: false\n                        });\n                    vm.itemsSchedulerForm().at(index)\n                        .get('endsOn').disable({\n                            emitEvent\n                        });\n                }\n            }\n\n            vm.disabledSelectedTime =\n                disabledSelectedTime;\n\n            function getSchedulerRangeText(control) {\n                return getAlarmScheduleRangeText(control\n                    .get('startsOn').value, control\n                    .get('endsOn').value);\n            }\n\n            vm.getSchedulerRangeText =\n                getSchedulerRangeText;\n\n            function timeOfDayToMoment(date) {\n                if (typeof date === 'number' || date ===\n                    null) {\n                    return moment([1970, 0, 1, 0, 0, 0,\n                        0\n                    ]);\n                }\n                return moment([1970, 0, 1, date\n                    .getHours(), date\n                    .getMinutes(), 0, 0\n                ]);\n            }\n\n            vm.timeOfDayToMoment = timeOfDayToMoment;\n\n            function getAlarmScheduleRangeText(startsOn,\n                endsOn) {\n                const start = timeOfDayToMoment(\n                    startsOn);\n                const end = timeOfDayToMoment(endsOn);\n                if (start < end) {\n                    return `<span><span class=\"nowrap\">${start.format('hh:mm A')}</span> – <span class=\"nowrap\">${end.format('hh:mm A')}</span></span>`;\n                } else if (start.valueOf() === 0 && end\n                    .valueOf() === 0 || start.isSame(\n                        moment([1970, 0])) && end\n                    .isSame(moment([1970, 0]))) {\n                    return '<span><span class=\"nowrap\">12:00 AM</span> – <span class=\"nowrap\">12:00 PM</span></span>';\n                }\n                return `<span><span class=\"nowrap\">12:00 AM</span> – <span class=\"nowrap\">${end.format('hh:mm A')}</span>` +\n                    ` and <span class=\"nowrap\">${start.format('hh:mm A')}</span> – <span class=\"nowrap\">12:00 PM</span></span>`;\n            }\n\n            vm.getAlarmScheduleRangeText =\n                getAlarmScheduleRangeText;\n\n            function weeklyRepeatControl(index) {\n                return vm.alarmScheduleForm.get(\n                    'daysOfWeek').at(index);\n            }\n\n            vm.weeklyRepeatControl =\n            weeklyRepeatControl;\n\n            function itemsSchedulerForm() {\n                return vm.alarmScheduleForm.get(\n                'items');\n            }\n\n            vm.itemsSchedulerForm = itemsSchedulerForm;\n\n            function save() {\n                const value = vm.alarmScheduleForm\n                .value;\n                if (value.daysOfWeek !== undefined) {\n                    value.daysOfWeek = value.daysOfWeek\n                        .map((day, index) => day ?\n                            index + 1 : null)\n                        .filter(day => !!day);\n                }\n                if (value.startsOn) {\n                    value.startsOn =\n                        timeOfDayToUTCTimestamp(value\n                            .startsOn);\n                }\n                if (value.endsOn) {\n                    value.endsOn =\n                        timeOfDayToUTCTimestamp(value\n                            .endsOn);\n                }\n                if (value.items !== undefined) {\n                    value.items = vm.alarmScheduleForm\n                        .getRawValue().items;\n                    value.items = value.items.map((\n                        item) => {\n                            return {\n                                ...item,\n                                startsOn: timeOfDayToUTCTimestamp(\n                                    item\n                                    .startsOn),\n                                endsOn: timeOfDayToUTCTimestamp(\n                                    item.endsOn)\n                            };\n                        });\n                }\n                vm.dialogRef.close(value);\n            }\n\n            vm.save = save;\n\n            function cancel() {\n\n                vm.dialogRef.close(null);\n            }\n\n            vm.cancel = cancel;\n\n            function updateModel() {\n                const value = vm.alarmScheduleForm\n                .value;\n                if (value.daysOfWeek !== undefined) {\n                    value.daysOfWeek = value.daysOfWeek\n                        .map((day, index) => day ?\n                            index + 1 : null)\n                        .filter(day => !!day);\n                }\n                if (value.startsOn !== undefined &&\n                    value.startsOn !== 0) {\n                    value.startsOn =\n                        timeOfDayToUTCTimestamp(value\n                            .startsOn);\n                }\n                if (value.endsOn !== undefined && value\n                    .endsOn !== 0) {\n                    value.endsOn =\n                        timeOfDayToUTCTimestamp(value\n                            .endsOn);\n                }\n                if (value.items !== undefined) {\n                    value.items = vm.alarmScheduleForm\n                        .getRawValue().items;\n                    value.items = value.items.map((\n                        item) => {\n                            return {\n                                ...item,\n                                startsOn: timeOfDayToUTCTimestamp(\n                                    item\n                                    .startsOn),\n                                endsOn: timeOfDayToUTCTimestamp(\n                                    item.endsOn)\n                            };\n                        });\n                }\n                return value;\n            }\n\n            vm.alarmScheduleForm = vm.fb.group({\n                type: [AlarmScheduleType\n                    .ANY_TIME, vm.validators\n                    .required\n                ],\n                timezone: [null, vm.validators\n                    .required\n                ],\n                daysOfWeek: vm.fb.array(\n                    new Array(7).fill(\n                    false),\n                    validateDayOfWeeks),\n                startsOn: [0, vm.validators\n                    .required\n                ],\n                endsOn: [0, vm.validators\n                    .required\n                ],\n                items: vm.fb.array(Array.from({\n                            length: 7\n                        }, (value, i) =>\n                        defaultItemsScheduler(\n                            i)),\n                    validateItems)\n            });\n            if (vm.data.schedule) {\n                let schedule = vm.data.schedule;\n                vm.initedData = true;;\n                if (schedule === null || schedule ===\n                    undefined) {\n                    schedule = {\n                        type: \"ANY_TIME\"\n                    }\n                }\n                switch (schedule.type) {\n                    case \"SPECIFIC_TIME\":\n                        let daysOfWeek = new Array(7)\n                            .fill(false);\n                        if (schedule.daysOfWeek !==\n                            undefined) {\n                            daysOfWeek = daysOfWeek.map(\n                                (item, index) =>\n                                schedule.daysOfWeek\n                                .indexOf(index +\n                                1) > -1);\n                        }\n                        vm.alarmScheduleForm\n                    .patchValue({\n                            type: schedule.type,\n                            timezone: schedule\n                                .timezone,\n                            daysOfWeek,\n                            startsOn: utcTimestampToTimeOfDay(\n                                schedule\n                                .startsOn),\n                            endsOn: utcTimestampToTimeOfDay(\n                                schedule\n                                .endsOn)\n                        }, {\n                            emitEvent: false\n                        });\n                        break;\n                    case \"CUSTOM\":\n                        if (schedule.items) {\n                            const alarmDays = [];\n                            schedule.items.sort((a,\n                                    b) => a.dayOfWeek -\n                                    b.dayOfWeek)\n                                .forEach((item,\n                                    index) => {\n                                        disabledSelectedTime\n                                            (item\n                                                .enabled,\n                                                index);\n                                        alarmDays.push({\n                                            enabled: item\n                                                .enabled,\n                                            startsOn: utcTimestampToTimeOfDay(\n                                                item\n                                                .startsOn\n                                                ),\n                                            endsOn: utcTimestampToTimeOfDay(\n                                                item\n                                                .endsOn\n                                                )\n                                        });\n                                    });\n                            vm.alarmScheduleForm\n                                .patchValue({\n                                    type: schedule\n                                        .type,\n                                    timezone: schedule\n                                        .timezone,\n                                    items: alarmDays\n                                }, {\n                                    emitEvent: false\n                                });\n                        }\n                        break;\n                    default:\n                        vm.alarmScheduleForm.patchValue(\n                            schedule || undefined, {\n                                emitEvent: false\n                            });\n                }\n                vm.updateValidators(vm.data.schedule\n                    .type, true);\n                // vm.alarmScheduleForm.updateValueAndValidity();\n\n            }\n            vm.alarmScheduleForm.get('type')\n                .valueChanges.subscribe((type) => {\n                    //   getDefaultTimezone().subscribe((defaultTimezone) => {\n                    if (vm.initedData) {\n                        vm.initedData = false;\n                        vm.alarmScheduleForm.reset({\n                            type,\n                            items: vm\n                                .defaultItems,\n                            timezone: null\n                        }, {\n                            emitEvent: false\n                        });\n                        vm.updateValidators(type,\n                            true);\n                        vm.alarmScheduleForm\n                            .updateValueAndValidity();\n                    }\n                    //   });\n                });\n        }\n\n        widgetContext.customDialog.customDialog(htmlTemplate,\n            editScheduleDialogCtrl, {\n                schedule: control.value\n            }).subscribe(resp => {\n            if (resp !== null) {\n                control.patchValue(resp);\n                widgetContext.detectChanges();\n                vm.alarmProfile\n                    .updateValueAndValidity();\n            }\n        });\n\n    };\n\n    vm.alarmsFormArray = function() {\n        return vm.alarmProfile.get('alarms');\n    };\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    function deviceProfileAlarmValidator(control) {\n        const deviceProfileAlarm = control.value;\n        if (deviceProfileAlarm && deviceProfileAlarm\n            .alarmType && deviceProfileAlarm\n            .createAlarmRules) {\n            if (deviceProfileAlarm.createAlarmRules\n                .length) {\n                let alarmRulesValid = true;\n                for (const severity of deviceProfileAlarm\n                        .createAlarmRules) {\n                    const alarmRule = severity.alarmRule;\n                    if (!alarmRuleValid(alarmRule)) {\n                        alarmRulesValid = false;\n                        break;\n                    }\n                }\n                if (alarmRulesValid) {\n                    if (deviceProfileAlarm.clearRule.schedule && !\n                        alarmRuleValid(deviceProfileAlarm\n                            .clearRule)) {\n                        alarmRulesValid = false;\n                    }\n                }\n                if (alarmRulesValid) {\n                    return null;\n                }\n            }\n        }\n        return {\n            deviceProfileAlarm: true\n        };\n    }\n\n    function alarmRuleValid(alarmRule) {\n        if (!alarmRule || !alarmRule.condition || !alarmRule\n            .condition.condition || !alarmRule.condition\n            .condition.length) {\n            return false;\n        }\n        return true;\n    }\n\n    vm.createAlarmRulesFormArray = function(index) {\n\n    }\n\n    vm.addAlarm = function() {\n        const alarm = {\n            alarmType: ['', [vm.validators\n                .required]],\n            propagate: [true],\n            isUtilizationAlarm: [false],\n            enableReminder: [false],\n            notifications_interaval: [900, [vm.validators\n                .required]],\n            enableEscalation: [false],\n            escalation_interaval: [1800, [vm.validators\n                .required]],\n            propagateRelationTypes: [[\"Contains\"]],\n            clearRule: vm.fb.group({}),\n            createRules: {\n                CRITICAL: {\n                    condition: {\n                        condition: []\n                    }\n                }\n            },\n            createAlarmRules: vm.fb.array([])\n        };\n\n        const alarmsArray = vm.alarmsFormArray();\n        const fg = vm.fb.group(alarm, {\n            validators: deviceProfileAlarmValidator\n        });\n        alarmsArray.push(fg);\n        vm.alarmProfile.updateValueAndValidity();\n    };\n    vm.separatorKeysCodes = [13, 188, 186];\n    vm.addRelationType = function(event, control) {\n        const input = event.input;\n        let value = event.value;\n        if ((value || '').trim()) {\n            value = value.trim();\n            let keys = control.get(\n                'propagateRelationTypes').value;\n            if (!keys || keys.indexOf(value) === -1) {\n                if (!keys) {\n                    keys = [];\n                }\n                keys.push(value);\n                control.get('propagateRelationTypes')\n                    .setValue(keys, {\n                        emitEvent: true\n                    });\n            }\n        }\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    vm.removeRelationType = function(key, control) {\n        const keys = control.value;\n        const index = keys.indexOf(key);\n        if (index >= 0) {\n            keys.splice(index, 1);\n            control.setValue(keys, {\n                emitEvent: true\n            });\n        }\n    }\n\n    vm.addCreateAlarmRule = function(\n    createAlarmRulesArray) {\n        createAlarmRulesArray.push(vm.fb.group({\n            severity: [\n                getFirstUnusedSeverity(\n                    createAlarmRulesArray\n                    ), vm.validators\n                .required\n            ],\n            alarmRule: vm.fb.group({\n                condition: vm.fb\n                    .group({\n                            condition: [\n                                []\n                            ],\n                            spec: [{\n                                type: \"SIMPLE\"\n                            }]\n                        }, vm\n                        .validators\n                        .required),\n                schedule: [null],\n                alarmDetails: [null]\n            }, alarmRuleValidator)\n        }));\n    };\n\n    vm.conditionSet = function(createAlarmRuleControl) {\n        return createAlarmRuleControl.value && (\n            createAlarmRuleControl.value.alarmRule ?\n            createAlarmRuleControl.value.alarmRule\n            .condition.condition.length :\n            createAlarmRuleControl.value.condition\n            .condition.length);\n    }\n    \n    vm.createAlarmText = function(createAlarmRuleValue) {\n        console.log('create', createAlarmRuleValue);\n        const keyFilters = createAlarmRuleValue.alarmRule.condition.condition;\n        const filtersText = keyFilters.map(keyFilter=>keyFilterToText(keyFilter,\n        (keyFilters.length > 1 ? \"AND\" : undefined)));\n        let result;\n        if (filtersText.length > 1) {\n            const andText = widgetContext.translate.instant('filter.operation.and');\n            result = filtersText.join(' <span class=\"tb-filter-complex-operation\">' + andText + '</span> ');\n        } else {\n            result = filtersText[0];\n        }\n        return result;\n    }\n    \n    vm.clearAlarmText = function(createAlarmRuleValue) {\n        console.log('clear', createAlarmRuleValue);\n        const keyFilters = createAlarmRuleValue.condition.condition;\n        const filtersText = keyFilters.map(keyFilter => \n            keyFilterToText(keyFilter, (keyFilters.length > 1 ? \"AND\" : undefined)));\n        let result;\n        if (filtersText.length > 1) {\n            const andText = widgetContext.translate.instant('filter.operation.and');\n            result = filtersText.join(' <span class=\"tb-filter-complex-operation\">' + andText + '</span> ');\n        } else {\n            result = filtersText[0];\n        }\n        return result;\n    }\n    \n    function keyFilterToText (keyFilter, parentComplexOperation) {\n        const keyFilterPredicate = keyFilter.predicate[0];\n        return keyFilterPredicateToText(keyFilter, keyFilterPredicate, parentComplexOperation);\n    }\n    \n    function keyFilterPredicateToText(keyFilter, keyFilterPredicate, parentComplexOperation) {\n      if (keyFilterPredicate.type === \"COMPLEX\") {\n          const complexPredicate = keyFilterPredicate;\n          const complexOperation = complexPredicate.operation;\n          const complexPredicatesText = complexPredicate.predicates.map(predicate => keyFilterPredicateToText(keyFilter, predicate, complexOperation));\n          if (complexPredicatesText.length > 1) {\n              const operationText = complexOperation;\n              let result = complexPredicatesText.join(' <span class=\"tb-filter-complex-operation\">' + operationText + '</span> ');\n              if (complexOperation === \"OR\" && parentComplexOperation && parentComplexOperation !== \"OR\") {\n                  result = `<span class=\"tb-filter-bracket\"><span class=\"tb-left-bracket\">(</span>${result}<span class=\"tb-right-bracket\">)</span></span>`;\n              }\n              return result;\n          } else {\n              return complexPredicatesText[0];\n          }\n      }  else {\n          return simpleKeyFilterPredicateToText(keyFilter, keyFilterPredicate);\n      }\n    }\n    \n    function simpleKeyFilterPredicateToText (keyFilter, keyFilterPredicate) {\n        const key = keyFilter.key.key;\n        let operation;\n        let value;\n        const val = keyFilterPredicate.value;\n        const dynamicValue = !!val.dynamicValue && !!val.dynamicValue.sourceType;\n        if (dynamicValue) {\n            value = '<span class=\"tb-filter-dynamic-value\"><span class=\"tb-filter-dynamic-source\">' + 'current device' + '</span>';\n            value += '.<span class=\"tb-filter-value\">' + val.dynamicValue.sourceAttribute + '</span></span>';\n        }\n        switch (keyFilterPredicate.type) {\n            case \"STRING\":\n                operation = keyFilterPredicate.operation;\n                if (keyFilterPredicate.ignoreCase) {\n                    operation += ' ' + widgetContext.translate.instant('filter.ignore-case');\n                }\n                if (!dynamicValue) {\n                    value = `'${keyFilterPredicate.value.defaultValue}'`;\n                }\n                break;\n            case \"NUMERIC\":\n                operation = keyFilterPredicate.operation;\n                if (!dynamicValue) {\n                    if (keyFilter.valueType === \"DATE_TIME\") {\n                        value = new Date(keyFilter.value.defaultValue);\n                    } else {\n                        value = keyFilterPredicate.value.defaultValue + \"\";\n                    }\n                }\n                break;\n            case \"BOOLEAN\":\n                operation = keyFilterPredicate.operation;\n                value = widgetContext.translate.instant(keyFilterPredicate.value.defaultValue ? 'value.true' : 'value.false');\n                break;\n        }\n        if (!dynamicValue) {\n            value = `<span class=\"tb-filter-value\">${value}</span>`;\n        }\n        return `<span class=\"tb-filter-predicate\"><span class=\"tb-filter-entity-key\">${key}</span> <span class=\"tb-filter-simple-operation\">${operation}</span> ${value}</span>`;\n    }\n\n    vm.openEditDetailsDialog = function($event,\n        alarmDetailsControl) {\n        let htmlTemplate =\n            \"<form [formGroup]=\\\"editDetailsFormGroup\\\" (ngSubmit)=\\\"save()\\\" style=\\\"min-width: 800px;\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <h2>{{ \\'device-profile.alarm-rule-details\\' | translate }}<\\/h2>\\r\\n    <span fxFlex><\\/span>\\r\\n    <button mat-icon-button\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            type=\\\"button\\\">\\r\\n      <mat-icon class=\\\"material-icons\\\">close<\\/mat-icon>\\r\\n    <\\/button>\\r\\n  <\\/mat-toolbar>\\r\\n  <mat-progress-bar color=\\\"warn\\\" mode=\\\"indeterminate\\\" *ngIf=\\\"isLoading$ | async\\\">\\r\\n  <\\/mat-progress-bar>\\r\\n  <div mat-dialog-content>\\r\\n    <fieldset [disabled]=\\\"isLoading$ | async\\\">\\r\\n      <div fxFlex fxLayout=\\\"column\\\">\\r\\n        <mat-form-field class=\\\"mat-block\\\">\\r\\n          <mat-label translate>device-profile.alarm-details<\\/mat-label>\\r\\n          <textarea matInput formControlName=\\\"alarmDetails\\\" rows=\\\"5\\\"><\\/textarea>\\r\\n        <\\/mat-form-field>\\r\\n      <\\/div>\\r\\n    <\\/fieldset>\\r\\n  <\\/div>\\r\\n  <div mat-dialog-actions fxLayoutAlign=\\\"end center\\\">\\r\\n    <button mat-button color=\\\"primary\\\"\\r\\n            type=\\\"button\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async)\\\"\\r\\n            (click)=\\\"cancel()\\\" cdkFocusInitial>\\r\\n      {{ \\'action.cancel\\' | translate }}\\r\\n    <\\/button>\\r\\n    <button *ngIf=\\\"!data.readonly\\\" mat-raised-button color=\\\"primary\\\"\\r\\n            type=\\\"submit\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async) || editDetailsFormGroup.invalid || !editDetailsFormGroup.dirty\\\">\\r\\n      {{ \\'action.save\\' | translate }}\\r\\n    <\\/button>\\r\\n  <\\/div>\\r\\n<\\/form>\"\n        if ($event) {\n            $event.stopPropagation();\n        }\n\n        function openEditDetailsDialogCtrl(instace) {\n            let vm = instace;\n            vm.alarmDetails = vm.data.alarmDetails\n            .value;\n            vm.submitted = false;\n            vm.editDetailsFormGroup = vm.fb.group({\n                alarmDetails: [vm.alarmDetails]\n            });\n            if (vm.data.readonly) {\n                vm.editDetailsFormGroup.disable();\n            }\n\n            vm.cancel = function() {\n\n                vm.dialogRef.close(null);\n            };\n\n            vm.save = function() {\n                vm.submitted = true;\n                vm.alarmDetails = vm\n                    .editDetailsFormGroup.get(\n                        'alarmDetails').value;\n                vm.dialogRef.close(vm.alarmDetails);\n            };\n        };\n\n        widgetContext.customDialog.customDialog(htmlTemplate,\n            openEditDetailsDialogCtrl, {\n                alarmDetails: alarmDetailsControl,\n                readonly: false\n            }).subscribe(alarmDetails => {\n            if (alarmDetails !== null) {\n                alarmDetailsControl.patchValue(\n                    alarmDetails);\n                widgetContext.detectChanges();\n                vm.alarmProfile\n                    .updateValueAndValidity();\n            }\n        });\n    };\n\n    vm.removeCreateAlarmRule = function(\n        createAlarmRulesArray, index) {\n        createAlarmRulesArray.removeAt(index);\n    };\n\n    function alarmRuleValidator(control) {\n        const alarmRule = control.value;\n        return alarmRuleValid(alarmRule) ? null : {\n            alarmRule: true\n        };\n    }\n\n    getFirstUnusedSeverity = function(\n    createAlarmRulesArray) {\n        for (const severityKey of Object.keys(\n                AlarmSeverity)) {\n            const severity = AlarmSeverity[severityKey];\n            if (!createAlarmRulesArray.controls\n                .length) {\n                return severity;\n            } else if (!createAlarmRulesArray.controls\n                .some(ctrl => {\n                    return ctrl.value.severity ===\n                    severity;\n                })) {\n                return severity;\n            }\n        }\n        return null;\n    };\n\n    vm.save = function() {\n        let data = vm.alarmProfile.value;\n        data.alarms.forEach(alarm => {\n            alarm.createRules = {};\n            alarm.createAlarmRules.forEach(\n                condition => {\n                    alarm.createRules[\n                            condition\n                            .severity] =\n                        condition.alarmRule;\n                })\n        })\n        let alarmProfile = {\n            name: data.alarmProfileName,\n            label: data.alarmProfileName,\n            type: \"alarmProfile\"\n        }\n        widgetContext.assetService.saveAsset(alarmProfile)\n            .subscribe(asset => {\n                widgetContext.attributeService\n                    .saveEntityAttributes(asset.id,\n                        \"SERVER_SCOPE\", [{\n                            key: \"alarmConfig\",\n                            value: data\n                        }]).subscribe(resp => {\n                            widgetContext.updateAliases();\n                        vm.dialogRef.close(\n                        null);\n                    })\n            })\n    };\n\n    vm.openFilterDialog = function($event,\n        createAlarmRuleControl, isClearAlarm) {\n        if ($event) {\n            $event.stopPropagation();\n        }\n        const html =\n            \"<form *ngIf=\\\"conditionFormGroup\\\"\\r\\n    [formGroup]=\\\"conditionFormGroup\\\" (ngSubmit)=\\\"save()\\\"\\r\\n    style=\\\"min-width: 800px;\\\">\\r\\n    <mat-toolbar color=\\\"primary\\\">\\r\\n        <h2>{{ (readonly ? \\'device-profile.alarm-rule-condition\\' : \\'device-profile.edit-alarm-rule-condition\\') | translate }}\\r\\n        <\\/h2>\\r\\n        <span fxFlex><\\/span>\\r\\n        <button mat-icon-button (click)=\\\"cancel()\\\"\\r\\n            type=\\\"button\\\">\\r\\n            <mat-icon class=\\\"material-icons\\\">close\\r\\n            <\\/mat-icon>\\r\\n        <\\/button>\\r\\n    <\\/mat-toolbar>\\r\\n    <mat-progress-bar color=\\\"warn\\\" mode=\\\"indeterminate\\\"\\r\\n        *ngIf=\\\"isLoading$ | async\\\">\\r\\n    <\\/mat-progress-bar>\\r\\n    <div mat-dialog-content>\\r\\n        <fieldset [disabled]=\\\"isLoading$ | async\\\">\\r\\n            <div fxFlex fxLayout=\\\"column\\\">\\r\\n                <section fxLayout=\\\"column\\\">\\r\\n                    <mat-accordion [multi]=\\\"true\\\">\\r\\n                        <mat-expansion-panel\\r\\n                            [expanded]=\\\"true\\\">\\r\\n                            <mat-expansion-panel-header>\\r\\n                                <mat-panel-title>\\r\\n                                    <div translate>\\r\\n                                        filter.key-filters\\r\\n                                    <\\/div>\\r\\n                                <\\/mat-panel-title>\\r\\n                            <\\/mat-expansion-panel-header>\\r\\n                            <div fxLayout=\\\"row\\\">\\r\\n                                <span fxFlex=\\\"8\\\"><\\/span>\\r\\n                                <div fxLayout=\\\"row\\\"\\r\\n                                    fxLayoutAlign=\\\"start center\\\"\\r\\n                                    fxFlex=\\\"92\\\">\\r\\n                                    <label fxFlex translate\\r\\n                                        class=\\\"tb-title no-padding\\\">filter.key-name<\\/label>\\r\\n                                    <label fxFlex translate\\r\\n                                        class=\\\"tb-title no-padding\\\">filter.key-type.key-type<\\/label>\\r\\n                                    <span\\r\\n                                        [fxShow]=\\\"!disabled\\\"\\r\\n                                        style=\\\"min-width: 80px;\\\">&nbsp;<\\/span>\\r\\n                                    <span\\r\\n                                        [fxShow]=\\\"disabled\\\"\\r\\n                                        style=\\\"min-width: 40px;\\\">&nbsp;<\\/span>\\r\\n                                <\\/div>\\r\\n                            <\\/div>\\r\\n                            <mat-divider><\\/mat-divider>\\r\\n                            <div class=\\\"key-filter-list\\\">\\r\\n                                <div fxLayout=\\\"row\\\"\\r\\n                                    fxLayoutAlign=\\\"start center\\\"\\r\\n                                    style=\\\"max-height: 40px;\\\"\\r\\n                                    formArrayName=\\\"condition\\\"\\r\\n                                    *ngFor=\\\"let keyFilterControl of keyFiltersFormArray().controls; let $index = index\\\">\\r\\n                                    <div fxFlex=\\\"8\\\"\\r\\n                                        class=\\\"filters-operation\\\">\\r\\n                                        <span\\r\\n                                            *ngIf=\\\"$index > 0\\\"\\r\\n                                            translate>filter.operation.and<\\/span>\\r\\n                                    <\\/div>\\r\\n                                    <div fxLayout=\\\"column\\\" \\r\\n                                        fxFlex=\\\"92\\\" *ngIf=\\\"keyFilterControl\\\">\\r\\n                                        <div fxLayout=\\\"row\\\" [formControl]=\\\"keyFilterControl\\\"\\r\\n                                            fxLayoutAlign=\\\"start center\\\">\\r\\n                                            <div fxFlex>\\r\\n                                                {{ keyFilterControl.value.key.key }}\\r\\n                                            <\\/div>\\r\\n                                            <div fxFlex\\r\\n                                                translate>\\r\\n                                                {{ entityKeyTypeTranslations.get(keyFilterControl.value.key.type) }}\\r\\n                                            <\\/div>\\r\\n                                            <button\\r\\n                                                mat-icon-button\\r\\n                                                color=\\\"primary\\\"\\r\\n                                                type=\\\"button\\\"\\r\\n                                                (click)=\\\"editKeyFilter($index)\\\"\\r\\n                                                matTooltip=\\\"{{ (disabled ? \\'filter.key-filter\\' : \\'filter.edit-key-filter\\') | translate }}\\\"\\r\\n                                                matTooltipPosition=\\\"above\\\">\\r\\n                                                <mat-icon>\\r\\n                                                    {{disabled ? \\'more_vert\\' : \\'edit\\'}}\\r\\n                                                <\\/mat-icon>\\r\\n                                            <\\/button>\\r\\n                                            <button\\r\\n                                                mat-icon-button\\r\\n                                                color=\\\"primary\\\"\\r\\n                                                [fxShow]=\\\"!disabled\\\"\\r\\n                                                type=\\\"button\\\"\\r\\n                                                (click)=\\\"removeKeyFilter($index)\\\"\\r\\n                                                matTooltip=\\\"{{ \\'filter.remove-key-filter\\' | translate }}\\\"\\r\\n                                                matTooltipPosition=\\\"above\\\">\\r\\n                                                <mat-icon>\\r\\n                                                    close\\r\\n                                                <\\/mat-icon>\\r\\n                                            <\\/button>\\r\\n                                        <\\/div>\\r\\n                                        <mat-divider>\\r\\n                                        <\\/mat-divider>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <span\\r\\n                                    [fxShow]=\\\"!keyFiltersFormArray().length\\\"\\r\\n                                    fxLayoutAlign=\\\"center center\\\"\\r\\n                                    [ngClass]=\\\"{\\'disabled\\': disabled}\\\"\\r\\n                                    class=\\\"no-data-found\\\"\\r\\n                                    translate>filter.no-key-filters<\\/span>\\r\\n                            <\\/div>\\r\\n                            <div style=\\\"margin-top: 16px;\\\">\\r\\n                                <button mat-button\\r\\n                                    mat-raised-button\\r\\n                                    color=\\\"primary\\\"\\r\\n                                    [fxShow]=\\\"!disabled\\\"\\r\\n                                    (click)=\\\"addKeyFilter()\\\"\\r\\n                                    type=\\\"button\\\"\\r\\n                                    matTooltip=\\\"{{ \\'filter.add-key-filter\\' | translate }}\\\"\\r\\n                                    matTooltipPosition=\\\"above\\\">\\r\\n                                    {{ \\'filter.add-key-filter\\' | translate }}\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                        <\\/mat-expansion-panel>\\r\\n                        <mat-expansion-panel\\r\\n                            [expanded]=\\\"true\\\">\\r\\n                            <mat-expansion-panel-header>\\r\\n                                <mat-panel-title>\\r\\n                                    <div translate>\\r\\n                                        filter.preview<\\/div>\\r\\n                                <\\/mat-panel-title>\\r\\n                            <\\/mat-expansion-panel-header>\\r\\n                            <div class=\\\"tb-filter-preview\\\">\\r\\n                                <div class=\\\"tb-filter-text\\\"  [innerHTML]=\\\"createAlarmText(keyFiltersControl)\\\"><\\/div>\\r\\n                            <\\/div>\\r\\n                        <\\/mat-expansion-panel>\\r\\n                    <\\/mat-accordion>\\r\\n                <\\/section>\\r\\n                <section formGroupName=\\\"spec\\\" class=\\\"row\\\">\\r\\n                    <mat-form-field class=\\\"mat-block\\\"\\r\\n                        hideRequiredMarker>\\r\\n                        <mat-label translate>\\r\\n                            device-profile.condition-type\\r\\n                        <\\/mat-label>\\r\\n                        <mat-select formControlName=\\\"type\\\"\\r\\n                            required>\\r\\n                            <mat-option\\r\\n                                *ngFor=\\\"let alarmConditionType of alarmConditionTypes\\\"\\r\\n                                [value]=\\\"alarmConditionType\\\">\\r\\n                                {{alarmConditionType}}\\r\\n                                <!--{{ alarmConditionTypeTranslation.get(alarmConditionType) | translate }}-->\\r\\n                            <\\/mat-option>\\r\\n                        <\\/mat-select>\\r\\n                        <mat-error\\r\\n                            *ngIf=\\\"conditionFormGroup.get(\\'spec.type\\').hasError(\\'required\\')\\\">\\r\\n                            {{ \\'device-profile.condition-type-required\\' | translate }}\\r\\n                        <\\/mat-error>\\r\\n                    <\\/mat-form-field>\\r\\n                    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\"\\r\\n                        *ngIf=\\\"conditionFormGroup.get(\\'spec.type\\').value == AlarmConditionType.DURATION\\\">\\r\\n                        <mat-form-field class=\\\"mat-block\\\"\\r\\n                            hideRequiredMarker fxFlex\\r\\n                            floatLabel=\\\"always\\\">\\r\\n                            <mat-label><\\/mat-label>\\r\\n                            <input type=\\\"number\\\" required\\r\\n                                step=\\\"1\\\" min=\\\"1\\\"\\r\\n                                max=\\\"2147483647\\\" matInput\\r\\n                                placeholder=\\\"{{ \\'device-profile.condition-duration-value\\' | translate }}\\\"\\r\\n                                formControlName=\\\"value\\\">\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.value\\').hasError(\\'required\\')\\\">\\r\\n                                {{ \\'device-profile.condition-duration-value-required\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.value\\').hasError(\\'min\\')\\\">\\r\\n                                {{ \\'device-profile.condition-duration-value-range\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.value\\').hasError(\\'max\\')\\\">\\r\\n                                {{ \\'device-profile.condition-duration-value-range\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.value\\').hasError(\\'pattern\\')\\\">\\r\\n                                {{ \\'device-profile.condition-duration-value-pattern\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                        <\\/mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-block\\\"\\r\\n                            hideRequiredMarker fxFlex\\r\\n                            floatLabel=\\\"always\\\">\\r\\n                            <mat-label><\\/mat-label>\\r\\n                            <mat-select\\r\\n                                formControlName=\\\"unit\\\"\\r\\n                                required\\r\\n                                placeholder=\\\"{{ \\'device-profile.condition-duration-time-unit\\' | translate }}\\\">\\r\\n                                <mat-option\\r\\n                                    *ngFor=\\\"let timeUnit of timeUnits\\\"\\r\\n                                    [value]=\\\"timeUnit\\\">\\r\\n                                    {{timeUnit}}\\r\\n                                    <!--{{ timeUnitTranslations.get(timeUnit) | translate }}-->\\r\\n                                <\\/mat-option>\\r\\n                            <\\/mat-select>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.unit\\').hasError(\\'required\\')\\\">\\r\\n                                {{ \\'device-profile.condition-duration-time-unit-required\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                        <\\/mat-form-field>\\r\\n                    <\\/div>\\r\\n                    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\"\\r\\n                        *ngIf=\\\"conditionFormGroup.get(\\'spec.type\\').value == AlarmConditionType.REPEATING\\\">\\r\\n                        <mat-form-field class=\\\"mat-block\\\"\\r\\n                            hideRequiredMarker fxFlex\\r\\n                            floatLabel=\\\"always\\\">\\r\\n                            <mat-label><\\/mat-label>\\r\\n                            <input type=\\\"number\\\" required\\r\\n                                step=\\\"1\\\" min=\\\"1\\\"\\r\\n                                max=\\\"2147483647\\\" matInput\\r\\n                                placeholder=\\\"{{ \\'device-profile.condition-repeating-value\\' | translate }}\\\"\\r\\n                                formControlName=\\\"count\\\">\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.count\\').hasError(\\'required\\')\\\">\\r\\n                                {{ \\'device-profile.condition-repeating-value-required\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.count\\').hasError(\\'min\\')\\\">\\r\\n                                {{ \\'device-profile.condition-repeating-value-range\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.count\\').hasError(\\'max\\')\\\">\\r\\n                                {{ \\'device-profile.condition-repeating-value-range\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.count\\').hasError(\\'pattern\\')\\\">\\r\\n                                {{ \\'device-profile.condition-repeating-value-pattern\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                        <\\/mat-form-field>\\r\\n                    <\\/div>\\r\\n                <\\/section>\\r\\n            <\\/div>\\r\\n        <\\/fieldset>\\r\\n    <\\/div>\\r\\n    <div mat-dialog-actions fxLayoutAlign=\\\"end center\\\">\\r\\n        <button mat-button color=\\\"primary\\\" type=\\\"button\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async)\\\"\\r\\n            (click)=\\\"cancel()\\\" cdkFocusInitial>\\r\\n            {{ (readonly ? \\'action.close\\' : \\'action.cancel\\') | translate }}\\r\\n        <\\/button>\\r\\n        <button mat-raised-button color=\\\"primary\\\"\\r\\n            *ngIf=\\\"!readonly\\\" type=\\\"submit\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async) || conditionFormGroup.invalid\\\">\\r\\n            {{ \\'action.save\\' | translate }}\\r\\n        <\\/button>\\r\\n    <\\/div>\\r\\n<\\/form>\";\n\n        function filterCtrl(instance) {\n            let vm = instance;\n            vm.createAlarmText = function() {\n                const keyFilters = vm.conditionFormGroup.value.condition;\n                const filtersText = keyFilters.map(keyFilter=>keyFilterToText(keyFilter,\n                (keyFilters.length > 1 ? \"AND\" : undefined)));\n                let result;\n                if (filtersText.length > 1) {\n                    const andText = widgetContext.translate.instant('filter.operation.and');\n                    result = filtersText.join(' <span class=\"tb-filter-complex-operation\">' + andText + '</span> ');\n                } else {\n                    result = filtersText[0];\n                }\n                return result;\n            }\n            vm.readonly = false;\n            vm.condition = {};\n\n            const TimeUnit = {\n                SECONDS: 'SECONDS',\n                MINUTES: 'MINUTES',\n                HOURS: 'HOURS',\n                DAYS: 'DAYS'\n            };\n\n            vm.cancel = function() {\n                ;\n                vm.dialogRef.close(null);\n            };\n\n            const dynamicValueSourceTypes = [\n                \"CURRENT_DEVICE\"\n            ];\n            vm.TimeUnit = TimeUnit;\n            vm.timeUnits = Object.keys(TimeUnit);\n\n            const AlarmConditionType = {\n                SIMPLE: 'SIMPLE',\n                DURATION: 'DURATION',\n                REPEATING: 'REPEATING'\n            };\n            vm.AlarmConditionType = AlarmConditionType;\n            vm.alarmConditionTypes = Object.keys(\n                AlarmConditionType);\n            entityKeyTypeTranslations = new Map(\n                [\n                    [\"ATTRIBUTE\",\n                        'filter.key-type.attribute'\n                    ],\n                    [\"TIME_SERIES\",\n                        'filter.key-type.timeseries'\n                    ],\n                    [\"ENTITY_FIELD\",\n                        'filter.key-type.entity-field'\n                    ]\n                ]\n            );\n            vm.removeKeyFilter = function(index) {\n                vm.keyFiltersFormArray().removeAt(\n                    index);\n            }\n\n            vm.editKeyFilter = function(index) {\n                const keyFilter = vm\n                    .keyFiltersFormArray().at(index)\n                    .value;\n                vm.addKeyFilter({\n                    index: index,\n                    data: keyFilter\n                });\n            }\n\n            function createPredicates(predicatesArray,\n                predicates) {\n                predicates.forEach(predicate => {\n                    let predicateGroup;\n                    if (predicate.type ===\n                        \"COMPLEX\") {\n                        predicateGroup = vm.fb\n                            .group({\n                                operation: [\n                                    predicate\n                                    .operation,\n                                    [vm.validators\n                                        .required\n                                    ]\n                                ],\n                                type: [predicate\n                                    .type,\n                                    [vm.validators\n                                        .required\n                                    ]\n                                ],\n                                predicates: vm\n                                    .fb\n                                    .array(\n                                    [])\n                            });\n                        createPredicates(\n                            predicateGroup\n                            .get(\n                                \"predicates\"\n                                ), predicate\n                            .predicates);\n                    } else {\n                        let valueForm = vm.fb\n                            .group({\n                                dynamicMode: [\n                                    predicate\n                                    .value\n                                    .dynamicMode,\n                                    []\n                                ]\n                            });\n                        if (predicate.value\n                            .defaultValue) {\n                            valueForm\n                                .addControl(\n                                    'defaultValue',\n                                    vm.fb\n                                    .control(\n                                        predicate\n                                        .value\n                                        .defaultValue,\n                                        [vm.validators\n                                            .required\n                                        ]));\n                        } else if (predicate\n                            .value.dynamicValue\n                            ) {\n                            valueForm\n                                .addControl(\n                                    'dynamicValue',\n                                    vm.fb\n                                .group({\n                                        sourceType: [\n                                            predicate\n                                            .value\n                                            .dynamicValue\n                                            .sourceType,\n                                            [vm.validators\n                                                .required\n                                            ]\n                                        ],\n                                        sourceAttribute: [\n                                            predicate\n                                            .value\n                                            .dynamicValue\n                                            .sourceAttribute,\n                                            [vm.validators\n                                                .required\n                                            ]\n                                        ]\n                                    }));\n                        }\n                        predicateGroup = vm.fb\n                            .group({\n                                ignoreCase: [\n                                    false\n                                ],\n                                operation: [\n                                    predicate\n                                    .operation,\n                                    [vm.validators\n                                        .required\n                                    ]\n                                ],\n                                type: [predicate\n                                    .type,\n                                    [vm.validators\n                                        .required\n                                    ]\n                                ],\n                                value: valueForm\n                            });\n                    }\n                    predicatesArray.push(\n                        predicateGroup);\n                });\n            }\n\n            vm.entityKeyTypeTranslations =\n                entityKeyTypeTranslations;\n            vm.keyFiltersFormArray = function() {\n                return vm.conditionFormGroup.get(\n                    \"condition\");\n            };\n            vm.addKeyFilter = function(keyFilterInfo) {\n                let html =\n                    \"<form *ngIf=\\\"keyFilterFormGroup\\\" [formGroup]=\\\"keyFilterFormGroup\\\" (ngSubmit)=\\\"save()\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\" style=\\\"min-width: 800px;\\\">\\r\\n    <h2>{{(data.isAdd ? \\'filter.add-key-filter\\' : (data.readonly ? \\'filter.key-filter\\' : \\'filter.edit-key-filter\\')) | translate}}<\\/h2>\\r\\n    <span fxFlex><\\/span>\\r\\n    <button mat-icon-button\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            type=\\\"button\\\">\\r\\n      <mat-icon class=\\\"material-icons\\\">close<\\/mat-icon>\\r\\n    <\\/button>\\r\\n  <\\/mat-toolbar>\\r\\n  <div mat-dialog-content>\\r\\n    <fieldset [disabled]=\\\"isLoading$ | async\\\" fxLayout=\\\"column\\\">\\r\\n      <section fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\" class=\\\"entity-key\\\">\\r\\n        <section fxFlex=\\\"70\\\" fxLayout=\\\"row\\\" formGroupName=\\\"key\\\" fxLayoutGap=\\\"8px\\\">\\r\\n          <mat-form-field fxFlex=\\\"40\\\" class=\\\"mat-block\\\">\\r\\n            <mat-label translate>filter.key-type.key-type<\\/mat-label>\\r\\n            <mat-select required formControlName=\\\"type\\\">\\r\\n              <mat-option *ngFor=\\\"let type of entityKeyTypes\\\" [value]=\\\"type\\\">\\r\\n                {{type}}\\r\\n              <\\/mat-option>\\r\\n            <\\/mat-select>\\r\\n          <\\/mat-form-field>\\r\\n          <mat-form-field fxFlex=\\\"60\\\" class=\\\"mat-block\\\">\\r\\n            <mat-label translate>filter.key-name<\\/mat-label>\\r\\n            <input matInput required formControlName=\\\"key\\\"\\r\\n                   [matAutocomplete]=\\\"auto\\\"\\r\\n                   [matAutocompleteDisabled]=\\\"keyFilterFormGroup.get(\\'key.type\\').value !== entityField\\\">\\r\\n            <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\">\\r\\n              <mat-option *ngFor=\\\"let option of filteredEntityFields | async\\\" [value]=\\\"option\\\">\\r\\n                {{option}}\\r\\n              <\\/mat-option>\\r\\n            <\\/mat-autocomplete>\\r\\n            <mat-error *ngIf=\\\"keyFilterFormGroup.get(\\'key.key\\').hasError(\\'required\\')\\\">\\r\\n              {{ \\'filter.key-name-required\\' | translate }}\\r\\n            <\\/mat-error>\\r\\n          <\\/mat-form-field>\\r\\n        <\\/section>\\r\\n        <mat-form-field fxFlex=\\\"30\\\" class=\\\"mat-block\\\">\\r\\n          <mat-label translate>filter.value-type.value-type<\\/mat-label>\\r\\n          <mat-select formControlName=\\\"valueType\\\">\\r\\n            <mat-select-trigger>\\r\\n              <mat-icon class=\\\"tb-mat-18\\\" svgIcon=\\\"{{ entityKeyValueTypes[keyFilterFormGroup.get(\\'valueType\\').value]?.icon }}\\\"><\\/mat-icon>\\r\\n              <span>{{ entityKeyValueTypes[keyFilterFormGroup.get(\\'valueType\\').value]?.name | translate }}<\\/span>\\r\\n            <\\/mat-select-trigger>\\r\\n            <mat-option *ngFor=\\\"let valueType of entityKeyValueTypesKeys\\\" [value]=\\\"valueType\\\">\\r\\n              <mat-icon class=\\\"tb-mat-18\\\" svgIcon=\\\"{{ entityKeyValueTypes[EntityKeyValueType[valueType]].icon }}\\\"><\\/mat-icon>\\r\\n              <span>{{ entityKeyValueTypes[EntityKeyValueType[valueType]].name | translate }}<\\/span>\\r\\n            <\\/mat-option>\\r\\n          <\\/mat-select>\\r\\n          <mat-error *ngIf=\\\"keyFilterFormGroup.get(\\'valueType\\').hasError(\\'required\\')\\\">\\r\\n            {{ \\'filter.value-type-required\\' | translate }}\\r\\n          <\\/mat-error>\\r\\n        <\\/mat-form-field>\\r\\n      <\\/section>\\r\\n      <section fxLayout=\\\"column\\\" *ngIf=\\\"keyFilterFormGroup.get(\\'valueType\\').value\\\">\\r\\n          <mat-expansion-panel [expanded]=\\\"true\\\">\\r\\n          <mat-expansion-panel-header>\\r\\n            <mat-panel-title>\\r\\n                <div>Filters<\\/div>\\r\\n            <\\/mat-panel-title>\\r\\n        <\\/mat-expansion-panel-header>\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <span fxFlex=\\\"8\\\"><\\/span>\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"8px\\\" fxFlex=\\\"92\\\">\\r\\n                <div fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                    <div fxFlex=\\\"40\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                        <label fxFlex class=\\\"tb-title no-padding\\\">Operation<\\/label>\\r\\n                        <label *ngIf=\\\"keyFilterFormGroup.get(\\'valueType\\').value === EntityKeyValueType.STRING\\\"\\r\\n                    class=\\\"tb-title no-padding\\\" style=\\\"min-width: 70px;\\\">Ignore case<\\/label>\\r\\n                    <\\/div>\\r\\n                    <label fxFlex=\\\"60\\\" class=\\\"tb-title no-padding\\\">Value<\\/label>\\r\\n                <\\/div>\\r\\n                <label *ngIf=\\\"displayUserParameters\\\"\\r\\n                class=\\\"tb-title no-padding\\\" style=\\\"width: 60px;\\\">User parameters<\\/label>\\r\\n                <span [fxShow]=\\\"!disabled\\\" style=\\\"min-width: 40px;\\\">&nbsp;<\\/span>\\r\\n            <\\/div>\\r\\n        <\\/div>\\r\\n        <mat-divider><\\/mat-divider>\\r\\n        <div class=\\\"predicate-list\\\" *ngIf=\\\"predicatesFormArray().length\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" style=\\\"height: 45px;\\\"\\r\\n           formArrayName=\\\"predicate\\\"\\r\\n           *ngFor=\\\"let predicateControl of predicatesFormArray().controls; let $index = index\\\">\\r\\n                <div fxFlex=\\\"8\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"filters-operation\\\" >\\r\\n                    <span *ngIf=\\\"$index > 0\\\">{{operation}}<\\/span>\\r\\n                <\\/div>\\r\\n                <div fxLayout=\\\"column\\\" fxFlex=\\\"92\\\" *ngIf=\\\"predicatesFormArray().value[$index]\\\"  >\\r\\n                    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" [formGroupName]=\\\"$index\\\" fxLayoutGap=\\\"8px\\\" fxFlex>\\r\\n                        <div fxFlex fxLayout=\\\"row\\\"  [ngSwitch]=\\\"predicatesFormArray().value[$index].type\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                            <div  fxFlex=\\\"40\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\"  *ngIf=\\\" predicatesFormArray().value[$index].type !== \\'COMPLEX\\' \\\"  fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker fxFlex class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select  formControlName=\\\"operation\\\" placeholder=\\\"{{\\'filter.operation.operation\\' | translate}}\\\">\\r\\n                                        <mat-option *ngFor=\\\"let operation of operations\\\" [value]=\\\"operation\\\">\\r\\n                                        {{operationEnum[operation] | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field>\\r\\n                                <mat-checkbox *ngSwitchCase=\\\"\\'STRING\\'\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" formControlName=\\\"ignoreCase\\\" style=\\\"min-width: 70px;\\\">\\r\\n                                    <\\/mat-checkbox>\\r\\n                                <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'STRING\\'\\\" fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field fxFlex *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\')\\\" floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <input matInput formControlName=\\\"defaultValue\\\" placeholder=\\\"{{\\'filter.value\\' | translate}}\\\">\\r\\n                                <\\/mat-form-field>\\r\\n                                \\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'NUMERIC\\'\\\"  fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field fxFlex *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\') && data.valueType !== \\'DATE_TIME\\'\\\" floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <input matInput formControlName=\\\"defaultValue\\\" type=\\\"number\\\" placeholder=\\\"{{\\'filter.value\\' | translate}}\\\">\\r\\n                                <\\/mat-form-field>\\r\\n                                \\r\\n                                <tb-datetime formControlName=\\\"defaultValue\\\" dateText=\\\"filter.date\\\" timeText=\\\"filter.time\\\" required [showLabel]=\\\"false\\\"  *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\') && data.valueType === \\'DATE_TIME\\'\\\" ><\\/tb-datetime>\\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'BOOLEAN\\'\\\"  fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-checkbox *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\')\\\" fxFlex formControlName=\\\"defaultValue\\\">\\r\\n                                    {{ (predicateControl.get(\\'value.defaultValue\\').value ? \\'value.true\\' : \\'value.false\\') | translate }}\\r\\n                                <\\/mat-checkbox>\\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'COMPLEX\\'\\\">\\r\\n                                COMPLEX\\r\\n                                <button mat-icon-button color=\\\"primary\\\"\\r\\n                                class=\\\"tb-mat-32\\\"\\r\\n                                type=\\\"button\\\"\\r\\n                                (click)=\\\"addPredicate(true, predicateControl)\\\"\\r\\n                                matTooltip=\\\"{{ (disabled ? \\'filter.complex-filter\\' : \\'filter.edit-complex-filter\\') | translate }}\\\"\\r\\n                                matTooltipPosition=\\\"above\\\">\\r\\n                                    <mat-icon>{{ disabled ? \\'more_vert\\' : \\'edit\\' }}<\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                        <\\/div>\\r\\n                        <button mat-icon-button color=\\\"primary\\\"\\r\\n                    [fxShow]=\\\"!disabled\\\"\\r\\n                    type=\\\"button\\\"\\r\\n                    (click)=\\\"removePredicate($index)\\\"\\r\\n                    matTooltip=\\\"{{ \\'filter.remove-filter\\' | translate }}\\\"\\r\\n                    matTooltipPosition=\\\"above\\\">\\r\\n                        <mat-icon>close<\\/mat-icon>\\r\\n                    <\\/button>\\r\\n                    <\\/div>\\r\\n                <\\/div>\\r\\n            <\\/div>\\r\\n        <\\/div>\\r\\n        <div style=\\\"margin-top: 16px;\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n            <button mat-button mat-raised-button color=\\\"primary\\\"\\r\\n              [fxShow]=\\\"!disabled\\\"\\r\\n              (click)=\\\"addPredicate(false)\\\"\\r\\n              type=\\\"button\\\"\\r\\n              matTooltip=\\\"{{ \\'filter.add-filter\\' | translate }}\\\"\\r\\n              matTooltipPosition=\\\"above\\\">\\r\\n                        {{ \\'action.add\\' | translate }}\\r\\n            <\\/button>\\r\\n            <button mat-button mat-raised-button color=\\\"primary\\\"\\r\\n              [fxShow]=\\\"!disabled\\\"\\r\\n              (click)=\\\"addPredicate(true)\\\"\\r\\n              type=\\\"button\\\"\\r\\n              matTooltip=\\\"{{ \\'filter.add-complex-filter\\' | translate }}\\\"\\r\\n              matTooltipPosition=\\\"above\\\">\\r\\n                {{ \\'filter.add-complex\\' | translate }}\\r\\n            <\\/button>\\r\\n        <\\/div>\\r\\n        <\\/mat-expansion-panel>\\r\\n       <\\/section> \\r\\n    <\\/fieldset>\\r\\n  <\\/div>\\r\\n  <div mat-dialog-actions fxLayoutAlign=\\\"end center\\\">\\r\\n    <button mat-button color=\\\"primary\\\"\\r\\n            type=\\\"button\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async)\\\"\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            cdkFocusInitial>\\r\\n      {{ (data.readonly ? \\'action.close\\' : \\'action.cancel\\') | translate }}\\r\\n    <\\/button>\\r\\n    <button mat-raised-button color=\\\"primary\\\"\\r\\n            type=\\\"submit\\\"\\r\\n            *ngIf=\\\"!data.readonly\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async) || keyFilterFormGroup.invalid || !keyFilterFormGroup.dirty\\\">\\r\\n      {{ (data.isAdd ? \\'action.add\\' : \\'action.update\\') | translate }}\\r\\n    <\\/button>\\r\\n  <\\/div>\\r\\n<\\/form>\";\n\n                function keyFIlterCtrl(instance) {\n                    let vm = instance;\n                    vm.entityKeyTypes = [\n                        'ATTRIBUTE',\n                        'TIME_SERIES'\n                    ];\n\n                    vm.dynamicValueSourceTypes =\n                        dynamicValueSourceTypes;\n                    let EntityKeyValueType = {\n                        STRING: 'STRING',\n                        NUMERIC: 'NUMERIC',\n                        BOOLEAN: 'BOOLEAN',\n                        DATE_TIME: 'DATE_TIME'\n                    };\n                    vm.operation = \"AND\";\n                    if (!vm.data) {\n                        vm.data = {\n                            isAdd: true\n                        };\n                    } else {\n                        vm.data.isAdd = false;\n                    }\n                    vm.changeDynamic = function(\n                        predicateControl,\n                        oldValue) {\n                        predicateControl.get(\n                            'value.dynamicMode'\n                            ).patchValue(!\n                            oldValue);\n                        if (!oldValue) {\n                            predicateControl\n                                .get('value')\n                                .removeControl(\n                                    \"defaultValue\"\n                                    );\n                            predicateControl\n                                .get('value')\n                                .addControl(\n                                    'dynamicValue',\n                                    vm.fb\n                                .group({\n                                        sourceType: [\n                                            \"CURRENT_DEVICE\",\n                                            [vm.validators\n                                                .required\n                                            ]\n                                        ],\n                                        sourceAttribute: [\n                                            \"\",\n                                            [vm.validators\n                                                .required\n                                            ]\n                                        ]\n                                    }))\n                        } else {\n                            predicateControl\n                                .get('value')\n                                .removeControl(\n                                    \"dynamicValue\"\n                                    );\n                            predicateControl\n                                .get('value')\n                                .addControl(\n                                    'defaultValue',\n                                    vm.fb\n                                    .control(\"\",\n                                        [vm.validators\n                                            .required\n                                        ]));\n                        }\n                    };\n\n                    function entityKeyValueTypeToFilterPredicateType(\n                        valueType) {\n                        switch (valueType) {\n                            case EntityKeyValueType\n                            .STRING:\n                                return FilterPredicateType\n                                    .STRING;\n                            case EntityKeyValueType\n                            .NUMERIC:\n                            case EntityKeyValueType\n                            .DATE_TIME:\n                                return FilterPredicateType\n                                    .NUMERIC;\n                            case EntityKeyValueType\n                            .BOOLEAN:\n                                return FilterPredicateType\n                                    .BOOLEAN;\n                        }\n                    }\n                    const FilterPredicateType = {\n                        STRING: 'STRING',\n                        NUMERIC: 'NUMERIC',\n                        BOOLEAN: 'BOOLEAN',\n                        COMPLEX: 'COMPLEX'\n                    };\n                    const StringOperation = {\n                        EQUAL: 'EQUAL',\n                        NOT_EQUAL: 'NOT_EQUAL',\n                        STARTS_WITH: 'STARTS_WITH',\n                        ENDS_WITH: 'ENDS_WITH',\n                        CONTAINS: 'CONTAINS',\n                        NOT_CONTAINS: 'NOT_CONTAINS'\n                    };\n                    const NumericOperation = {\n                        EQUAL: 'EQUAL',\n                        NOT_EQUAL: 'NOT_EQUAL',\n                        GREATER: 'GREATER',\n                        LESS: 'LESS',\n                        GREATER_OR_EQUAL: 'GREATER_OR_EQUAL',\n                        LESS_OR_EQUAL: 'LESS_OR_EQUAL'\n                    };\n                    const BooleanOperation = {\n                        EQUAL: 'EQUAL',\n                        NOT_EQUAL: 'NOT_EQUAL'\n                    };\n\n                    const operationEnum = {\n                        EQUAL: 'filter.operation.equal',\n                        NOT_EQUAL: 'filter.operation.not-equal',\n                        STARTS_WITH: 'filter.operation.starts-with',\n                        ENDS_WITH: 'filter.operation.ends-with',\n                        CONTAINS: 'filter.operation.contains',\n                        NOT_CONTAINS: 'filter.operation.not-contains',\n                        GREATER: 'filter.operation.greater',\n                        LESS: 'filter.operation.less',\n                        GREATER_OR_EQUAL: 'filter.operation.greater-or-equal',\n                        LESS_OR_EQUAL: 'filter.operation.less-or-equal'\n                    };\n                    vm.operationEnum =\n                    operationEnum;\n                    vm.EntityKeyValueType =\n                        EntityKeyValueType;\n                    vm.entityKeyValueTypesKeys =\n                        Object\n                        .keys(EntityKeyValueType);\n                    vm.entityKeyValueTypes = {\n                        STRING: {\n                            name: 'filter.value-type.string',\n                            icon: 'mdi:format-text'\n                        },\n                        NUMERIC: {\n                            name: 'filter.value-type.numeric',\n                            icon: 'mdi:numeric'\n                        },\n                        BOOLEAN: {\n                            name: 'filter.value-type.boolean',\n                            icon: 'mdi:checkbox-marked-outline'\n                        },\n                        DATE_TIME: {\n                            name: 'filter.value-type.date-time',\n                            icon: 'mdi:calendar-clock'\n                        }\n                    };\n                    const htmlTemplate =\n                        \"<form *ngIf=\\\"complexFilterFormGroup\\\" [formGroup]=\\\"complexFilterFormGroup\\\" (ngSubmit)=\\\"save()\\\" style=\\\"min-width: 800px;\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <h2 translate>filter.complex-filter<\\/h2>\\r\\n    <span fxFlex><\\/span>\\r\\n    <button mat-icon-button\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            type=\\\"button\\\">\\r\\n      <mat-icon class=\\\"material-icons\\\">close<\\/mat-icon>\\r\\n    <\\/button>\\r\\n  <\\/mat-toolbar>\\r\\n  <div mat-dialog-content>\\r\\n    <fieldset [disabled]=\\\"isLoading$ | async\\\" fxLayout=\\\"column\\\">\\r\\n      <mat-form-field class=\\\"mat-block\\\">\\r\\n        <mat-label translate>filter.operation.operation<\\/mat-label>\\r\\n        <mat-select required formControlName=\\\"operation\\\">\\r\\n          <mat-option *ngFor=\\\"let operation of complexOperations\\\" [value]=\\\"operation\\\">\\r\\n            {{operation.toLowerCase()}}\\r\\n          <\\/mat-option>\\r\\n        <\\/mat-select>\\r\\n      <\\/mat-form-field>\\r\\n      <section fxLayout=\\\"column\\\">\\r\\n          <mat-expansion-panel [expanded]=\\\"true\\\">\\r\\n          <mat-expansion-panel-header>\\r\\n            <mat-panel-title>\\r\\n                <div>Filters<\\/div>\\r\\n            <\\/mat-panel-title>\\r\\n        <\\/mat-expansion-panel-header>\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <span fxFlex=\\\"8\\\"><\\/span>\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"8px\\\" fxFlex=\\\"92\\\">\\r\\n                <div fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                    <div fxFlex=\\\"40\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                        <label fxFlex class=\\\"tb-title no-padding\\\">Operation<\\/label>\\r\\n                        <label  *ngIf=\\\"data.valueType === EntityKeyValueType.STRING\\\"\\r\\n                    class=\\\"tb-title no-padding\\\" style=\\\"min-width: 70px;\\\">Ignore case<\\/label>\\r\\n                    <\\/div>\\r\\n                    <label fxFlex=\\\"60\\\" class=\\\"tb-title no-padding\\\">Value<\\/label>\\r\\n                <\\/div>\\r\\n                <label *ngIf=\\\"displayUserParameters\\\"\\r\\n                class=\\\"tb-title no-padding\\\" style=\\\"width: 60px;\\\">User parameters<\\/label>\\r\\n                <span [fxShow]=\\\"!disabled\\\" style=\\\"min-width: 40px;\\\">&nbsp;<\\/span>\\r\\n            <\\/div>\\r\\n        <\\/div>\\r\\n        <mat-divider><\\/mat-divider>\\r\\n        <div class=\\\"predicate-list\\\" *ngIf=\\\"predicatesFormArray().length\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" style=\\\"height: 45px;\\\"\\r\\n           formArrayName=\\\"predicates\\\"\\r\\n           *ngFor=\\\"let predicateControl of predicatesFormArray().controls; let $index = index\\\">\\r\\n                <div fxFlex=\\\"8\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"filters-operation\\\">\\r\\n                    <span *ngIf=\\\"$index > 0\\\">{{complexFilterFormGroup.get(\\\"operation\\\").value}}<\\/span>\\r\\n                <\\/div>\\r\\n                <div fxLayout=\\\"column\\\" fxFlex=\\\"92\\\" *ngIf=\\\"predicatesFormArray().value[$index]\\\"  >\\r\\n                    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" [formGroupName]=\\\"$index\\\" fxLayoutGap=\\\"8px\\\" fxFlex>\\r\\n                        <div fxFlex fxLayout=\\\"row\\\"  [ngSwitch]=\\\"predicatesFormArray().value[$index].type\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                            <div  fxFlex=\\\"40\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\"  *ngIf=\\\" predicatesFormArray().value[$index].type !== \\'COMPLEX\\' \\\"  fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker fxFlex class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select  formControlName=\\\"operation\\\" placeholder=\\\"{{\\'filter.operation.operation\\' | translate}}\\\">\\r\\n                                        <mat-option *ngFor=\\\"let operation of operations\\\" [value]=\\\"operation\\\">\\r\\n                                        {{operationEnum[operation] | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field>\\r\\n                                <mat-checkbox *ngSwitchCase=\\\"\\'STRING\\'\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" formControlName=\\\"ignoreCase\\\" style=\\\"min-width: 70px;\\\">\\r\\n                                    <\\/mat-checkbox>\\r\\n                                <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'STRING\\'\\\" fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field fxFlex *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\')\\\" floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <input matInput formControlName=\\\"defaultValue\\\" placeholder=\\\"{{\\'filter.value\\' | translate}}\\\">\\r\\n                                <\\/mat-form-field>\\r\\n                                \\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'NUMERIC\\'\\\"  fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field fxFlex *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\') && data.valueType !== \\'DATE_TIME\\'\\\" floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <input matInput formControlName=\\\"defaultValue\\\" type=\\\"number\\\" placeholder=\\\"{{\\'filter.value\\' | translate}}\\\">\\r\\n                                <\\/mat-form-field>\\r\\n                                \\r\\n                                <tb-datetime formControlName=\\\"defaultValue\\\" dateText=\\\"filter.date\\\" timeText=\\\"filter.time\\\" required [showLabel]=\\\"false\\\"  *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\') && data.valueType === \\'DATE_TIME\\'\\\" ><\\/tb-datetime>\\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'BOOLEAN\\'\\\"  fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-checkbox *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\')\\\" fxFlex formControlName=\\\"defaultValue\\\">\\r\\n                                    {{ (predicateControl.get(\\'value.defaultValue\\').value ? \\'value.true\\' : \\'value.false\\') | translate }}\\r\\n                                <\\/mat-checkbox>\\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'COMPLEX\\'\\\">\\r\\n                                COMPLEX\\r\\n                                <button mat-icon-button color=\\\"primary\\\"\\r\\n                                class=\\\"tb-mat-32\\\"\\r\\n                                type=\\\"button\\\"\\r\\n                                (click)=\\\"addPredicate(true, predicateControl)\\\"\\r\\n                                matTooltip=\\\"{{ (disabled ? \\'filter.complex-filter\\' : \\'filter.edit-complex-filter\\') | translate }}\\\"\\r\\n                                matTooltipPosition=\\\"above\\\">\\r\\n                                    <mat-icon>{{ disabled ? \\'more_vert\\' : \\'edit\\' }}<\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                        <\\/div>\\r\\n                        <button mat-icon-button color=\\\"primary\\\"\\r\\n                    [fxShow]=\\\"!disabled\\\"\\r\\n                    type=\\\"button\\\"\\r\\n                    (click)=\\\"removePredicate($index)\\\"\\r\\n                    matTooltip=\\\"{{ \\'filter.remove-filter\\' | translate }}\\\"\\r\\n                    matTooltipPosition=\\\"above\\\">\\r\\n                        <mat-icon>close<\\/mat-icon>\\r\\n                    <\\/button>\\r\\n                    <\\/div>\\r\\n                <\\/div>\\r\\n            <\\/div>\\r\\n        <\\/div>\\r\\n        <div style=\\\"margin-top: 16px;\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n            <button mat-button mat-raised-button color=\\\"primary\\\"\\r\\n              [fxShow]=\\\"!disabled\\\"\\r\\n              (click)=\\\"addPredicate(false)\\\"\\r\\n              type=\\\"button\\\"\\r\\n              matTooltip=\\\"{{ \\'filter.add-filter\\' | translate }}\\\"\\r\\n              matTooltipPosition=\\\"above\\\">\\r\\n                        {{ \\'action.add\\' | translate }}\\r\\n            <\\/button>\\r\\n            <button mat-button mat-raised-button color=\\\"primary\\\"\\r\\n              [fxShow]=\\\"!disabled\\\"\\r\\n              (click)=\\\"addPredicate(true)\\\"\\r\\n              type=\\\"button\\\"\\r\\n              matTooltip=\\\"{{ \\'filter.add-complex-filter\\' | translate }}\\\"\\r\\n              matTooltipPosition=\\\"above\\\">\\r\\n                {{ \\'filter.add-complex\\' | translate }}\\r\\n            <\\/button>\\r\\n        <\\/div>\\r\\n        <\\/mat-expansion-panel>\\r\\n       <\\/section> \\r\\n    <\\/fieldset>\\r\\n  <\\/div>\\r\\n  <div mat-dialog-actions fxLayoutAlign=\\\"end center\\\">\\r\\n    <button mat-button color=\\\"primary\\\"\\r\\n            type=\\\"button\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async)\\\"\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            cdkFocusInitial>\\r\\n      {{ (data.readonly ? \\'action.close\\' : \\'action.cancel\\') | translate }}\\r\\n    <\\/button>\\r\\n    <button mat-raised-button color=\\\"primary\\\"\\r\\n            *ngIf=\\\"!data.readonly\\\"\\r\\n            type=\\\"submit\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async) || complexFilterFormGroup.invalid || !complexFilterFormGroup.dirty\\\">\\r\\n      {{ (isAdd || data.isAdd ? \\'action.add\\' : \\'action.update\\') | translate }}\\r\\n    <\\/button>\\r\\n  <\\/div>\\r\\n<\\/form>\";\n\n                    createPredicate = function(\n                        valueType, complex) {\n                        let predicate = {\n                            type: complex ?\n                                \"COMPLEX\" :\n                                entityKeyValueTypeToFilterPredicateType(\n                                    valueType\n                                    )\n                        };\n                        switch (predicate\n                        .type) {\n                            case FilterPredicateType\n                            .STRING:\n                                predicate\n                                    .operation =\n                                    StringOperation\n                                    .STARTS_WITH;\n                                predicate\n                                    .value = {\n                                        defaultValue: ''\n                                    };\n                                predicate\n                                    .ignoreCase =\n                                    false;\n                                break;\n                            case FilterPredicateType\n                            .NUMERIC:\n                                predicate\n                                    .operation =\n                                    NumericOperation\n                                    .EQUAL;\n                                predicate\n                                    .value = {\n                                        defaultValue: valueType ===\n                                            EntityKeyValueType\n                                            .DATE_TIME ?\n                                            Date\n                                            .now() :\n                                            0\n                                    };\n                                break;\n                            case FilterPredicateType\n                            .BOOLEAN:\n                                predicate\n                                    .operation =\n                                    BooleanOperation\n                                    .EQUAL;\n                                predicate\n                                    .value = {\n                                        defaultValue: false\n                                    };\n                                break;\n                            case FilterPredicateType\n                            .COMPLEX:\n                                predicate\n                                    .operation =\n                                    \"AND\";\n                                predicate\n                                    .predicates = [];\n                                break;\n                        }\n                        return {\n                            keyFilterPredicate: predicate,\n                            userInfo: {\n                                editable: true,\n                                label: '',\n                                autogeneratedLabel: true,\n                                order: 0\n                            }\n                        };\n                    };\n                    customDialogCtrl = function(\n                        instace, data) {\n                        let vm = instace;\n                        initCtrl(vm);\n                    };\n                    vm.addPredicate = function(\n                        complex, control) {\n                        let formArray = vm\n                            .keyFilterFormGroup\n                            .get(\"predicate\");\n                        let predicate =\n                            createPredicate(vm\n                                .keyFilterFormGroup\n                                .value\n                                .valueType,\n                                complex);\n                        if (complex === true) {\n                            let data = {\n                                valueType: vm\n                                    .keyFilterFormGroup\n                                    .get(\n                                        \"valueType\"\n                                        )\n                                    .value\n                            };\n                            if (control) {\n                                data = {\n                                    ...data,\n                                    ...\n                                    control\n                                    .value\n                                };\n                                data.isAdd =\n                                    false;\n                            } else {\n                                data.isAdd =\n                                    true;\n                            }\n                            widgetContext\n                                .customDialog\n                                .customDialog(\n                                    htmlTemplate,\n                                    customDialogCtrl,\n                                    data)\n                                .subscribe(\n                                    result => {\n                                        if (result !==\n                                            null\n                                            ) {\n                                            let keyFilterPredicate =\n                                                vm\n                                                .fb\n                                                .group({\n                                                    operation: [\n                                                        result.operation,\n                                                        [vm.validators\n                                                            .required\n                                                        ]\n                                                    ],\n                                                    type: [predicate\n                                                        .keyFilterPredicate\n                                                        .type,\n                                                        [vm.validators\n                                                            .required\n                                                        ]\n                                                    ],\n                                                    predicates: vm\n                                                        .fb\n                                                        .array(\n                                                            result\n                                                            .predicates\n                                                            )\n                                                });\n                                            formArray\n                                                .push(\n                                                    keyFilterPredicate\n                                                    );\n                                            widgetContext\n                                                .detectChanges(\n                                                    true\n                                                    );\n                                        }\n                                    });\n                        } else {\n\n                            let keyFilterPredicate =\n                                vm.fb.group({\n                                    ignoreCase: [\n                                        false\n                                    ],\n                                    operation: [\n                                        predicate\n                                        .keyFilterPredicate\n                                        .operation,\n                                        [vm.validators\n                                            .required\n                                        ]\n                                    ],\n                                    type: [predicate\n                                        .keyFilterPredicate\n                                        .type,\n                                        [vm.validators\n                                            .required\n                                        ]\n                                    ],\n                                    value: vm\n                                        .fb\n                                        .group({\n                                            defaultValue: [\n                                                \"\",\n                                                [vm.validators\n                                                    .required\n                                                ]\n                                            ],\n                                            dynamicMode: [\n                                                false,\n                                                []\n                                            ]\n                                        })\n                                })\n                            formArray.push(\n                                keyFilterPredicate\n                                );\n\n                        }\n                        widgetContext.detectChanges(\n                            true);\n                    };\n\n                    function initCtrl(vm) {\n                        vm.complexFilterFormGroup =\n                            vm.fb.group({\n                                operation: [\n                                    \"AND\",\n                                    vm\n                                    .validators\n                                    .required\n                                ],\n                                predicates: vm\n                                    .fb.array(\n                                    [], vm\n                                        .validators\n                                        .required\n                                        )\n                            });\n\n                        vm.predicatesFormArray =\n                            function() {\n                                return vm\n                                    .complexFilterFormGroup\n                                    .get(\n                                        'predicates'\n                                        );\n                            };\n                        if (!vm.data) vm.data = {\n                            valueType: \"STRING\"\n                        };\n                        if (vm.data && vm.data\n                            .operation) {\n                            vm.complexFilterFormGroup\n                                .get('operation')\n                                .setValue(vm.data\n                                    .operation);\n                            if (vm.data\n                                .predicates && vm\n                                .data.predicates\n                                .length) {\n                                //   vm.predicatesFormArray().setValue(vm.data.predicates); \n                                createPredicates(vm\n                                    .predicatesFormArray(),\n                                    vm.data\n                                    .predicates);\n                            }\n                        }\n                        vm.EntityKeyValueType =\n                            EntityKeyValueType;\n\n                        vm.dynamicValueSourceTypes =\n                            dynamicValueSourceTypes;\n                        vm.operationEnum =\n                            operationEnum;\n                        switch (vm.data.valueType) {\n                            case 'STRING':\n                                vm.operations =\n                                    Object.keys(\n                                        StringOperation\n                                        );\n                                break;\n                            case 'NUMERIC':\n                            case 'DATE_TIME':\n                                vm.operations =\n                                    Object.keys(\n                                        NumericOperation\n                                        );\n                                break;\n                            case 'BOOLEAN':\n                                vm.operations =\n                                    Object.keys(\n                                        BooleanOperation\n                                        );\n                                break;\n                            default:\n                                vm.operations = [];\n                        }\n\n                        vm.complexOperations = [\n                            \"AND\", \"OR\"\n                        ];\n                        vm.removePredicate =\n                            function(index) {\n                                vm.predicatesFormArray()\n                                    .removeAt(\n                                    index);\n                            };\n                        vm.save = function() {\n                            vm.dialogRef.close(\n                                vm\n                                .complexFilterFormGroup\n                                .value);\n                        };\n                        vm.cancel = function() {\n\n                            vm.dialogRef.close(\n                                null);\n                        };\n                        vm.changeDynamic = function(\n                            predicateControl,\n                            oldValue) {\n                            predicateControl\n                                .get(\n                                    'value.dynamicMode'\n                                    )\n                                .patchValue(!\n                                    oldValue);\n                            if (!oldValue) {\n                                predicateControl\n                                    .get(\n                                        'value')\n                                    .removeControl(\n                                        \"defaultValue\"\n                                        );\n                                predicateControl\n                                    .get(\n                                        'value')\n                                    .addControl(\n                                        'dynamicValue',\n                                        vm.fb\n                                        .group({\n                                            sourceType: [\n                                                \"CURRENT_DEVICE\",\n                                                [vm.validators\n                                                    .required\n                                                ]\n                                            ],\n                                            sourceAttribute: [\n                                                \"\",\n                                                [vm.validators\n                                                    .required\n                                                ]\n                                            ]\n                                        }))\n                            } else {\n                                predicateControl\n                                    .get(\n                                        'value')\n                                    .removeControl(\n                                        \"dynamicValue\"\n                                        );\n                                predicateControl\n                                    .get(\n                                        'value')\n                                    .addControl(\n                                        'defaultValue',\n                                        vm.fb\n                                        .control(\n                                            \"\",\n                                            [vm.validators\n                                                .required\n                                            ]));\n                            }\n                        };\n                        vm.addPredicate = function(\n                            complex, control) {\n                            let formArray = vm\n                                .predicatesFormArray();\n                            let predicate =\n                                createPredicate(\n                                    vm.data\n                                    .valueType,\n                                    complex);\n                            if (complex ===\n                                true) {\n                                let data = {\n                                    valueType: vm\n                                        .data\n                                        .valueType\n                                };\n                                if (control) {\n                                    data = {\n                                        ...\n                                        data,\n                                        ...\n                                        control\n                                        .value\n                                    };\n                                    data.isAdd =\n                                        false;\n                                } else {\n                                    data.isAdd =\n                                        true;\n                                }\n                                widgetContext\n                                    .customDialog\n                                    .customDialog(\n                                        htmlTemplate,\n                                        customDialogCtrl,\n                                        data)\n                                    .subscribe(\n                                        result => {\n                                            if (result !==\n                                                null\n                                                ) {\n                                                let keyFilterPredicate =\n                                                    vm\n                                                    .fb\n                                                    .group({\n                                                        operation: [\n                                                            predicate\n                                                            .keyFilterPredicate\n                                                            .operation,\n                                                            [vm.validators\n                                                                .required\n                                                            ]\n                                                        ],\n                                                        type: [predicate\n                                                            .keyFilterPredicate\n                                                            .type,\n                                                            [vm.validators\n                                                                .required\n                                                            ]\n                                                        ],\n                                                        predicates: vm\n                                                            .fb\n                                                            .array(\n                                                                result\n                                                                .predicates\n                                                                )\n                                                    });\n                                                formArray\n                                                    .push(\n                                                        keyFilterPredicate\n                                                        );\n                                            }\n                                        });\n                            } else {\n\n                                let keyFilterPredicate =\n                                    vm.fb\n                                .group({\n                                        ignoreCase: [\n                                            false\n                                        ],\n                                        operation: [\n                                            predicate\n                                            .keyFilterPredicate\n                                            .operation,\n                                            [vm.validators\n                                                .required\n                                            ]\n                                        ],\n                                        type: [predicate\n                                            .keyFilterPredicate\n                                            .type,\n                                            [vm.validators\n                                                .required\n                                            ]\n                                        ],\n                                        value: vm\n                                            .fb\n                                            .group({\n                                                defaultValue: [\n                                                    \"\",\n                                                    [vm.validators\n                                                        .required\n                                                    ]\n                                                ],\n                                                dynamicMode: [\n                                                    false,\n                                                    []\n                                                ]\n                                            })\n                                    })\n                                formArray.push(\n                                    keyFilterPredicate\n                                    );\n\n                            }\n                            widgetContext\n                                .detectChanges(\n                                    true);\n                        };\n                    };\n                    vm.removePredicate = function(\n                        index) {\n                        vm.keyFilterFormGroup\n                            .get('predicate')\n                            .removeAt(index);\n                    }\n\n                    vm.keyFilterFormGroup = vm.fb\n                        .group({\n                            key: vm.fb.group({\n                                type: [null,\n                                    [vm.validators\n                                        .required\n                                    ]\n                                ],\n                                key: [null,\n                                    [vm.validators\n                                        .required\n                                    ]\n                                ]\n                            }),\n                            valueType: [null, [\n                                vm\n                                .validators\n                                .required\n                            ]],\n                            predicate: vm.fb\n                                .array([], [vm\n                                    .validators\n                                    .required\n                                ])\n                        });\n                    if (vm.data.valueType) {\n                        vm.keyFilterFormGroup.get(\n                                \"valueType\")\n                            .setValue(vm.data\n                                .valueType);\n                        switch (vm.data.valueType) {\n                            case 'STRING':\n                                vm.operations =\n                                    Object.keys(\n                                        StringOperation\n                                        );\n                                break;\n                            case 'NUMERIC':\n                            case 'DATE_TIME':\n                                vm.operations =\n                                    Object.keys(\n                                        NumericOperation\n                                        );\n                                break;\n                            case 'BOOLEAN':\n                                vm.operations =\n                                    Object.keys(\n                                        BooleanOperation\n                                        );\n                                break;\n                            default:\n                                vm.operations = [];\n                        }\n                        vm.keyFilterFormGroup.get(\n                            \"key\").setValue(vm\n                            .data.key);\n                        createPredicates(vm\n                            .keyFilterFormGroup\n                            .get(\"predicate\"),\n                            vm.data.predicate);\n                    }\n\n                    vm.keyFilterFormGroup.get(\n                            \"valueType\")\n                        .valueChanges.subscribe(\n                            valueType => {\n                                const prevValue = vm\n                                    .keyFilterFormGroup\n                                    .value\n                                    .valueType;\n                                const predicates =\n                                    vm\n                                    .keyFilterFormGroup\n                                    .get(\n                                        'predicate')\n                                    .value;\n                                if (prevValue &&\n                                    prevValue !==\n                                    valueType &&\n                                    predicates &&\n                                    predicates\n                                    .length) {\n                                    widgetContext.dialogs\n                                        .confirm(\n                                            widgetContext\n                                            .translate\n                                            .instant(\n                                                'filter.key-value-type-change-title'\n                                                ),\n                                            widgetContext\n                                            .translate\n                                            .instant(\n                                                'filter.key-value-type-change-message'\n                                                ))\n                                        .subscribe(\n                                            (\n                                            result) => {\n                                                if (\n                                                    result) {\n                                                    vm.keyFilterFormGroup\n                                                        .removeControl(\n                                                            \"predicate\"\n                                                            );\n                                                    vm.keyFilterFormGroup\n                                                        .addControl(\n                                                            \"predicate\",\n                                                            vm\n                                                            .fb\n                                                            .array(\n                                                                [],\n                                                                [vm.validators\n                                                                    .required\n                                                                ]\n                                                                )\n                                                            )\n                                                } else {\n                                                    vm.keyFilterFormGroup\n                                                        .get(\n                                                            'valueType'\n                                                            )\n                                                        .setValue(\n                                                            prevValue, {\n                                                                emitEvent: false\n                                                            }\n                                                            );\n                                                }\n                                            }\n                                        );\n                                }\n                                switch (valueType) {\n                                    case 'STRING':\n                                        vm.operations =\n                                            Object\n                                            .keys(\n                                                StringOperation\n                                                );\n                                        break;\n                                    case 'NUMERIC':\n                                    case 'DATE_TIME':\n                                        vm.operations =\n                                            Object\n                                            .keys(\n                                                NumericOperation\n                                                );\n                                        break;\n                                    case 'BOOLEAN':\n                                        vm.operations =\n                                            Object\n                                            .keys(\n                                                BooleanOperation\n                                                );\n                                        break;\n                                    default:\n                                        vm\n                                    .operations = [];\n                                }\n                                widgetContext\n                                    .detectChanges(\n                                        true);\n                            })\n\n                    vm.predicatesFormArray =\n                        function() {\n                            return vm\n                                .keyFilterFormGroup\n                                .get('predicate');\n                        }\n\n                    vm.save = function() {\n                        vm.dialogRef.close(vm\n                            .keyFilterFormGroup\n                            .value);\n                    }\n                    vm.cancel = function() {\n\n                        vm.dialogRef.close(\n                        null);\n                    }\n\n                }\n                let data = {};\n                if (keyFilterInfo && keyFilterInfo\n                    .data) {\n                    data = keyFilterInfo.data;\n                }\n                widgetContext.customDialog.customDialog(\n                        html, keyFIlterCtrl, data)\n                    .subscribe(keyFilter => {\n                        if (keyFilter !==\n                            null) {\n                            if (keyFilterInfo &&\n                                keyFilterInfo\n                                .index !==\n                                undefined) {\n                                vm.keyFiltersFormArray()\n                                    .at(keyFilterInfo\n                                .index)\n                                    .setValue(\n                                        keyFilter\n                                        );\n                            } else {\n                                vm.keyFiltersFormArray()\n                                    .push(vm.fb\n                                        .control(\n                                            keyFilter\n                                            ))\n                            };\n                            widgetContext\n                                .detectChanges(\n                                    true);\n                        }\n                    });\n\n\n            };\n\n\n            vm.conditionFormGroup = vm.fb.group({\n                condition: vm.fb.array([], vm\n                    .validators.required),\n                spec: vm.fb.group({\n                    type: [AlarmConditionType\n                        .SIMPLE\n                    ],\n                    unit: [{\n                        value: null,\n                        disable: true\n                    }],\n                    value: [{\n                        value: null,\n                        disable: true\n                    }],\n                    count: [{\n                        value: null,\n                        disable: true\n                    }]\n                })\n            })\n            if (vm.data && vm.data.spec) vm\n                .conditionFormGroup.get(\"spec\")\n                .patchValue(vm.data.spec)\n            if (vm.data && vm.data.condition) vm.data\n                .condition.forEach(condition => vm\n                    .keyFiltersFormArray().push(vm.fb\n                        .control(condition)))\n            let = resetDuration = true;\n            vm.conditionFormGroup.get(\"spec.type\")\n                .valueChanges.subscribe(type => {\n                    switch (type) {\n                        case AlarmConditionType\n                        .DURATION:\n                            vm.conditionFormGroup\n                                .get('spec.value')\n                                .enable();\n                            vm.conditionFormGroup\n                                .get('spec.unit')\n                                .enable();\n                            vm.conditionFormGroup\n                                .get('spec.count')\n                                .disable();\n                            if (resetDuration) {\n                                vm.conditionFormGroup\n                                    .get('spec')\n                                    .patchValue({\n                                        count: null\n                                    });\n                            }\n                            break;\n                        case AlarmConditionType\n                        .REPEATING:\n                            vm.conditionFormGroup\n                                .get('spec.count')\n                                .enable();\n                            vm.conditionFormGroup\n                                .get('spec.value')\n                                .disable();\n                            vm.conditionFormGroup\n                                .get('spec.unit')\n                                .disable();\n                            if (resetDuration) {\n                                vm.conditionFormGroup\n                                    .get('spec')\n                                    .patchValue({\n                                        value: null,\n                                        unit: null\n                                    });\n                            }\n                            break;\n                        case AlarmConditionType\n                        .SIMPLE:\n                            vm.conditionFormGroup\n                                .get('spec.value')\n                                .disable();\n                            vm.conditionFormGroup\n                                .get('spec.unit')\n                                .disable();\n                            vm.conditionFormGroup\n                                .get('spec.count')\n                                .disable();\n                            if (resetDuration) {\n                                vm.conditionFormGroup\n                                    .get('spec')\n                                    .patchValue({\n                                        value: null,\n                                        unit: null,\n                                        count: null\n                                    });\n                            }\n                            break;\n                    }\n                    vm.conditionFormGroup.get(\n                            'spec.value')\n                        .updateValueAndValidity({\n                            emitEvent: true\n                        });\n                    vm.conditionFormGroup.get(\n                            'spec.unit')\n                        .updateValueAndValidity({\n                            emitEvent: true\n                        });\n                    vm.conditionFormGroup.get(\n                            'spec.count')\n                        .updateValueAndValidity({\n                            emitEvent: true\n                        });\n                })\n\n            vm.save = function() {\n                vm.dialogRef.close(vm\n                    .conditionFormGroup.value)\n            }\n        }\n        widgetContext.customDialog.customDialog(html,\n            filterCtrl, (!isClearAlarm ?\n                createAlarmRuleControl.value\n                .alarmRule.condition :\n                createAlarmRuleControl.value\n                .condition)).subscribe(\n            alarmRuleFilter => {\n                if (isClearAlarm) {\n                    createAlarmRuleControl.get(\n                        \"condition\").setValue(\n                        alarmRuleFilter);\n                } else createAlarmRuleControl.get(\n                        \"alarmRule.condition\")\n                    .setValue(alarmRuleFilter);\n                vm.alarmProfile\n                    .updateValueAndValidity();\n            })\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "e5577e77-977f-e4db-b838-70848a59b744"
              } ],
              "actionCellButton" : [ {
                "name" : "Edit Alarm Profile",
                "icon" : "edit",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #alarmProfileForm=\"ngForm\" [formGroup]=\"alarmProfile\" *ngIf=\"alarmProfile\"\r\n      (ngSubmit)=\"save()\" class=\"add-entity-form\" style=\"min-width: 900px\">\r\n  <mat-toolbar fxLayout=\"row\" color=\"primary\">\r\n    <h2>Edit Alarm Profile</h2>\r\n    <span fxFlex></span>\r\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n      <mat-icon class=\"material-icons\">close</mat-icon>\r\n    </button>\r\n  </mat-toolbar>\r\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\r\n  </mat-progress-bar>\r\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n  <div mat-dialog-content fxLayout=\"column\" class=\"form_content\">\r\n    <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\r\n      <mat-form-field fxFlex class=\"mat-block\">\r\n        <mat-label>Entity Name</mat-label>\r\n        <input matInput formControlName=\"alarmProfileName\">\r\n        <mat-error *ngIf=\"alarmProfile.get('alarmProfileName').hasError('required')\">\r\n          Alarm profile name is required.\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <div fxLayout=\"column\" fxFlex>\r\n      <div class=\"tb-device-profile-alarms\" *ngIf=\"alarmsFormArray().controls.length\">\r\n        <div *ngFor=\"let alarmControl of alarmsFormArray().controls; let $index = index; last as isLast;\"\r\n             [ngStyle]=\"!isLast ? {paddingBottom: '8px'} : {}\">\r\n          <mat-expansion-panel class=\"device-profile-alarm\" fxFlex [formGroup]=\"alarmControl\" expanded=\"true\">\r\n            <mat-expansion-panel-header>\r\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                <mat-panel-title>\r\n                  <div fxLayout=\"row\" fxFlex fxLayoutAlign=\"start center\">\r\n                    {{ alarmControl.get('alarmType').value }}\r\n                  </div>\r\n                </mat-panel-title>\r\n                <span fxFlex></span>\r\n                <button *ngIf=\"!disabled\" mat-icon-button style=\"min-width: 40px;\" type=\"button\"\r\n                        (click)=\"alarmsFormArray().removeAt($index)\" matTooltip=\"{{ 'action.remove' | translate }}\"\r\n                        matTooltipPosition=\"above\">\r\n                  <mat-icon>delete</mat-icon>\r\n                </button>\r\n              </div>\r\n            </mat-expansion-panel-header>\r\n            <div>\r\n              <div fxLayout=\"column\" fxLayoutGap=\"0.5em\" *ngIf=\"alarmControl  && alarmControl.get('alarmType')\">\r\n                <mat-divider></mat-divider>\r\n                <mat-form-field fxFlex floatLabel=\"always\">\r\n                  <mat-label>{{'device-profile.alarm-type' | translate}}</mat-label>\r\n                  <input required matInput formControlName=\"alarmType\" placeholder=\"Enter alarm type\">\r\n                  <mat-error *ngIf=\"alarmControl  && alarmControl.get('alarmType').hasError('required')\">\r\n                    {{ 'device-profile.alarm-type-required' | translate }}\r\n                  </mat-error>\r\n                  <mat-error *ngIf=\"alarmControl  && alarmControl.get('alarmType').hasError('unique')\">\r\n                    {{ 'device-profile.alarm-type-unique' | translate }}\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                <mat-checkbox formControlName=\"isUtilizationAlarm\" style=\"display: block; padding-bottom: 16px;\">\r\n                    Is Utilization Alarm\r\n                  </mat-checkbox>\r\n                  <div fxLayout=\"row\">\r\n                      <mat-checkbox formControlName=\"enableReminder\" style=\"display: block; padding-bottom: 16px;\">\r\n                    Enable Remainder (Use case group)\r\n                  </mat-checkbox>\r\n                  <mat-form-field fxFlex floatLabel=\"always\" class=\"interval_box\">\r\n                  <mat-label>Notification interval (seconds)</mat-label>\r\n                  <input required matInput formControlName=\"notifications_interaval\" placeholder=\"Notification interval\" type=\"number\">\r\n                  <mat-error *ngIf=\"alarmControl.get('notifications_interaval').hasError('required')\">\r\n                    Notification interval is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                  </div>\r\n                <div fxLayout=\"row\">\r\n                      <mat-checkbox formControlName=\"enableEscalation\" style=\"display: block; padding-bottom: 16px;\">\r\n                    Enable Escalation\r\n                  </mat-checkbox>\r\n                  <mat-form-field fxFlex floatLabel=\"always\" class=\"interval_box\">\r\n                  <mat-label>Escalation interval (seconds)</mat-label>\r\n                  <input required matInput formControlName=\"escalation_interaval\" placeholder=\"Escalation interval\" type=\"number\">\r\n                  <mat-error *ngIf=\"alarmControl.get('escalation_interaval').hasError('required')\">\r\n                    Escalation interval is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                  </div>\r\n              </div>\r\n              <mat-expansion-panel class=\"advanced-settings\" [expanded]=\"false\">\r\n                <mat-expansion-panel-header>\r\n                  <mat-panel-title>\r\n                    <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n                      <div class=\"tb-small\" translate>device-profile.advanced-settings</div>\r\n                    </div>\r\n                  </mat-panel-title>\r\n                </mat-expansion-panel-header>\r\n                <div matExpansionPanelContent *ngIf=\"alarmControl && alarmControl.get('propagate')\">\r\n                  <mat-checkbox formControlName=\"propagate\" style=\"display: block; padding-bottom: 16px;\">\r\n                    {{ 'device-profile.propagate-alarm' | translate }}\r\n                  </mat-checkbox>\r\n                  <section *ngIf=\"alarmControl  && alarmControl.get('propagate').value === true\" style=\"padding-bottom: 1em;\">\r\n                    <mat-form-field floatLabel=\"always\" class=\"mat-block\">\r\n                      <mat-label translate>device-profile.alarm-rule-relation-types-list</mat-label>\r\n                      <mat-chip-list #relationTypesChipList [disabled]=\"alarmControl.get('propagate').value !== true\">\r\n                        <mat-chip\r\n                          *ngFor=\"let key of alarmControl.get('propagateRelationTypes').value;\"\r\n                          (removed)=\"removeRelationType(key, alarmControl.get('propagateRelationTypes'))\">\r\n                          {{key}}\r\n                          <mat-icon matChipRemove>close</mat-icon>\r\n                        </mat-chip>\r\n                        <input matInput type=\"text\"\r\n                               placeholder=\"{{'device-profile.alarm-rule-relation-types-list' | translate}}\"\r\n                               style=\"max-width: 200px;\"\r\n                               [matChipInputFor]=\"relationTypesChipList\"\r\n                               [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n                               (matChipInputTokenEnd)=\"addRelationType($event, alarmControl)\"\r\n                               [matChipInputAddOnBlur]=\"true\">\r\n                      </mat-chip-list>\r\n                      <mat-hint\r\n                        innerHTML=\"{{ 'device-profile.alarm-rule-relation-types-list-hint' | translate }}\"></mat-hint>\r\n                    </mat-form-field>\r\n                  </section>\r\n                </div>\r\n              </mat-expansion-panel>\r\n              <div fxFlex fxLayout=\"column\">\r\n                <div translate class=\"tb-small\" style=\"padding-bottom: 8px;\">device-profile.create-alarm-rules</div>\r\n                <!--tb-create-alarm-rules-->\r\n                <div fxFlex fxLayout=\"column\" *ngIf=\"alarmControl && alarmControl.get('createAlarmRules')\">\r\n                  <div *ngFor=\"let createAlarmRuleControl of alarmControl.get('createAlarmRules').controls; let $index = index;\r\n                                           last as isLast;\" fxLayout=\"row\" fxLayoutAlign=\"start center\"\r\n                       fxLayoutGap=\"8px\" style=\"padding-bottom: 8px;\" [formGroup]=\"createAlarmRuleControl\">\r\n                    <div class=\"create-alarm-rule\" fxFlex fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayoutAlign=\"start\">\r\n                      <mat-form-field class=\"severity mat-block\" floatLabel=\"always\" hideRequiredMarker>\r\n                        <mat-label translate>alarm.severity</mat-label>\r\n                        <mat-select formControlName=\"severity\"\r\n                                    required\r\n                                    placeholder=\"{{ 'device-profile.select-alarm-severity' | translate }}\">\r\n                          <mat-option *ngFor=\"let alarmSeverity of alarmSeverities\" [value]=\"alarmSeverity\"\r\n                          [disabled]=\"isDisabledSeverity(alarmControl.get('createAlarmRules').value, createAlarmRuleControl, alarmSeverity)\">\r\n                            {{ alarmSeverityTranslationMap.get(alarmSeverity) | translate }}\r\n                          </mat-option>\r\n                        </mat-select>\r\n                        <mat-error *ngIf=\"createAlarmRuleControl.get('severity').hasError('required')\">\r\n                          {{ 'device-profile.alarm-severity-required' | translate }}\r\n                        </mat-error>\r\n                      </mat-form-field>\r\n                      <mat-divider vertical></mat-divider>\r\n                      <!--tb-alarm-rule-->\r\n                      <div fxLayout=\"column\" formGroupName=\"alarmRule\">\r\n                        <!--<tb-alarm-rule-condition formControlName=\"condition\">-->\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" formGroupName=\"condition\" style=\"min-width: 0;\">\r\n                          <div class=\"tb-alarm-rule-condition\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"center\" (click)=\"openFilterDialog($event, createAlarmRuleControl)\">\r\n                            <!--<tb-filter-text formControlName=\"condition\"-->\r\n                            <!--                [nowrap]=\"true\"-->\r\n                            <!--                required-->\r\n                            <!--                addFilterPrompt=\"{{'device-profile.enter-alarm-rule-condition-prompt' | translate}}\">-->\r\n                            <!--</tb-filter-text>-->\r\n                        \r\n                            {{!conditionSet(createAlarmRuleControl) ? translate.instant('device-profile.enter-alarm-rule-condition-prompt'): \"\"}}\r\n                            <div class=\"tb-filter-text\"  [innerHTML]=\"createAlarmText(createAlarmRuleControl.value)\"></div>\r\n                            <span *ngIf=\"specText\" class=\"tb-alarm-rule-condition-spec\" [ngClass]=\"{disabled: this.disabled}\" [innerHTML]=\"specText\">\r\n                            </span>\r\n                          </div>\r\n                          <button mat-icon-button\r\n                                  [color]=\"conditionSet(createAlarmRuleControl) ? 'primary' : 'warn'\"\r\n                                  type=\"button\"\r\n                                  (click)=\"openFilterDialog($event, createAlarmRuleControl)\"\r\n                                  matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                  matTooltipPosition=\"above\">\r\n                            <mat-icon>{{ disabled ? 'visibility' : (conditionSet(createAlarmRuleControl) ? 'edit' : 'add') }}</mat-icon>\r\n                          </button>\r\n                        </div>\r\n                        <!--</tb-alarm-rule-condition>-->\r\n                        <!--<tb-alarm-schedule-info formControlName=\"schedule\">-->\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"min-width: 0;\">\r\n                          <span class=\"tb-alarm-rule-schedule title\"\r\n                                (click)=\"openScheduleDialog($event, createAlarmRuleControl.get('alarmRule.schedule'))\">{{('device-profile.schedule' | translate) + \":  \"}}</span>\r\n                          <span class=\"tb-alarm-rule-schedule\" (click)=\"openScheduleDialog($event, createAlarmRuleControl.get('alarmRule.schedule'))\"\r\n                                [innerHTML]=\"scheduleText(createAlarmRuleControl.get('alarmRule.schedule'))\"></span>\r\n                          <button mat-icon-button color=\"primary\" type=\"button\" (click)=\"openScheduleDialog($event, createAlarmRuleControl.get('alarmRule.schedule'))\"\r\n                                  matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                  matTooltipPosition=\"above\">\r\n                            <mat-icon>{{ disabled ? 'visibility' : 'edit' }}</mat-icon>\r\n                          </button>\r\n                        </div>\r\n                        <!--</tb-alarm-schedule-info>-->\r\n                        <div *ngIf=\"!disabled || createAlarmRuleControl.get('alarmRule.alarmDetails').value\"\r\n                             fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                                          <span class=\"tb-alarm-rule-details title\"\r\n                                                (click)=\"openEditDetailsDialog($event, createAlarmRuleControl.get('alarmRule.alarmDetails'))\">\r\n                                              {{ createAlarmRuleControl.get('alarmRule.alarmDetails').value ? ('device-profile.alarm-rule-details' | translate) + ': ' : ('device-profile.add-alarm-rule-details' | translate) }}\r\n                                            </span>\r\n                          <span *ngIf=\"createAlarmRuleControl.get('alarmRule.alarmDetails').value\"\r\n                                class=\"tb-alarm-rule-details\"\r\n                                (click)=\"openEditDetailsDialog($event, createAlarmRuleControl.get('alarmRule.alarmDetails'))\"\r\n                                [innerHTML]=\"createAlarmRuleControl.get('alarmRule.alarmDetails').value\"></span>\r\n                          <button mat-icon-button color=\"primary\" type=\"button\"\r\n                                  (click)=\"openEditDetailsDialog($event, createAlarmRuleControl.get('alarmRule.alarmDetails'))\"\r\n                                  matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                  matTooltipPosition=\"above\">\r\n                            <mat-icon>{{ disabled ? 'visibility' : (createAlarmRuleControl.get('alarmRule.alarmDetails').value ? 'edit' : 'add') }}</mat-icon>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <button *ngIf=\"!disabled\"\r\n                            mat-icon-button color=\"primary\" style=\"min-width: 40px;\"\r\n                            type=\"button\"\r\n                            (click)=\"removeCreateAlarmRule(alarmControl.get('createAlarmRules'),$index)\"\r\n                            matTooltip=\"{{ 'action.remove' | translate }}\"\r\n                            matTooltipPosition=\"above\">\r\n                      <mat-icon>remove_circle_outline</mat-icon>\r\n                    </button>\r\n                  </div>\r\n                  <div *ngIf=\"!alarmControl.get('createAlarmRules').controls.length && !disabled\">\r\n                                  <span translate fxLayoutAlign=\"center center\" style=\"margin: 16px 0\"\r\n                                        class=\"tb-prompt required\">device-profile.add-create-alarm-rule-prompt</span>\r\n                  </div>\r\n                  <div *ngIf=\"!disabled\">\r\n                    <button mat-stroked-button color=\"primary\"\r\n                            type=\"button\"\r\n                            (click)=\"addCreateAlarmRule(alarmControl.get('createAlarmRules'))\"\r\n                            matTooltip=\"{{ 'device-profile.add-create-alarm-rule' | translate }}\"\r\n                            matTooltipPosition=\"above\">\r\n                      <mat-icon class=\"button-icon\">add_circle_outline</mat-icon>\r\n                      {{ 'device-profile.add-create-alarm-rule' | translate }}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div translate class=\"tb-small\" style=\"padding-bottom: 8px;\">device-profile.clear-alarm-rule</div>\r\n                <div fxLayout=\"row\" fxLayoutGap=\"8px;\" fxLayoutAlign=\"start center\"\r\n                     *ngIf=\"alarmControl  && alarmControl.get('clearRule').get('condition')\"\r\n                     style=\"padding-bottom: 8px;\" formGroupName=\"clearRule\">\r\n                  <div class=\"clear-alarm-rule\" fxFlex fxLayout=\"row\">\r\n                       <div class=\"create-alarm-rule\" fxFlex fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayoutAlign=\"start\">\r\n                      <div fxLayout=\"column\">\r\n                        <!--<tb-alarm-rule-condition formControlName=\"condition\">-->\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"min-width: 0;\">\r\n                          <div class=\"tb-alarm-rule-condition\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"center\" (click)=\"openFilterDialog($event, alarmControl.get('clearRule'), true)\">\r\n                            {{!conditionSet(alarmControl.get('clearRule')) ? translate.instant('device-profile.enter-alarm-rule-condition-prompt'): \"Alarm clear filter condition:  \"}}\r\n                            <span *ngIf=\"specText\" class=\"tb-alarm-rule-condition-spec\" [ngClass]=\"{disabled: this.disabled}\" [innerHTML]=\"specText\">\r\n                            </span>\r\n                          </div>\r\n                          <div class=\"tb-filter-text\" [innerHTML]=\"clearAlarmText(alarmControl.get('clearRule')?.value)\"></div>\r\n                          <button mat-icon-button\r\n                                  [color]=\"conditionSet(alarmControl.get('clearRule')) ? 'primary' : 'warn'\"\r\n                                  type=\"button\"\r\n                                  (click)=\"openFilterDialog($event, alarmControl.get('clearRule'), true)\"\r\n                                  matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                  matTooltipPosition=\"above\">\r\n                            <mat-icon>{{ disabled ? 'visibility' : (conditionSet(alarmControl.get('clearRule')) ? 'edit' : 'add') }}</mat-icon>\r\n                          </button>\r\n                        </div>\r\n                        <!--</tb-alarm-rule-condition>-->\r\n                        <!--<tb-alarm-schedule-info formControlName=\"schedule\">-->\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"min-width: 0;\">\r\n                          <span class=\"tb-alarm-rule-schedule title\"\r\n                                (click)=\"openScheduleDialog($event, alarmControl.get('clearRule.schedule'))\">{{('device-profile.schedule' | translate) + \":  \"}}</span>\r\n                          <span class=\"tb-alarm-rule-schedule\" (click)=\"openScheduleDialog($event,alarmControl.get('clearRule').get('schedule'))\"\r\n                                [innerHTML]=\"scheduleText(alarmControl.get('clearRule.schedule'))\"></span>\r\n                          <button mat-icon-button color=\"primary\" type=\"button\" (click)=\"openScheduleDialog($event, alarmControl.get('clearRule.schedule'))\"\r\n                                  matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                  matTooltipPosition=\"above\">\r\n                            <mat-icon>{{ disabled ? 'visibility' : 'edit' }}</mat-icon>\r\n                          </button>\r\n                        </div>\r\n                        <!--</tb-alarm-schedule-info>-->\r\n                        <div *ngIf=\"!disabled || alarmControl.get('clearRule.alarmDetails').value\"\r\n                             fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                                          <span class=\"tb-alarm-rule-details title\"\r\n                                                (click)=\"openEditDetailsDialog($event, alarmControl.get('clearRule.alarmDetails'))\">\r\n                                              {{ alarmControl.get('clearRule.alarmDetails').value ? ('device-profile.alarm-rule-details' | translate) + ': ' : ('device-profile.add-alarm-rule-details' | translate) }}\r\n                                            </span>\r\n                          <span *ngIf=\"alarmControl  && alarmControl.get('clearRule.alarmDetails').value\"\r\n                                class=\"tb-alarm-rule-details\"\r\n                                (click)=\"openEditDetailsDialog($event, alarmControl.get('clearRule.alarmDetails'))\"\r\n                                [innerHTML]=\"alarmControl.get('clearRule.alarmDetails').value\"></span>\r\n                          <button mat-icon-button color=\"primary\" type=\"button\"\r\n                                  (click)=\"openEditDetailsDialog($event, alarmControl.get('clearRule.alarmDetails'))\"\r\n                                  matTooltip=\"{{ (disabled ? 'action.view' : 'action.edit') | translate }}\"\r\n                                  matTooltipPosition=\"above\">\r\n                            <mat-icon>{{ disabled ? 'visibility' : (alarmControl && alarmControl.get('clearRule.alarmDetails').value ? 'edit' : 'add') }}</mat-icon>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <button *ngIf=\"!disabled\"\r\n                          mat-icon-button color=\"primary\" style=\"min-width: 40px;\"\r\n                          type=\"button\"\r\n                          (click)=\"removeClearAlarmRule(alarmControl && alarmControl.get('clearRule'))\"\r\n                          matTooltip=\"{{ 'action.remove' | translate }}\"\r\n                          matTooltipPosition=\"above\">\r\n                    <mat-icon>remove_circle_outline</mat-icon>\r\n                  </button>\r\n                </div>\r\n                <div *ngIf=\"alarmControl && !alarmControl.get('clearRule.condition')\">\r\n                            <span translate fxLayoutAlign=\"center center\" style=\"margin: 16px 0\"\r\n                                  class=\"tb-prompt\">device-profile.no-clear-alarm-rule</span>\r\n                </div>\r\n                <div *ngIf=\"!disabled\" [fxShow]=\"alarmControl && !alarmControl.get('clearRule.condition')\">\r\n                  <button mat-stroked-button color=\"primary\"\r\n                          type=\"button\"\r\n                          (click)=\"addClearAlarmRule(alarmControl)\"\r\n                          matTooltip=\"{{ 'device-profile.add-clear-alarm-rule' | translate }}\"\r\n                          matTooltipPosition=\"above\">\r\n                    <mat-icon class=\"button-icon\">add_circle_outline</mat-icon>\r\n                    {{ 'device-profile.add-clear-alarm-rule' | translate }}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </mat-expansion-panel>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"!alarmsFormArray().controls.length\">\r\n        <span translate fxLayoutAlign=\"center center\" class=\"tb-prompt\">device-profile.no-alarm-rules</span>\r\n      </div>\r\n      <div *ngIf=\"!disabled\" style=\"padding-top: 16px;\">\r\n        <button mat-raised-button color=\"primary\"\r\n                type=\"button\"\r\n                (click)=\"addAlarm()\"\r\n                matTooltip=\"{{ 'device-profile.add-alarm-rule' | translate }}\"\r\n                matTooltipPosition=\"above\">\r\n          <span translate>device-profile.add-alarm-rule</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n    <button mat-button mat-raised-button color=\"primary\"\r\n            type=\"submit\"\r\n            [disabled]=\"(isLoading$ | async) || alarmProfile.invalid || !alarmProfile.dirty\">\r\n      Save\r\n    </button>\r\n    <button mat-button color=\"primary\"\r\n            type=\"button\"\r\n            [disabled]=\"(isLoading$ | async)\"\r\n            (click)=\"cancel()\" cdkFocusInitial>\r\n      Cancel\r\n    </button>\r\n  </div>\r\n</form>\r\n",
                "customCss" : "form {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\nform .form_content {\n    flex-grow: 1;\n}\n\n.tb-device-profile-alarms {\n    flex-grow: 1;\n    overflow-y: auto;\n}\n\n.mat-expansion-panel {\n\t box-shadow: none;\n}\n .mat-expansion-panel.device-profile-alarm {\n\t border: 1px groove rgba(0, 0, 0, .25);\n}\n .mat-expansion-panel.device-profile-alarm .mat-expansion-panel-header {\n\t padding: 0 24px 0 8px;\n}\n .mat-expansion-panel.device-profile-alarm .mat-expansion-panel-header.mat-expanded {\n\t height: 48px;\n}\n .mat-expansion-panel.advanced-settings {\n\t border: none;\n\t padding: 0;\n}\n .mat-expansion-panel.advanced-settings .mat-expansion-panel-header {\n\t padding: 0 8px;\n}\n\n .tb-device-profile-alarms.mat-padding {\n\t padding: 8px;\n}\n .tb-prompt {\n\t margin: 30px 0;\n}\n\n.create-alarm-rule {\n    border: 2px groove rgba(0, 0, 0, .45);\n    border-radius: 4px;\n    padding: 8px;\n    min-width: 0;\n  }\n  \n  .mat-form-field.severity .mat-form-field-infix {\n\t width: 160px;\n}\n .button-icon {\n\t font-size: 20px;\n\t width: 20px;\n\t height: 20px;\n}\n\n.mat-dialog-content {\n    overflow-y: auto;\n}\n \n ",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap\n    .get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap\n    .get('assetService'));\nlet deviceService = $injector.get(widgetContext.servicesMap\n    .get('deviceService'));\nlet attributeService = $injector.get(widgetContext\n    .servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext\n    .servicesMap.get('entityRelationService'));\n\nwidgetContext.attributeService\n    .getEntityAttributes(entityId,\n        \"SERVER_SCOPE\", [\"alarmConfig\"]).subscribe(resp => {\n        if (resp && resp.length) {\n            openAddEntityDialog(resp[0].value);\n        }\n\n    })\n\n\nfunction openAddEntityDialog(alarmConfigData) {\n    customDialog.customDialog(htmlTemplate,\n            AddEntityDialogController, alarmConfigData)\n        .subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n    let vm = instance;\n    vm.translate = widgetContext.translate;\n    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\n    vm.entitySearchDirection = {\n        from: \"FROM\",\n        to: \"TO\"\n    };\n\n    AlarmSeverity = {\n        CRITICAL: 'CRITICAL',\n        MAJOR: 'MAJOR',\n        MINOR: 'MINOR',\n        WARNING: 'WARNING',\n        INDETERMINATE: 'INDETERMINATE'\n    }\n    \n    assetService.getAsset(entityId.id).subscribe(asset=>{\n        vm.asset = asset;\n    });\n\n    vm.addClearAlarmRule = function(addClearAlarmRule) {\n        //   addClearAlarmRule.get(\"clearRule\").setValue({\n        //     condition: vm.fb.group({ \n        //       condition: [[]],\n        //       spec: [{type: \"SIMPLE\"}]\n        //     }), \n        //     schedule: [null],\n        //     alarmDetails: [null]\n        //   });\n        addClearAlarmRule.get(\"clearRule\").addControl(\n            \"condition\", vm.fb.group({\n                condition: [\n                    []\n                ],\n                spec: [{\n                    type: \"SIMPLE\"\n                }]\n            }));\n        addClearAlarmRule.get(\"clearRule\").addControl(\n            \"schedule\", vm.fb.control(null));\n        addClearAlarmRule.get(\"clearRule\").addControl(\n            \"alarmDetails\", vm.fb.control(null));\n    }\n    vm.removeClearAlarmRule = function(alarmControl) {\n        alarmControl.removeControl(\"condition\");\n        alarmControl.removeControl(\"schedule\")\n        alarmControl.removeControl(\"alarmDetails\")\n    }\n    vm.AlarmSeverity = AlarmSeverity;\n    vm.alarmSeverities = Object.keys(AlarmSeverity);\n\n    vm.isDisabledSeverity = function(arrayControlsValue, createAlarmRuleControl,\n        currentSeverity) {\n        return arrayControlsValue.some(value => {\n            return value.severity ===\n                currentSeverity;\n        });\n    };\n    const alarmSeverityTranslations = new Map([\n        [\"CRITICAL\", 'alarm.severity-critical'],\n        [\"MAJOR\", 'alarm.severity-major'],\n        [\"MINOR\", 'alarm.severity-minor'],\n        [\"WARNING\", 'alarm.severity-warning'],\n        [\"INDETERMINATE\",\n            'alarm.severity-indeterminate'\n        ]\n    ]);\n\n    function timeOfDayToMoment(date) {\n        if (typeof date === 'number' || date === null) {\n            return moment([1970, 0, 1, 0, 0, 0, 0]);\n        }\n        return moment([1970, 0, 1, date.getHours(), date\n            .getMinutes(), 0, 0\n        ]);\n    }\n\n    function timeOfDayToUTCTimestamp(date) {\n        if (typeof date === 'number' || date === null) {\n            return 0;\n        }\n        return moment.utc([1970, 0, 1, date.getHours(), date\n            .getMinutes(), date.getSeconds(), 0\n        ]).valueOf();\n    }\n\n    vm.alarmSeverityTranslationMap = alarmSeverityTranslations;\n\n    vm.scheduleText = function(control) {\n        let schedule = control.value;\n        let scheduleText = \"\";\n        if (control.value === undefined || control\n            .value === null) {\n            schedule = {\n                type: \"ANY_TIME\"\n            };\n        }\n\n        const dayOfWeekTranslations = new Array(\n            'device-profile.schedule-day.monday',\n            'device-profile.schedule-day.tuesday',\n            'device-profile.schedule-day.wednesday',\n            'device-profile.schedule-day.thursday',\n            'device-profile.schedule-day.friday',\n            'device-profile.schedule-day.saturday',\n            'device-profile.schedule-day.sunday'\n        );\n\n        function getAlarmScheduleRangeText(startsOn,\n            endsOn) {\n            const start = timeOfDayToMoment(startsOn);\n            const end = timeOfDayToMoment(endsOn);\n            if (start < end) {\n                return `<span><span class=\"nowrap\">${start.format('hh:mm A')}</span> – <span class=\"nowrap\">${end.format('hh:mm A')}</span></span>`;\n            } else if (start.valueOf() === 0 && end\n                .valueOf() === 0 || start.isSame(moment(\n                    [1970, 0])) && end.isSame(moment([\n                    1970, 0\n                ]))) {\n                return '<span><span class=\"nowrap\">12:00 AM</span> – <span class=\"nowrap\">12:00 PM</span></span>';\n            }\n            return `<span><span class=\"nowrap\">12:00 AM</span> – <span class=\"nowrap\">${end.format('hh:mm A')}</span>` +\n                ` and <span class=\"nowrap\">${start.format('hh:mm A')}</span> – <span class=\"nowrap\">12:00 PM</span></span>`;\n        }\n\n        switch (schedule.type) {\n            case \"ANY_TIME\":\n                scheduleText = widgetContext.translate\n                    .instant(\n                        'device-profile.schedule-any-time'\n                    );\n                break;\n            case \"SPECIFIC_TIME\":\n                for (const day of schedule.daysOfWeek) {\n                    if (scheduleText.length) {\n                        scheduleText += \", \";\n                    }\n                    scheduleText += widgetContext\n                        .translate\n                        .instant(dayOfWeekTranslations[\n                            day - 1]);\n                }\n                scheduleText += ' <b>' +\n                    getAlarmScheduleRangeText(\n                        utcTimestampToTimeOfDay(schedule\n                            .startsOn),\n                        utcTimestampToTimeOfDay(schedule\n                            .endsOn)) + '</b>';\n                break;\n            case \"CUSTOM\":\n                for (const item of schedule.items) {\n                    if (item.enabled) {\n                        if (schedule.length) {\n                            scheduleText += ', ';\n                        }\n                        scheduleText += widgetContext\n                            .translate.instant(\n                                dayOfWeekTranslations[\n                                    item.dayOfWeek - 1]\n                            );\n                        scheduleText += ' <b>' +\n                            getAlarmScheduleRangeText(\n                                utcTimestampToTimeOfDay(\n                                    item.startsOn),\n                                utcTimestampToTimeOfDay(\n                                    item.endsOn)) +\n                            '</b>';\n                    }\n                }\n                break;\n        }\n        return scheduleText;\n    };\n\n    function utcTimestampToTimeOfDay(time = 0) {\n        return new Date(time + new Date(time)\n            .getTimezoneOffset() * 60 * 1000);\n    }\n\n    vm.alarmProfile = vm.fb.group({\n        alarmProfileName: [entityName, [vm.validators\n            .required\n        ]],\n        alarms: vm.fb.array([], [vm.validators\n            .required\n        ])\n    });\n    vm.alarmsFormArray = function() {\n        return vm.alarmProfile.get('alarms');\n    };\n    vm.addAlarm = function(data) {\n        let alarm = {\n            alarmType: ['', [vm.validators\n                .required\n            ]],\n            isUtilizationAlarm: [false],\n             enableReminder: [false],\n            notifications_interaval: [900, [vm.validators\n                .required]],\n            enableEscalation: [false],\n            escalation_interaval: [1800, [vm.validators\n                .required]],\n            propagate: [true],\n            propagateRelationTypes: [[\"Contains\"]],\n            clearRule: vm.fb.group({}),\n            createRules: {\n                CRITICAL: {\n                    condition: {\n                        condition: []\n                    }\n                }\n            },\n            createAlarmRules: vm.fb.array([])\n        };\n        if (data) {\n            alarm = {\n                alarmType: [data.alarmType, [vm\n                    .validators\n                    .required\n                ]],\n                isUtilizationAlarm: [data.isUtilizationAlarm],\n                enableReminder: [data.enableReminder],\n                notifications_interaval: [data.notifications_interaval],\n                enableEscalation: [data.enableEscalation],\n                escalation_interaval: [data.escalation_interaval],\n                propagate: [data.propagate],\n                propagateRelationTypes: [data\n                    .propagateRelationTypes\n                ],\n                createRules: data.createRules,\n                createAlarmRules: vm.fb.array([])\n            };\n            if (data.clearRule.condition && data\n                .clearRule.condition.condition && data\n                .clearRule.condition.condition.length) {\n                alarm.clearRule = vm.fb.group({\n                    condition: vm.fb.group({\n                        condition: [data\n                            .clearRule\n                            .condition\n                            .condition\n                        ],\n                        spec: [data\n                            .clearRule\n                            .condition\n                            .spec\n                        ]\n                    }),\n                    alarmDetails: [data\n                        .clearRule\n                        .alarmDetails\n                    ],\n                    schedule: [data.clearRule\n                        .schedule\n                    ]\n                })\n            } else {\n                alarm.clearRule = vm.fb.group({});\n            }\n            if (data.createAlarmRules && data\n                .createAlarmRules.length) {\n                data.createAlarmRules.forEach(\n                    alarmRule => {\n                        alarm.createAlarmRules.push(\n                            vm.fb.group({\n                                severity: [\n                                    alarmRule\n                                    .severity,\n                                    vm\n                                    .validators\n                                    .required\n                                ],\n                                alarmRule: vm\n                                    .fb\n                                    .group({\n                                            condition: vm\n                                                .fb\n                                                .group({\n                                                        condition: [\n                                                            alarmRule\n                                                            .alarmRule\n                                                            .condition\n                                                            .condition\n                                                        ],\n                                                        spec: [alarmRule\n                                                            .alarmRule\n                                                            .condition\n                                                            .spec\n                                                        ]\n                                                    },\n                                                    vm\n                                                    .validators\n                                                    .required\n                                                    ),\n                                            schedule: [\n                                                alarmRule\n                                                .alarmRule\n                                                .schedule\n                                            ],\n                                            alarmDetails: [\n                                                alarmRule\n                                                .alarmRule\n                                                .alarmDetails\n                                            ]\n                                        },\n                                        alarmRuleValidator\n                                        )\n                            }));\n                    })\n            }\n\n        }\n        const alarmsArray = vm.alarmsFormArray();\n        const fg = vm.fb.group(alarm, {\n            validators: deviceProfileAlarmValidator\n        });\n        alarmsArray.push(fg);\n        vm.alarmProfile.updateValueAndValidity();\n    };\n    if (vm.data) {\n        vm.alarmProfile.get(\"alarmProfileName\").setValue(vm\n            .data.alarmProfileName)\n        vm.data.alarms.forEach(alarm => {\n            vm.addAlarm(alarm)\n        })\n    }\n\n    vm.openScheduleDialog = function($event, control) {\n        if ($event) {\n            $event.stopPropagation();\n        }\n        let htmlTemplate =\n            \"<form *ngIf=\\\"alarmScheduleForm\\\" [formGroup]=\\\"alarmScheduleForm\\\"  (ngSubmit)=\\\"save()\\\" style=\\\"min-width: 800px;\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <h2>{{ (readonly ? \\'device-profile.schedule\\' : \\'device-profile.edit-schedule\\') | translate }}<\\/h2>\\r\\n    <span fxFlex><\\/span>\\r\\n    <button mat-icon-button\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            type=\\\"button\\\">\\r\\n      <mat-icon class=\\\"material-icons\\\">close<\\/mat-icon>\\r\\n    <\\/button>\\r\\n  <\\/mat-toolbar>\\r\\n  <mat-progress-bar color=\\\"warn\\\" mode=\\\"indeterminate\\\" *ngIf=\\\"isLoading$ | async\\\">\\r\\n  <\\/mat-progress-bar>\\r\\n  <div mat-dialog-content>\\r\\n    <fieldset [disabled]=\\\"isLoading$ | async\\\">\\r\\n      <div fxFlex fxLayout=\\\"column\\\">\\r\\n<section fxLayout=\\\"column\\\">\\r\\n  <mat-form-field class=\\\"mat-block\\\" hideRequiredMarker floatLabel=\\\"always\\\">\\r\\n    <mat-label> <\\/mat-label>\\r\\n    <mat-select formControlName=\\\"type\\\" required placeholder=\\\"{{ \\'device-profile.schedule-type\\' | translate }}\\\">\\r\\n      <mat-option *ngFor=\\\"let alarmScheduleType of alarmScheduleTypes\\\" [value]=\\\"alarmScheduleType\\\">\\r\\n        {{ alarmScheduleTypeTranslate.get(alarmScheduleType) | translate }}\\r\\n      <\\/mat-option>\\r\\n    <\\/mat-select>\\r\\n    <mat-error *ngIf=\\\"alarmScheduleForm.get(\\'type\\').hasError(\\'required\\')\\\">\\r\\n      {{ \\'device-profile.schedule-type-required\\' | translate }}\\r\\n    <\\/mat-error>\\r\\n  <\\/mat-form-field>\\r\\n  <div *ngIf=\\\"alarmScheduleForm.get(\\'type\\').value !== alarmScheduleType.ANY_TIME\\\">\\r\\n    <tb-timezone-select\\r\\n      userTimezoneByDefault\\r\\n      required\\r\\n      formControlName=\\\"timezone\\\">\\r\\n    <\\/tb-timezone-select>\\r\\n    <section *ngIf=\\\"alarmScheduleForm.get(\\'type\\').value === alarmScheduleType.SPECIFIC_TIME\\\">\\r\\n      <div class=\\\"tb-small\\\" style=\\\"margin-bottom: 0.5em\\\" translate>device-profile.schedule-days<\\/div>\\r\\n      <div fxLayout=\\\"column\\\" fxLayout.gt-md=\\\"row\\\" fxLayoutGap=\\\"16px\\\">\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"16px\\\">\\r\\n          <mat-checkbox *ngFor=\\\"let day of firstRowDays\\\" [formControl]=\\\"weeklyRepeatControl(day)\\\">\\r\\n            {{ dayOfWeekTranslationsArray[day] | translate }}\\r\\n          <\\/mat-checkbox>\\r\\n        <\\/div>\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"16px\\\">\\r\\n          <mat-checkbox *ngFor=\\\"let day of secondRowDays\\\" [formControl]=\\\"weeklyRepeatControl(day)\\\">\\r\\n            {{ dayOfWeekTranslationsArray[day] | translate }}\\r\\n          <\\/mat-checkbox>\\r\\n        <\\/div>\\r\\n      <\\/div>\\r\\n      <tb-error style=\\\"display: block;\\\" [error]=\\\"alarmScheduleForm.get(\\'daysOfWeek\\').hasError(\\'dayOfWeeks\\')\\r\\n                  ? (\\'device-profile.schedule-days-of-week-required\\' | translate) : \\'\\'\\\"><\\/tb-error>\\r\\n      <div class=\\\"tb-small\\\" style=\\\"margin-bottom: 0.5em\\\" translate>device-profile.schedule-time<\\/div>\\r\\n      <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutGap.gt-xs=\\\"8px\\\">\\r\\n        <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\" fxFlex.gt-md>\\r\\n          <mat-form-field fxFlex.xs fxFlex.sm=\\\"150px\\\" fxFlex.md=\\\"150px\\\" fxFlex.gt-md>\\r\\n            <mat-label translate>device-profile.schedule-time-from<\\/mat-label>\\r\\n            <mat-datetimepicker-toggle [for]=\\\"startTimePicker\\\" matPrefix><\\/mat-datetimepicker-toggle>\\r\\n            <mat-datetimepicker #startTimePicker type=\\\"time\\\" openOnFocus=\\\"true\\\"><\\/mat-datetimepicker>\\r\\n            <input required matInput formControlName=\\\"startsOn\\\" [matDatetimepicker]=\\\"startTimePicker\\\">\\r\\n          <\\/mat-form-field>\\r\\n          <mat-form-field fxFlex.xs fxFlex.sm=\\\"150px\\\" fxFlex.md=\\\"150px\\\" fxFlex.gt-md>\\r\\n            <mat-label translate>device-profile.schedule-time-to<\\/mat-label>\\r\\n            <mat-datetimepicker-toggle [for]=\\\"endTimePicker\\\" matPrefix><\\/mat-datetimepicker-toggle>\\r\\n            <mat-datetimepicker #endTimePicker type=\\\"time\\\" openOnFocus=\\\"true\\\"><\\/mat-datetimepicker>\\r\\n            <input required matInput formControlName=\\\"endsOn\\\" [matDatetimepicker]=\\\"endTimePicker\\\">\\r\\n          <\\/mat-form-field>\\r\\n        <\\/div>\\r\\n        <div fxFlex fxLayoutAlign=\\\"center center\\\" style=\\\"margin: auto\\\">\\r\\n          <div style=\\\"text-align: center\\\"\\r\\n               [innerHTML]=\\\"getSchedulerRangeText(alarmScheduleForm)\\\">\\r\\n          <\\/div>\\r\\n        <\\/div>\\r\\n      <\\/div>\\r\\n    <\\/section>\\r\\n    <section *ngIf=\\\"alarmScheduleForm.get(\\'type\\').value === alarmScheduleType.CUSTOM\\\">\\r\\n      <div class=\\\"tb-small\\\" style=\\\"margin-bottom: 0.5em\\\" translate>device-profile.schedule-days<\\/div>\\r\\n\\r\\n      <div *ngFor=\\\"let day of allDays\\\" fxLayout=\\\"column\\\" formArrayName=\\\"items\\\" fxLayoutGap=\\\"1em\\\">\\r\\n        <div fxLayout.xs=\\\"column\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\" [formGroupName]=\\\"\\'\\'+day\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutAlign.xs=\\\"center start\\\">\\r\\n          <mat-checkbox formControlName=\\\"enabled\\\" fxFlex=\\\"17\\\" (change)=\\\"changeCustomScheduler($event, day)\\\">\\r\\n            {{ dayOfWeekTranslationsArray[day] | translate }}\\r\\n          <\\/mat-checkbox>\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\" fxFlex>\\r\\n            <mat-form-field fxFlex.xs fxFlex.sm=\\\"100px\\\" fxFlex.md=\\\"100px\\\">\\r\\n              <mat-label translate>device-profile.schedule-time-from<\\/mat-label>\\r\\n              <mat-datetimepicker-toggle [for]=\\\"startTimePicker\\\" matPrefix><\\/mat-datetimepicker-toggle>\\r\\n              <mat-datetimepicker #startTimePicker type=\\\"time\\\" openOnFocus=\\\"true\\\"><\\/mat-datetimepicker>\\r\\n              <input required matInput formControlName=\\\"startsOn\\\" [matDatetimepicker]=\\\"startTimePicker\\\">\\r\\n            <\\/mat-form-field>\\r\\n            <mat-form-field fxFlex.xs fxFlex.sm=\\\"100px\\\" fxFlex.md=\\\"100px\\\">\\r\\n              <mat-label translate>device-profile.schedule-time-to<\\/mat-label>\\r\\n              <mat-datetimepicker-toggle [for]=\\\"endTimePicker\\\" matPrefix><\\/mat-datetimepicker-toggle>\\r\\n              <mat-datetimepicker #endTimePicker type=\\\"time\\\" openOnFocus=\\\"true\\\"><\\/mat-datetimepicker>\\r\\n              <input required matInput formControlName=\\\"endsOn\\\" [matDatetimepicker]=\\\"endTimePicker\\\">\\r\\n            <\\/mat-form-field>\\r\\n          <\\/div>\\r\\n          <div fxFlex fxLayoutAlign=\\\"center center\\\"\\r\\n               style=\\\"text-align: center\\\"\\r\\n               [innerHTML]=\\\"getSchedulerRangeText(itemsSchedulerForm().at(day))\\\">\\r\\n          <\\/div>\\r\\n        <\\/div>\\r\\n      <\\/div>\\r\\n\\r\\n      <tb-error style=\\\"display: block;\\\" [error]=\\\"alarmScheduleForm.get(\\'items\\').hasError(\\'dayOfWeeks\\')\\r\\n                  ? (\\'device-profile.schedule-days-of-week-required\\' | translate) : \\'\\'\\\"><\\/tb-error>\\r\\n    <\\/section>\\r\\n  <\\/div>\\r\\n<\\/section>\\r\\n<\\/div>\\r\\n    <\\/fieldset>\\r\\n  <\\/div>\\r\\n  <div mat-dialog-actions fxLayoutAlign=\\\"end center\\\">\\r\\n    <button mat-button color=\\\"primary\\\"\\r\\n            type=\\\"button\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async)\\\"\\r\\n            (click)=\\\"cancel()\\\" cdkFocusInitial>\\r\\n      {{ (readonly ? \\'action.close\\' : \\'action.cancel\\') | translate }}\\r\\n    <\\/button>\\r\\n    <button mat-raised-button color=\\\"primary\\\"\\r\\n            *ngIf=\\\"!readonly\\\"\\r\\n            type=\\\"submit\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async) || alarmScheduleForm.invalid || !alarmScheduleForm.dirty\\\">\\r\\n      {{ \\'action.save\\' | translate }}\\r\\n    <\\/button>\\r\\n  <\\/div>\\r\\n<\\/form>\\r\\n\";\n        const AlarmScheduleType = {\n            ANY_TIME: 'ANY_TIME',\n            SPECIFIC_TIME: 'SPECIFIC_TIME',\n            CUSTOM: 'CUSTOM'\n        };\n        const AlarmScheduleTypeTranslationMap = new Map(\n            [\n                [AlarmScheduleType.ANY_TIME,\n                    'device-profile.schedule-any-time'\n                ],\n                [AlarmScheduleType.SPECIFIC_TIME,\n                    'device-profile.schedule-specific-time'\n                ],\n                [AlarmScheduleType.CUSTOM,\n                    'device-profile.schedule-custom'\n                ]\n            ]);\n        const dayOfWeekTranslations = new Array(\n            'device-profile.schedule-day.monday',\n            'device-profile.schedule-day.tuesday',\n            'device-profile.schedule-day.wednesday',\n            'device-profile.schedule-day.thursday',\n            'device-profile.schedule-day.friday',\n            'device-profile.schedule-day.saturday',\n            'device-profile.schedule-day.sunday'\n        );\n\n        function editScheduleDialogCtrl(instace) {\n            let vm = instace;\n            vm.alarmScheduleTypes = Object.keys(\n                AlarmScheduleType);\n            vm.alarmScheduleType = AlarmScheduleType;\n            vm.alarmScheduleTypeTranslate =\n                AlarmScheduleTypeTranslationMap;\n            vm.dayOfWeekTranslationsArray =\n                dayOfWeekTranslations;\n            vm.dayOfWeekTranslationsArray =\n                dayOfWeekTranslations;\n            vm.allDays = Array(7).fill(0).map((x, i) =>\n                i);\n            vm.firstRowDays = Array(4).fill(0).map((x,\n                i) => i);\n            vm.secondRowDays = Array(3).fill(0).map((x,\n                i) => i + 4);\n            vm.defaultItems = Array.from({\n                length: 7\n            }, (value, i) => ({\n                enabled: true,\n                dayOfWeek: i + 1\n            }));\n            vm.propagateChange = (v) => {};\n\n            function validateDayOfWeeks(control) {\n                const dayOfWeeks = control.value;\n                if (!dayOfWeeks || !dayOfWeeks.length ||\n                    !dayOfWeeks.find(v => v === true)) {\n                    return {\n                        dayOfWeeks: true\n                    };\n                }\n                return null;\n            }\n\n            vm.validateDayOfWeeks = validateDayOfWeeks;\n\n            function defaultItemsScheduler(index) {\n                return vm.fb.group({\n                    enabled: [true],\n                    dayOfWeek: [index + 1],\n                    startsOn: [0, vm.validators\n                        .required\n                    ],\n                    endsOn: [0, vm.validators\n                        .required\n                    ]\n                });\n            }\n\n            vm.defaultItemsScheduler =\n                defaultItemsScheduler;\n\n            function validateItems(control) {\n                const items = control.value;\n                if (!items || !items.length || !items\n                    .find(v => v.enabled === true)) {\n                    return {\n                        dayOfWeeks: true\n                    };\n                }\n                return null;\n            }\n\n            vm.validateItems = validateItems;\n\n            function getDefaultTimezone() {\n\n            }\n\n            vm.getDefaultTimezone = getDefaultTimezone;\n\n            function updateValidators(type,\n                changedType = false) {\n                switch (type) {\n                    case AlarmScheduleType.ANY_TIME:\n                        vm.alarmScheduleForm.get(\n                            'timezone').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'daysOfWeek').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'startsOn').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'endsOn').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'items').disable({\n                            emitEvent: false\n                        });\n                        break;\n                    case AlarmScheduleType\n                    .SPECIFIC_TIME:\n                        vm.alarmScheduleForm.get(\n                            'timezone').enable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'daysOfWeek').enable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'startsOn').enable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'endsOn').enable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'items').disable({\n                            emitEvent: false\n                        });\n                        break;\n                    case AlarmScheduleType.CUSTOM:\n                        vm.alarmScheduleForm.get(\n                            'timezone').enable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'daysOfWeek').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'startsOn').disable({\n                            emitEvent: false\n                        });\n                        vm.alarmScheduleForm.get(\n                            'endsOn').disable({\n                            emitEvent: false\n                        });\n                        if (changedType) {\n                            vm.alarmScheduleForm.get(\n                                'items').enable({\n                                emitEvent: false\n                            });\n                        }\n                        break;\n                }\n            }\n\n            vm.updateValidators = updateValidators;\n\n            function changeCustomScheduler($event,\n                index) {\n                const value = $event.checked;\n                vm.disabledSelectedTime(value, index,\n                    true);\n            }\n\n            vm.changeCustomScheduler =\n                changeCustomScheduler;\n\n            function disabledSelectedTime(enable, index,\n                emitEvent = false) {\n                if (enable) {\n                    vm.itemsSchedulerForm().at(index)\n                        .get('startsOn').enable({\n                            emitEvent: false\n                        });\n                    vm.itemsSchedulerForm().at(index)\n                        .get('endsOn').enable({\n                            emitEvent\n                        });\n                } else {\n                    vm.itemsSchedulerForm().at(index)\n                        .get('startsOn').disable({\n                            emitEvent: false\n                        });\n                    vm.itemsSchedulerForm().at(index)\n                        .get('endsOn').disable({\n                            emitEvent\n                        });\n                }\n            }\n\n            vm.disabledSelectedTime =\n                disabledSelectedTime;\n\n            function getSchedulerRangeText(control) {\n                return getAlarmScheduleRangeText(control\n                    .get('startsOn').value, control\n                    .get('endsOn').value);\n            }\n\n            vm.getSchedulerRangeText =\n                getSchedulerRangeText;\n\n            function timeOfDayToMoment(date) {\n                if (typeof date === 'number' || date ===\n                    null) {\n                    return moment([1970, 0, 1, 0, 0, 0,\n                        0\n                    ]);\n                }\n                return moment([1970, 0, 1, date\n                    .getHours(), date\n                    .getMinutes(), 0, 0\n                ]);\n            }\n\n            vm.timeOfDayToMoment = timeOfDayToMoment;\n\n            function getAlarmScheduleRangeText(startsOn,\n                endsOn) {\n                const start = timeOfDayToMoment(\n                    startsOn);\n                const end = timeOfDayToMoment(endsOn);\n                if (start < end) {\n                    return `<span><span class=\"nowrap\">${start.format('hh:mm A')}</span> – <span class=\"nowrap\">${end.format('hh:mm A')}</span></span>`;\n                } else if (start.valueOf() === 0 && end\n                    .valueOf() === 0 || start.isSame(\n                        moment([1970, 0])) && end\n                    .isSame(moment([1970, 0]))) {\n                    return '<span><span class=\"nowrap\">12:00 AM</span> – <span class=\"nowrap\">12:00 PM</span></span>';\n                }\n                return `<span><span class=\"nowrap\">12:00 AM</span> – <span class=\"nowrap\">${end.format('hh:mm A')}</span>` +\n                    ` and <span class=\"nowrap\">${start.format('hh:mm A')}</span> – <span class=\"nowrap\">12:00 PM</span></span>`;\n            }\n\n            vm.getAlarmScheduleRangeText =\n                getAlarmScheduleRangeText;\n\n            function weeklyRepeatControl(index) {\n                return vm.alarmScheduleForm.get(\n                    'daysOfWeek').at(index);\n            }\n\n            vm.weeklyRepeatControl =\n                weeklyRepeatControl;\n\n            function itemsSchedulerForm() {\n                return vm.alarmScheduleForm.get(\n                    'items');\n            }\n\n            vm.itemsSchedulerForm = itemsSchedulerForm;\n\n            function save() {\n                const value = vm.alarmScheduleForm\n                    .value;\n                if (value.daysOfWeek !== undefined) {\n                    value.daysOfWeek = value.daysOfWeek\n                        .map((day, index) => day ?\n                            index + 1 : null)\n                        .filter(day => !!day);\n                }\n                if (value.startsOn) {\n                    value.startsOn =\n                        timeOfDayToUTCTimestamp(value\n                            .startsOn);\n                }\n                if (value.endsOn) {\n                    value.endsOn =\n                        timeOfDayToUTCTimestamp(value\n                            .endsOn);\n                }\n                if (value.items !== undefined) {\n                    value.items = vm.alarmScheduleForm\n                        .getRawValue().items;\n                    value.items = value.items.map((\n                        item) => {\n                        return {\n                            ...item,\n                            startsOn: timeOfDayToUTCTimestamp(\n                                item\n                                .startsOn),\n                            endsOn: timeOfDayToUTCTimestamp(\n                                item.endsOn)\n                        };\n                    });\n                }\n                vm.dialogRef.close(value);\n            }\n\n            vm.save = save;\n\n            function cancel() {\n\n                vm.dialogRef.close(null);\n            }\n\n            vm.cancel = cancel;\n\n            function updateModel() {\n                const value = vm.alarmScheduleForm\n                    .value;\n                if (value.daysOfWeek !== undefined) {\n                    value.daysOfWeek = value.daysOfWeek\n                        .map((day, index) => day ?\n                            index + 1 : null)\n                        .filter(day => !!day);\n                }\n                if (value.startsOn !== undefined &&\n                    value.startsOn !== 0) {\n                    value.startsOn =\n                        timeOfDayToUTCTimestamp(value\n                            .startsOn);\n                }\n                if (value.endsOn !== undefined && value\n                    .endsOn !== 0) {\n                    value.endsOn =\n                        timeOfDayToUTCTimestamp(value\n                            .endsOn);\n                }\n                if (value.items !== undefined) {\n                    value.items = vm.alarmScheduleForm\n                        .getRawValue().items;\n                    value.items = value.items.map((\n                        item) => {\n                        return {\n                            ...item,\n                            startsOn: timeOfDayToUTCTimestamp(\n                                item\n                                .startsOn),\n                            endsOn: timeOfDayToUTCTimestamp(\n                                item.endsOn)\n                        };\n                    });\n                }\n                return value;\n            }\n\n            vm.alarmScheduleForm = vm.fb.group({\n                type: [AlarmScheduleType\n                    .ANY_TIME, vm.validators\n                    .required\n                ],\n                timezone: [null, vm.validators\n                    .required\n                ],\n                daysOfWeek: vm.fb.array(\n                    new Array(7).fill(\n                        false),\n                    validateDayOfWeeks),\n                startsOn: [0, vm.validators\n                    .required\n                ],\n                endsOn: [0, vm.validators\n                    .required\n                ],\n                items: vm.fb.array(Array.from({\n                            length: 7\n                        }, (value, i) =>\n                        defaultItemsScheduler(\n                            i)),\n                    validateItems)\n            });\n            if (vm.data.schedule) {\n                let schedule = vm.data.schedule;\n                vm.initedData = true;;\n                if (schedule === null || schedule ===\n                    undefined) {\n                    schedule = {\n                        type: \"ANY_TIME\"\n                    }\n                }\n                switch (schedule.type) {\n                    case \"SPECIFIC_TIME\":\n                        let daysOfWeek = new Array(7)\n                            .fill(false);\n                        if (schedule.daysOfWeek !==\n                            undefined) {\n                            daysOfWeek = daysOfWeek.map(\n                                (item, index) =>\n                                schedule.daysOfWeek\n                                .indexOf(index +\n                                    1) > -1);\n                        }\n                        vm.alarmScheduleForm\n                            .patchValue({\n                                type: schedule.type,\n                                timezone: schedule\n                                    .timezone,\n                                daysOfWeek,\n                                startsOn: utcTimestampToTimeOfDay(\n                                    schedule\n                                    .startsOn),\n                                endsOn: utcTimestampToTimeOfDay(\n                                    schedule\n                                    .endsOn)\n                            }, {\n                                emitEvent: false\n                            });\n                        break;\n                    case \"CUSTOM\":\n                        if (schedule.items) {\n                            const alarmDays = [];\n                            schedule.items.sort((a,\n                                        b) => a\n                                    .dayOfWeek -\n                                    b.dayOfWeek)\n                                .forEach((item,\n                                    index) => {\n                                    disabledSelectedTime\n                                        (item\n                                            .enabled,\n                                            index);\n                                    alarmDays.push({\n                                        enabled: item\n                                            .enabled,\n                                        startsOn: utcTimestampToTimeOfDay(\n                                            item\n                                            .startsOn\n                                        ),\n                                        endsOn: utcTimestampToTimeOfDay(\n                                            item\n                                            .endsOn\n                                        )\n                                    });\n                                });\n                            vm.alarmScheduleForm\n                                .patchValue({\n                                    type: schedule\n                                        .type,\n                                    timezone: schedule\n                                        .timezone,\n                                    items: alarmDays\n                                }, {\n                                    emitEvent: false\n                                });\n                        }\n                        break;\n                    default:\n                        vm.alarmScheduleForm.patchValue(\n                            schedule || undefined, {\n                                emitEvent: false\n                            });\n                }\n                vm.updateValidators(vm.data.schedule\n                    .type, true);\n                // vm.alarmScheduleForm.updateValueAndValidity();\n\n            }\n            vm.alarmScheduleForm.get('type')\n                .valueChanges.subscribe((type) => {\n                    //   getDefaultTimezone().subscribe((defaultTimezone) => {\n                    if (vm.initedData) {\n                        vm.initedData = false;\n                        vm.alarmScheduleForm.reset({\n                            type,\n                            items: vm.defaultItems,\n                            timezone: null\n                        }, {\n                            emitEvent: false\n                        });\n                    }\n                    vm.updateValidators(type, true);\n                        vm.alarmScheduleForm.updateValueAndValidity();\n                    //   });\n                });\n        }\n\n        widgetContext.customDialog.customDialog(\n            htmlTemplate,\n            editScheduleDialogCtrl, {\n                schedule: control.value\n            }).subscribe(resp => {\n            if (resp !== null) {\n                control.patchValue(resp);\n                widgetContext.detectChanges();\n                vm.alarmProfile\n                    .updateValueAndValidity();\n            }\n        });\n\n    };\n\n\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    function deviceProfileAlarmValidator(control) {\n        const deviceProfileAlarm = control.value;\n        if (deviceProfileAlarm && deviceProfileAlarm.alarmType && deviceProfileAlarm.createAlarmRules) {\n            if (deviceProfileAlarm.createAlarmRules.length) {\n                let alarmRulesValid = true;\n                for (const severity of deviceProfileAlarm.createAlarmRules) {\n                    const alarmRule = severity.alarmRule;\n                    if (!alarmRuleValid(alarmRule)) {\n                        alarmRulesValid = false;\n                        break;\n                    }\n                }\n                if (alarmRulesValid) {\n                    if (deviceProfileAlarm.clearRule && deviceProfileAlarm.clearRule.schedule && !alarmRuleValid(deviceProfileAlarm.clearRule)) {\n                        alarmRulesValid = false;\n                    }\n                }\n                if (alarmRulesValid) {\n                    return null;\n                }\n            }\n        }\n        return {\n            deviceProfileAlarm: true\n        };\n    }\n\n    function alarmRuleValid(alarmRule) {\n        if (!alarmRule || !alarmRule.condition || !alarmRule.condition.condition || !alarmRule.condition.condition.length) {\n            return false;\n        }\n        return true;\n    }\n\n    vm.createAlarmRulesFormArray = function(index) {\n\n    }\n\n\n    vm.separatorKeysCodes = [13, 188, 186];\n    vm.addRelationType = function(event, control) {\n        const input = event.input;\n        let value = event.value;\n        if ((value || '').trim()) {\n            value = value.trim();\n            let keys = control.get('propagateRelationTypes').value;\n            if (!keys || keys.indexOf(value) === -1) {\n                if (!keys) {\n                    keys = [];\n                }\n                keys.push(value);\n                control.get('propagateRelationTypes').setValue(keys, { emitEvent: true });\n            }\n        }\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    vm.removeRelationType = function(key, control) {\n        const keys = control.value;\n        const index = keys.indexOf(key);\n        if (index >= 0) {\n            keys.splice(index, 1);\n            control.setValue(keys, {\n                emitEvent: true\n            });\n        }\n    }\n\n    vm.addCreateAlarmRule = function(\n        createAlarmRulesArray) {\n        createAlarmRulesArray.push(vm.fb.group({\n            severity: [\n                getFirstUnusedSeverity(\n                    createAlarmRulesArray\n                ), vm.validators\n                .required\n            ],\n            alarmRule: vm.fb.group({\n                condition: vm.fb\n                    .group({\n                            condition: [\n                                []\n                            ],\n                            spec: [{\n                                type: \"SIMPLE\"\n                            }]\n                        }, vm\n                        .validators\n                        .required),\n                schedule: [null],\n                alarmDetails: [null]\n            }, alarmRuleValidator)\n        }));\n    };\n\n    vm.conditionSet = function(createAlarmRuleControl) {\n        return createAlarmRuleControl.value && (\n            createAlarmRuleControl.value.alarmRule ?\n            createAlarmRuleControl.value.alarmRule\n            .condition.condition.length :\n            createAlarmRuleControl.value.condition\n            .condition.length);\n    }\n    \n    vm.createAlarmText = function(createAlarmRuleValue) {\n        const keyFilters = createAlarmRuleValue.alarmRule.condition.condition;\n        const filtersText = keyFilters.map(keyFilter=>keyFilterToText(keyFilter,\n        (keyFilters.length > 1 ? \"AND\" : undefined)));\n        let result;\n        if (filtersText.length > 1) {\n            const andText = widgetContext.translate.instant('filter.operation.and');\n            result = filtersText.join(' <span class=\"tb-filter-complex-operation\">' + andText + '</span> ');\n        } else {\n            result = filtersText[0];\n        }\n        return result;\n    }\n    \n    vm.clearAlarmText = function(createAlarmRuleValue) {\n        const keyFilters = createAlarmRuleValue.condition.condition;\n        const filtersText = keyFilters.map(keyFilter => \n            keyFilterToText(keyFilter, (keyFilters.length > 1 ? \"AND\" : undefined)));\n        let result;\n        if (filtersText.length > 1) {\n            const andText = widgetContext.translate.instant('filter.operation.and');\n            result = filtersText.join(' <span class=\"tb-filter-complex-operation\">' + andText + '</span> ');\n        } else {\n            result = filtersText[0];\n        }\n        return result;\n    }\n    \n    function keyFilterToText (keyFilter, parentComplexOperation) {\n        const keyFilterPredicate = keyFilter.predicate[0];\n        return keyFilterPredicateToText(keyFilter, keyFilterPredicate, parentComplexOperation);\n    }\n    \n    function keyFilterPredicateToText(keyFilter, keyFilterPredicate, parentComplexOperation) {\n      if (keyFilterPredicate.type === \"COMPLEX\") {\n          const complexPredicate = keyFilterPredicate;\n          const complexOperation = complexPredicate.operation;\n          const complexPredicatesText = complexPredicate.predicates.map(predicate => keyFilterPredicateToText(keyFilter, predicate, complexOperation));\n          if (complexPredicatesText.length > 1) {\n              const operationText = complexOperation;\n              let result = complexPredicatesText.join(' <span class=\"tb-filter-complex-operation\">' + operationText + '</span> ');\n              if (complexOperation === \"OR\" && parentComplexOperation && parentComplexOperation !== \"OR\") {\n                  result = `<span class=\"tb-filter-bracket\"><span class=\"tb-left-bracket\">(</span>${result}<span class=\"tb-right-bracket\">)</span></span>`;\n              }\n              return result;\n          } else {\n              return complexPredicatesText[0];\n          }\n      }  else {\n          return simpleKeyFilterPredicateToText(keyFilter, keyFilterPredicate);\n      }\n    }\n    \n    function simpleKeyFilterPredicateToText (keyFilter, keyFilterPredicate) {\n        const key = keyFilter.key.key;\n        let operation;\n        let value;\n        const val = keyFilterPredicate.value;\n        const dynamicValue = !!val.dynamicValue && !!val.dynamicValue.sourceType;\n        if (dynamicValue) {\n            value = '<span class=\"tb-filter-dynamic-value\"><span class=\"tb-filter-dynamic-source\">' + 'current device' + '</span>';\n            value += '.<span class=\"tb-filter-value\">' + val.dynamicValue.sourceAttribute + '</span></span>';\n        }\n        switch (keyFilterPredicate.type) {\n            case \"STRING\":\n                operation = keyFilterPredicate.operation;\n                if (keyFilterPredicate.ignoreCase) {\n                    operation += ' ' + widgetContext.translate.instant('filter.ignore-case');\n                }\n                if (!dynamicValue) {\n                    value = `'${keyFilterPredicate.value.defaultValue}'`;\n                }\n                break;\n            case \"NUMERIC\":\n                operation = keyFilterPredicate.operation;\n                if (!dynamicValue) {\n                    if (keyFilter.valueType === \"DATE_TIME\") {\n                        value = new Date(keyFilter.value.defaultValue);\n                    } else {\n                        value = keyFilterPredicate.value.defaultValue + \"\";\n                    }\n                }\n                break;\n            case \"BOOLEAN\":\n                operation = keyFilterPredicate.operation;\n                value = widgetContext.translate.instant(keyFilterPredicate.value.defaultValue ? 'value.true' : 'value.false');\n                break;\n        }\n        if (!dynamicValue) {\n            value = `<span class=\"tb-filter-value\">${value}</span>`;\n        }\n        return `<span class=\"tb-filter-predicate\"><span class=\"tb-filter-entity-key\">${key}</span> <span class=\"tb-filter-simple-operation\">${operation}</span> ${value}</span>`;\n    }\n\n    vm.openEditDetailsDialog = function($event, alarmDetailsControl) {\n        let htmlTemplate =\n            \"<form [formGroup]=\\\"editDetailsFormGroup\\\" (ngSubmit)=\\\"save()\\\" style=\\\"min-width: 800px;\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <h2>{{ \\'device-profile.alarm-rule-details\\' | translate }}<\\/h2>\\r\\n    <span fxFlex><\\/span>\\r\\n    <button mat-icon-button\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            type=\\\"button\\\">\\r\\n      <mat-icon class=\\\"material-icons\\\">close<\\/mat-icon>\\r\\n    <\\/button>\\r\\n  <\\/mat-toolbar>\\r\\n  <mat-progress-bar color=\\\"warn\\\" mode=\\\"indeterminate\\\" *ngIf=\\\"isLoading$ | async\\\">\\r\\n  <\\/mat-progress-bar>\\r\\n  <div mat-dialog-content>\\r\\n    <fieldset [disabled]=\\\"isLoading$ | async\\\">\\r\\n      <div fxFlex fxLayout=\\\"column\\\">\\r\\n        <mat-form-field class=\\\"mat-block\\\">\\r\\n          <mat-label translate>device-profile.alarm-details<\\/mat-label>\\r\\n          <textarea matInput formControlName=\\\"alarmDetails\\\" rows=\\\"5\\\"><\\/textarea>\\r\\n        <\\/mat-form-field>\\r\\n      <\\/div>\\r\\n    <\\/fieldset>\\r\\n  <\\/div>\\r\\n  <div mat-dialog-actions fxLayoutAlign=\\\"end center\\\">\\r\\n    <button mat-button color=\\\"primary\\\"\\r\\n            type=\\\"button\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async)\\\"\\r\\n            (click)=\\\"cancel()\\\" cdkFocusInitial>\\r\\n      {{ \\'action.cancel\\' | translate }}\\r\\n    <\\/button>\\r\\n    <button *ngIf=\\\"!data.readonly\\\" mat-raised-button color=\\\"primary\\\"\\r\\n            type=\\\"submit\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async) || editDetailsFormGroup.invalid || !editDetailsFormGroup.dirty\\\">\\r\\n      {{ \\'action.save\\' | translate }}\\r\\n    <\\/button>\\r\\n  <\\/div>\\r\\n<\\/form>\"\n        if ($event) {\n            $event.stopPropagation();\n        }\n\n        function openEditDetailsDialogCtrl(instace) {\n            let vm = instace;\n            vm.alarmDetails = vm.data.alarmDetails\n                .value;\n            vm.submitted = false;\n            vm.editDetailsFormGroup = vm.fb.group({\n                alarmDetails: [vm.alarmDetails]\n            });\n            if (vm.data.readonly) {\n                vm.editDetailsFormGroup.disable();\n            }\n\n            vm.cancel = function() {\n\n                vm.dialogRef.close(null);\n            };\n\n            vm.save = function() {\n                vm.submitted = true;\n                vm.alarmDetails = vm\n                    .editDetailsFormGroup.get(\n                        'alarmDetails').value;\n                vm.dialogRef.close(vm.alarmDetails);\n            };\n        };\n\n        widgetContext.customDialog.customDialog(\n            htmlTemplate,\n            openEditDetailsDialogCtrl, {\n                alarmDetails: alarmDetailsControl,\n                readonly: false\n            }).subscribe(alarmDetails => {\n            if (alarmDetails !== null) {\n                alarmDetailsControl.patchValue(\n                    alarmDetails);\n                widgetContext.detectChanges();\n                vm.alarmProfile\n                    .updateValueAndValidity();\n            }\n        });\n    };\n\n    vm.removeCreateAlarmRule = function(createAlarmRulesArray, index) {\n        createAlarmRulesArray.removeAt(index);\n    };\n\n    function alarmRuleValidator(control) {\n        const alarmRule = control.value;\n        return alarmRuleValid(alarmRule) ? null : {\n            alarmRule: true\n        };\n    }\n\n    getFirstUnusedSeverity = function(createAlarmRulesArray) {\n        for (const severityKey of Object.keys(\n                AlarmSeverity)) {\n            let severity = AlarmSeverity[severityKey];\n            if (!createAlarmRulesArray.controls\n                .length) {\n                return severity;\n            } else if (!createAlarmRulesArray.controls\n                .some(ctrl => {\n                    return ctrl.value.severity ===\n                        severity;\n                })) {\n                return severity;\n            }\n        }\n        return null;\n    };\n\n    vm.save = function() {\n        let data = vm.alarmProfile.value;\n        data.alarms.forEach(alarm => {\n            alarm.createRules = {};\n            alarm.createAlarmRules.forEach(\n                condition => {\n                    alarm.createRules[condition.severity] = condition.alarmRule;\n                }\n            )\n        });\n        let alarmProfile = {...vm.asset,...{\n            name: data.alarmProfileName,\n            label: data.alarmProfileName,\n            type: \"alarmProfile\"\n        }};\n\n        widgetContext.assetService.saveAsset(alarmProfile).subscribe(\n            asset => {\n                widgetContext.attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", [{key: \"alarmConfig\", value: data}])\n                    .subscribe(resp => {\n                        widgetContext.updateAliases();\n                        vm.dialogRef.close(\n                            null);\n                })\n            }\n        );\n    };\n\n    vm.openFilterDialog = function($event,\n        createAlarmRuleControl, isClearAlarm) {\n        if ($event) {\n            $event.stopPropagation();\n        }\n        const html =\"<form *ngIf=\\\"conditionFormGroup\\\"\\r\\n    [formGroup]=\\\"conditionFormGroup\\\" (ngSubmit)=\\\"save()\\\"\\r\\n    style=\\\"min-width: 800px;\\\">\\r\\n    <mat-toolbar color=\\\"primary\\\">\\r\\n        <h2>{{ (readonly ? \\'device-profile.alarm-rule-condition\\' : \\'device-profile.edit-alarm-rule-condition\\') | translate }}\\r\\n        <\\/h2>\\r\\n        <span fxFlex><\\/span>\\r\\n        <button mat-icon-button (click)=\\\"cancel()\\\"\\r\\n            type=\\\"button\\\">\\r\\n            <mat-icon class=\\\"material-icons\\\">close\\r\\n            <\\/mat-icon>\\r\\n        <\\/button>\\r\\n    <\\/mat-toolbar>\\r\\n    <mat-progress-bar color=\\\"warn\\\" mode=\\\"indeterminate\\\"\\r\\n        *ngIf=\\\"isLoading$ | async\\\">\\r\\n    <\\/mat-progress-bar>\\r\\n    <div mat-dialog-content>\\r\\n        <fieldset [disabled]=\\\"isLoading$ | async\\\">\\r\\n            <div fxFlex fxLayout=\\\"column\\\">\\r\\n                <section fxLayout=\\\"column\\\">\\r\\n                    <mat-accordion [multi]=\\\"true\\\">\\r\\n                        <mat-expansion-panel\\r\\n                            [expanded]=\\\"true\\\">\\r\\n                            <mat-expansion-panel-header>\\r\\n                                <mat-panel-title>\\r\\n                                    <div translate>\\r\\n                                        filter.key-filters\\r\\n                                    <\\/div>\\r\\n                                <\\/mat-panel-title>\\r\\n                            <\\/mat-expansion-panel-header>\\r\\n                            <div fxLayout=\\\"row\\\">\\r\\n                                <span fxFlex=\\\"8\\\"><\\/span>\\r\\n                                <div fxLayout=\\\"row\\\"\\r\\n                                    fxLayoutAlign=\\\"start center\\\"\\r\\n                                    fxFlex=\\\"92\\\">\\r\\n                                    <label fxFlex translate\\r\\n                                        class=\\\"tb-title no-padding\\\">filter.key-name<\\/label>\\r\\n                                    <label fxFlex translate\\r\\n                                        class=\\\"tb-title no-padding\\\">filter.key-type.key-type<\\/label>\\r\\n                                    <span\\r\\n                                        [fxShow]=\\\"!disabled\\\"\\r\\n                                        style=\\\"min-width: 80px;\\\">&nbsp;<\\/span>\\r\\n                                    <span\\r\\n                                        [fxShow]=\\\"disabled\\\"\\r\\n                                        style=\\\"min-width: 40px;\\\">&nbsp;<\\/span>\\r\\n                                <\\/div>\\r\\n                            <\\/div>\\r\\n                            <mat-divider><\\/mat-divider>\\r\\n                            <div class=\\\"key-filter-list\\\">\\r\\n                                <div fxLayout=\\\"row\\\"\\r\\n                                    fxLayoutAlign=\\\"start center\\\"\\r\\n                                    style=\\\"max-height: 40px;\\\"\\r\\n                                    formArrayName=\\\"condition\\\"\\r\\n                                    *ngFor=\\\"let keyFilterControl of keyFiltersFormArray().controls; let $index = index\\\">\\r\\n                                    <div fxFlex=\\\"8\\\"\\r\\n                                        class=\\\"filters-operation\\\">\\r\\n                                        <span\\r\\n                                            *ngIf=\\\"$index > 0\\\"\\r\\n                                            translate>filter.operation.and<\\/span>\\r\\n                                    <\\/div>\\r\\n                                    <div fxLayout=\\\"column\\\" \\r\\n                                        fxFlex=\\\"92\\\" *ngIf=\\\"keyFilterControl\\\">\\r\\n                                        <div fxLayout=\\\"row\\\" [formControl]=\\\"keyFilterControl\\\"\\r\\n                                            fxLayoutAlign=\\\"start center\\\">\\r\\n                                            <div fxFlex>\\r\\n                                                {{ keyFilterControl.value.key.key }}\\r\\n                                            <\\/div>\\r\\n                                            <div fxFlex\\r\\n                                                translate>\\r\\n                                                {{ entityKeyTypeTranslations.get(keyFilterControl.value.key.type) }}\\r\\n                                            <\\/div>\\r\\n                                            <button\\r\\n                                                mat-icon-button\\r\\n                                                color=\\\"primary\\\"\\r\\n                                                type=\\\"button\\\"\\r\\n                                                (click)=\\\"editKeyFilter($index)\\\"\\r\\n                                                matTooltip=\\\"{{ (disabled ? \\'filter.key-filter\\' : \\'filter.edit-key-filter\\') | translate }}\\\"\\r\\n                                                matTooltipPosition=\\\"above\\\">\\r\\n                                                <mat-icon>\\r\\n                                                    {{disabled ? \\'more_vert\\' : \\'edit\\'}}\\r\\n                                                <\\/mat-icon>\\r\\n                                            <\\/button>\\r\\n                                            <button\\r\\n                                                mat-icon-button\\r\\n                                                color=\\\"primary\\\"\\r\\n                                                [fxShow]=\\\"!disabled\\\"\\r\\n                                                type=\\\"button\\\"\\r\\n                                                (click)=\\\"removeKeyFilter($index)\\\"\\r\\n                                                matTooltip=\\\"{{ \\'filter.remove-key-filter\\' | translate }}\\\"\\r\\n                                                matTooltipPosition=\\\"above\\\">\\r\\n                                                <mat-icon>\\r\\n                                                    close\\r\\n                                                <\\/mat-icon>\\r\\n                                            <\\/button>\\r\\n                                        <\\/div>\\r\\n                                        <mat-divider>\\r\\n                                        <\\/mat-divider>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <span\\r\\n                                    [fxShow]=\\\"!keyFiltersFormArray().length\\\"\\r\\n                                    fxLayoutAlign=\\\"center center\\\"\\r\\n                                    [ngClass]=\\\"{\\'disabled\\': disabled}\\\"\\r\\n                                    class=\\\"no-data-found\\\"\\r\\n                                    translate>filter.no-key-filters<\\/span>\\r\\n                            <\\/div>\\r\\n                            <div style=\\\"margin-top: 16px;\\\">\\r\\n                                <button mat-button\\r\\n                                    mat-raised-button\\r\\n                                    color=\\\"primary\\\"\\r\\n                                    [fxShow]=\\\"!disabled\\\"\\r\\n                                    (click)=\\\"addKeyFilter()\\\"\\r\\n                                    type=\\\"button\\\"\\r\\n                                    matTooltip=\\\"{{ \\'filter.add-key-filter\\' | translate }}\\\"\\r\\n                                    matTooltipPosition=\\\"above\\\">\\r\\n                                    {{ \\'filter.add-key-filter\\' | translate }}\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                        <\\/mat-expansion-panel>\\r\\n                        <mat-expansion-panel\\r\\n                            [expanded]=\\\"true\\\">\\r\\n                            <mat-expansion-panel-header>\\r\\n                                <mat-panel-title>\\r\\n                                    <div translate>\\r\\n                                        filter.preview<\\/div>\\r\\n                                <\\/mat-panel-title>\\r\\n                            <\\/mat-expansion-panel-header>\\r\\n                            <div class=\\\"tb-filter-preview\\\">\\r\\n                                <div class=\\\"tb-filter-text\\\"  [innerHTML]=\\\"createAlarmText(keyFiltersControl)\\\"><\\/div>\\r\\n                            <\\/div>\\r\\n                        <\\/mat-expansion-panel>\\r\\n                    <\\/mat-accordion>\\r\\n                <\\/section>\\r\\n                <section formGroupName=\\\"spec\\\" class=\\\"row\\\">\\r\\n                    <mat-form-field class=\\\"mat-block\\\"\\r\\n                        hideRequiredMarker>\\r\\n                        <mat-label translate>\\r\\n                            device-profile.condition-type\\r\\n                        <\\/mat-label>\\r\\n                        <mat-select formControlName=\\\"type\\\"\\r\\n                            required>\\r\\n                            <mat-option\\r\\n                                *ngFor=\\\"let alarmConditionType of alarmConditionTypes\\\"\\r\\n                                [value]=\\\"alarmConditionType\\\">\\r\\n                                {{alarmConditionType}}\\r\\n                                <!--{{ alarmConditionTypeTranslation.get(alarmConditionType) | translate }}-->\\r\\n                            <\\/mat-option>\\r\\n                        <\\/mat-select>\\r\\n                        <mat-error\\r\\n                            *ngIf=\\\"conditionFormGroup.get(\\'spec.type\\').hasError(\\'required\\')\\\">\\r\\n                            {{ \\'device-profile.condition-type-required\\' | translate }}\\r\\n                        <\\/mat-error>\\r\\n                    <\\/mat-form-field>\\r\\n                    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\"\\r\\n                        *ngIf=\\\"conditionFormGroup.get(\\'spec.type\\').value == AlarmConditionType.DURATION\\\">\\r\\n                        <mat-form-field class=\\\"mat-block\\\"\\r\\n                            hideRequiredMarker fxFlex\\r\\n                            floatLabel=\\\"always\\\">\\r\\n                            <mat-label><\\/mat-label>\\r\\n                            <input type=\\\"number\\\" required\\r\\n                                step=\\\"1\\\" min=\\\"1\\\"\\r\\n                                max=\\\"2147483647\\\" matInput\\r\\n                                placeholder=\\\"{{ \\'device-profile.condition-duration-value\\' | translate }}\\\"\\r\\n                                formControlName=\\\"value\\\">\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.value\\').hasError(\\'required\\')\\\">\\r\\n                                {{ \\'device-profile.condition-duration-value-required\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.value\\').hasError(\\'min\\')\\\">\\r\\n                                {{ \\'device-profile.condition-duration-value-range\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.value\\').hasError(\\'max\\')\\\">\\r\\n                                {{ \\'device-profile.condition-duration-value-range\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.value\\').hasError(\\'pattern\\')\\\">\\r\\n                                {{ \\'device-profile.condition-duration-value-pattern\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                        <\\/mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-block\\\"\\r\\n                            hideRequiredMarker fxFlex\\r\\n                            floatLabel=\\\"always\\\">\\r\\n                            <mat-label><\\/mat-label>\\r\\n                            <mat-select\\r\\n                                formControlName=\\\"unit\\\"\\r\\n                                required\\r\\n                                placeholder=\\\"{{ \\'device-profile.condition-duration-time-unit\\' | translate }}\\\">\\r\\n                                <mat-option\\r\\n                                    *ngFor=\\\"let timeUnit of timeUnits\\\"\\r\\n                                    [value]=\\\"timeUnit\\\">\\r\\n                                    {{timeUnit}}\\r\\n                                    <!--{{ timeUnitTranslations.get(timeUnit) | translate }}-->\\r\\n                                <\\/mat-option>\\r\\n                            <\\/mat-select>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.unit\\').hasError(\\'required\\')\\\">\\r\\n                                {{ \\'device-profile.condition-duration-time-unit-required\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                        <\\/mat-form-field>\\r\\n                    <\\/div>\\r\\n                    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\"\\r\\n                        *ngIf=\\\"conditionFormGroup.get(\\'spec.type\\').value == AlarmConditionType.REPEATING\\\">\\r\\n                        <mat-form-field class=\\\"mat-block\\\"\\r\\n                            hideRequiredMarker fxFlex\\r\\n                            floatLabel=\\\"always\\\">\\r\\n                            <mat-label><\\/mat-label>\\r\\n                            <input type=\\\"number\\\" required\\r\\n                                step=\\\"1\\\" min=\\\"1\\\"\\r\\n                                max=\\\"2147483647\\\" matInput\\r\\n                                placeholder=\\\"{{ \\'device-profile.condition-repeating-value\\' | translate }}\\\"\\r\\n                                formControlName=\\\"count\\\">\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.count\\').hasError(\\'required\\')\\\">\\r\\n                                {{ \\'device-profile.condition-repeating-value-required\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.count\\').hasError(\\'min\\')\\\">\\r\\n                                {{ \\'device-profile.condition-repeating-value-range\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.count\\').hasError(\\'max\\')\\\">\\r\\n                                {{ \\'device-profile.condition-repeating-value-range\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                            <mat-error\\r\\n                                *ngIf=\\\"conditionFormGroup.get(\\'spec.count\\').hasError(\\'pattern\\')\\\">\\r\\n                                {{ \\'device-profile.condition-repeating-value-pattern\\' | translate }}\\r\\n                            <\\/mat-error>\\r\\n                        <\\/mat-form-field>\\r\\n                    <\\/div>\\r\\n                <\\/section>\\r\\n            <\\/div>\\r\\n        <\\/fieldset>\\r\\n    <\\/div>\\r\\n    <div mat-dialog-actions fxLayoutAlign=\\\"end center\\\">\\r\\n        <button mat-button color=\\\"primary\\\" type=\\\"button\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async)\\\"\\r\\n            (click)=\\\"cancel()\\\" cdkFocusInitial>\\r\\n            {{ (readonly ? \\'action.close\\' : \\'action.cancel\\') | translate }}\\r\\n        <\\/button>\\r\\n        <button mat-raised-button color=\\\"primary\\\"\\r\\n            *ngIf=\\\"!readonly\\\" type=\\\"submit\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async) || conditionFormGroup.invalid\\\">\\r\\n            {{ \\'action.save\\' | translate }}\\r\\n        <\\/button>\\r\\n    <\\/div>\\r\\n<\\/form>\";\n\n        function filterCtrl(instance) {\n            let vm = instance;\n            vm.createAlarmText = function() {\n                const keyFilters = vm.conditionFormGroup.value.condition;\n                const filtersText = keyFilters.map(keyFilter=>keyFilterToText(keyFilter,\n                (keyFilters.length > 1 ? \"AND\" : undefined)));\n                let result;\n                if (filtersText.length > 1) {\n                    const andText = widgetContext.translate.instant('filter.operation.and');\n                    result = filtersText.join(' <span class=\"tb-filter-complex-operation\">' + andText + '</span> ');\n                } else {\n                    result = filtersText[0];\n                }\n                return result;\n            }\n            vm.readonly = false;\n            vm.condition = {};\n\n            const TimeUnit = {\n                SECONDS: 'SECONDS',\n                MINUTES: 'MINUTES',\n                HOURS: 'HOURS',\n                DAYS: 'DAYS'\n            };\n\n            vm.cancel = function() {\n                ;\n                vm.dialogRef.close(null);\n            };\n\n            const dynamicValueSourceTypes = [\"CURRENT_DEVICE\"];\n            vm.TimeUnit = TimeUnit;\n            vm.timeUnits = Object.keys(TimeUnit);\n\n            const AlarmConditionType = {\n                SIMPLE: 'SIMPLE',\n                DURATION: 'DURATION',\n                REPEATING: 'REPEATING'\n            };\n            vm.AlarmConditionType = AlarmConditionType;\n            vm.alarmConditionTypes = Object.keys(\n                AlarmConditionType);\n            entityKeyTypeTranslations = new Map(\n                [\n                    [\"ATTRIBUTE\", 'filter.key-type.attribute'],\n                    [\"TIME_SERIES\", 'filter.key-type.timeseries'],\n                    [\"ENTITY_FIELD\", 'filter.key-type.entity-field']\n                ]\n            );\n            vm.removeKeyFilter = function(index) {\n                vm.keyFiltersFormArray().removeAt(\n                    index);\n            }\n\n            vm.editKeyFilter = function(index) {\n                const keyFilter = vm\n                    .keyFiltersFormArray().at(index)\n                    .value;\n                vm.addKeyFilter({\n                    index: index,\n                    data: keyFilter\n                });\n            }\n\n            function createPredicates(predicatesArray, predicates) {\n                predicates.forEach(predicate => {\n                    let predicateGroup;\n                    if (predicate.type === \"COMPLEX\") {\n                        predicateGroup = vm.fb.group({\n                            operation: [predicate.operation, [vm.validators.required]],\n                            type: [predicate.type, [vm.validators.required]],\n                            predicates: vm.fb.array([])\n                        });\n                        createPredicates(predicateGroup.get(\"predicates\"), predicate.predicates);\n                    } else {\n                        let valueForm = vm.fb.group({\n                                dynamicMode: [predicate.value.dynamicMode, []]\n                            });\n                        if (predicate.value.defaultValue) {\n                            valueForm.addControl('defaultValue', \n                                vm.fb.control(predicate.value.defaultValue, [vm.validators.required])\n                            );\n                        } else if (predicate.value.dynamicValue) {\n                            valueForm.addControl('dynamicValue', vm.fb.group({\n                                sourceType: [predicate.value.dynamicValue.sourceType, [vm.validators.required]],\n                                sourceAttribute: [predicate.value.dynamicValue.sourceAttribute, [vm.validators.required]]\n                            }));\n                        }\n                        predicateGroup = vm.fb.group({\n                            ignoreCase: [false],operation: [predicate.operation, [vm.validators.required]],\n                            type: [predicate.type, [vm.validators.required]],\n                            value: valueForm\n                        });\n                    }\n                    predicatesArray.push(predicateGroup);\n                });\n            }\n\n            vm.entityKeyTypeTranslations =\n                entityKeyTypeTranslations;\n            vm.keyFiltersFormArray = function() {\n                return vm.conditionFormGroup.get(\n                    \"condition\");\n            };\n            vm.addKeyFilter = function(keyFilterInfo) {\n                let html =\n                    \"<form *ngIf=\\\"keyFilterFormGroup\\\" [formGroup]=\\\"keyFilterFormGroup\\\" (ngSubmit)=\\\"save()\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\" style=\\\"min-width: 800px;\\\">\\r\\n    <h2>{{(data.isAdd ? \\'filter.add-key-filter\\' : (data.readonly ? \\'filter.key-filter\\' : \\'filter.edit-key-filter\\')) | translate}}<\\/h2>\\r\\n    <span fxFlex><\\/span>\\r\\n    <button mat-icon-button\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            type=\\\"button\\\">\\r\\n      <mat-icon class=\\\"material-icons\\\">close<\\/mat-icon>\\r\\n    <\\/button>\\r\\n  <\\/mat-toolbar>\\r\\n  <div mat-dialog-content>\\r\\n    <fieldset [disabled]=\\\"isLoading$ | async\\\" fxLayout=\\\"column\\\">\\r\\n      <section fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\" class=\\\"entity-key\\\">\\r\\n        <section fxFlex=\\\"70\\\" fxLayout=\\\"row\\\" formGroupName=\\\"key\\\" fxLayoutGap=\\\"8px\\\">\\r\\n          <mat-form-field fxFlex=\\\"40\\\" class=\\\"mat-block\\\">\\r\\n            <mat-label translate>filter.key-type.key-type<\\/mat-label>\\r\\n            <mat-select required formControlName=\\\"type\\\">\\r\\n              <mat-option *ngFor=\\\"let type of entityKeyTypes\\\" [value]=\\\"type\\\">\\r\\n                {{type}}\\r\\n              <\\/mat-option>\\r\\n            <\\/mat-select>\\r\\n          <\\/mat-form-field>\\r\\n          <mat-form-field fxFlex=\\\"60\\\" class=\\\"mat-block\\\">\\r\\n            <mat-label translate>filter.key-name<\\/mat-label>\\r\\n            <input matInput required formControlName=\\\"key\\\"\\r\\n                   [matAutocomplete]=\\\"auto\\\"\\r\\n                   [matAutocompleteDisabled]=\\\"keyFilterFormGroup.get(\\'key.type\\').value !== entityField\\\">\\r\\n            <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\">\\r\\n              <mat-option *ngFor=\\\"let option of filteredEntityFields | async\\\" [value]=\\\"option\\\">\\r\\n                {{option}}\\r\\n              <\\/mat-option>\\r\\n            <\\/mat-autocomplete>\\r\\n            <mat-error *ngIf=\\\"keyFilterFormGroup.get(\\'key.key\\').hasError(\\'required\\')\\\">\\r\\n              {{ \\'filter.key-name-required\\' | translate }}\\r\\n            <\\/mat-error>\\r\\n          <\\/mat-form-field>\\r\\n        <\\/section>\\r\\n        <mat-form-field fxFlex=\\\"30\\\" class=\\\"mat-block\\\">\\r\\n          <mat-label translate>filter.value-type.value-type<\\/mat-label>\\r\\n          <mat-select formControlName=\\\"valueType\\\">\\r\\n            <mat-select-trigger>\\r\\n              <mat-icon class=\\\"tb-mat-18\\\" svgIcon=\\\"{{ entityKeyValueTypes[keyFilterFormGroup.get(\\'valueType\\').value]?.icon }}\\\"><\\/mat-icon>\\r\\n              <span>{{ entityKeyValueTypes[keyFilterFormGroup.get(\\'valueType\\').value]?.name | translate }}<\\/span>\\r\\n            <\\/mat-select-trigger>\\r\\n            <mat-option *ngFor=\\\"let valueType of entityKeyValueTypesKeys\\\" [value]=\\\"valueType\\\">\\r\\n              <mat-icon class=\\\"tb-mat-18\\\" svgIcon=\\\"{{ entityKeyValueTypes[EntityKeyValueType[valueType]].icon }}\\\"><\\/mat-icon>\\r\\n              <span>{{ entityKeyValueTypes[EntityKeyValueType[valueType]].name | translate }}<\\/span>\\r\\n            <\\/mat-option>\\r\\n          <\\/mat-select>\\r\\n          <mat-error *ngIf=\\\"keyFilterFormGroup.get(\\'valueType\\').hasError(\\'required\\')\\\">\\r\\n            {{ \\'filter.value-type-required\\' | translate }}\\r\\n          <\\/mat-error>\\r\\n        <\\/mat-form-field>\\r\\n      <\\/section>\\r\\n      <section fxLayout=\\\"column\\\" *ngIf=\\\"keyFilterFormGroup.get(\\'valueType\\').value\\\">\\r\\n          <mat-expansion-panel [expanded]=\\\"true\\\">\\r\\n          <mat-expansion-panel-header>\\r\\n            <mat-panel-title>\\r\\n                <div>Filters<\\/div>\\r\\n            <\\/mat-panel-title>\\r\\n        <\\/mat-expansion-panel-header>\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <span fxFlex=\\\"8\\\"><\\/span>\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"8px\\\" fxFlex=\\\"92\\\">\\r\\n                <div fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                    <div fxFlex=\\\"40\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                        <label fxFlex class=\\\"tb-title no-padding\\\">Operation<\\/label>\\r\\n                        <label *ngIf=\\\"keyFilterFormGroup.get(\\'valueType\\').value === EntityKeyValueType.STRING\\\"\\r\\n                    class=\\\"tb-title no-padding\\\" style=\\\"min-width: 70px;\\\">Ignore case<\\/label>\\r\\n                    <\\/div>\\r\\n                    <label fxFlex=\\\"60\\\" class=\\\"tb-title no-padding\\\">Value<\\/label>\\r\\n                <\\/div>\\r\\n                <label *ngIf=\\\"displayUserParameters\\\"\\r\\n                class=\\\"tb-title no-padding\\\" style=\\\"width: 60px;\\\">User parameters<\\/label>\\r\\n                <span [fxShow]=\\\"!disabled\\\" style=\\\"min-width: 40px;\\\">&nbsp;<\\/span>\\r\\n            <\\/div>\\r\\n        <\\/div>\\r\\n        <mat-divider><\\/mat-divider>\\r\\n        <div class=\\\"predicate-list\\\" *ngIf=\\\"predicatesFormArray().length\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" style=\\\"height: 45px;\\\"\\r\\n           formArrayName=\\\"predicate\\\"\\r\\n           *ngFor=\\\"let predicateControl of predicatesFormArray().controls; let $index = index\\\">\\r\\n                <div fxFlex=\\\"8\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"filters-operation\\\" >\\r\\n                    <span *ngIf=\\\"$index > 0\\\">{{operation}}<\\/span>\\r\\n                <\\/div>\\r\\n                <div fxLayout=\\\"column\\\" fxFlex=\\\"92\\\" *ngIf=\\\"predicatesFormArray().value[$index]\\\"  >\\r\\n                    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" [formGroupName]=\\\"$index\\\" fxLayoutGap=\\\"8px\\\" fxFlex>\\r\\n                        <div fxFlex fxLayout=\\\"row\\\"  [ngSwitch]=\\\"predicatesFormArray().value[$index].type\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                            <div  fxFlex=\\\"40\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\"  *ngIf=\\\" predicatesFormArray().value[$index].type !== \\'COMPLEX\\' \\\"  fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker fxFlex class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select  formControlName=\\\"operation\\\" placeholder=\\\"{{\\'filter.operation.operation\\' | translate}}\\\">\\r\\n                                        <mat-option *ngFor=\\\"let operation of operations\\\" [value]=\\\"operation\\\">\\r\\n                                        {{operationEnum[operation] | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field>\\r\\n                                <mat-checkbox *ngSwitchCase=\\\"\\'STRING\\'\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" formControlName=\\\"ignoreCase\\\" style=\\\"min-width: 70px;\\\">\\r\\n                                    <\\/mat-checkbox>\\r\\n                                <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'STRING\\'\\\" fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field fxFlex *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\')\\\" floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <input matInput formControlName=\\\"defaultValue\\\" placeholder=\\\"{{\\'filter.value\\' | translate}}\\\">\\r\\n                                <\\/mat-form-field>\\r\\n                                \\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'NUMERIC\\'\\\"  fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field fxFlex *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\') && data.valueType !== \\'DATE_TIME\\'\\\" floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <input matInput formControlName=\\\"defaultValue\\\" type=\\\"number\\\" placeholder=\\\"{{\\'filter.value\\' | translate}}\\\">\\r\\n                                <\\/mat-form-field>\\r\\n                                \\r\\n                                <tb-datetime formControlName=\\\"defaultValue\\\" dateText=\\\"filter.date\\\" timeText=\\\"filter.time\\\" required [showLabel]=\\\"false\\\"  *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\') && data.valueType === \\'DATE_TIME\\'\\\" ><\\/tb-datetime>\\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'BOOLEAN\\'\\\"  fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-checkbox *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\')\\\" fxFlex formControlName=\\\"defaultValue\\\">\\r\\n                                    {{ (predicateControl.get(\\'value.defaultValue\\').value ? \\'value.true\\' : \\'value.false\\') | translate }}\\r\\n                                <\\/mat-checkbox>\\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'COMPLEX\\'\\\">\\r\\n                                COMPLEX\\r\\n                                <button mat-icon-button color=\\\"primary\\\"\\r\\n                                class=\\\"tb-mat-32\\\"\\r\\n                                type=\\\"button\\\"\\r\\n                                (click)=\\\"addPredicate(true, predicateControl)\\\"\\r\\n                                matTooltip=\\\"{{ (disabled ? \\'filter.complex-filter\\' : \\'filter.edit-complex-filter\\') | translate }}\\\"\\r\\n                                matTooltipPosition=\\\"above\\\">\\r\\n                                    <mat-icon>{{ disabled ? \\'more_vert\\' : \\'edit\\' }}<\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                        <\\/div>\\r\\n                        <button mat-icon-button color=\\\"primary\\\"\\r\\n                    [fxShow]=\\\"!disabled\\\"\\r\\n                    type=\\\"button\\\"\\r\\n                    (click)=\\\"removePredicate($index)\\\"\\r\\n                    matTooltip=\\\"{{ \\'filter.remove-filter\\' | translate }}\\\"\\r\\n                    matTooltipPosition=\\\"above\\\">\\r\\n                        <mat-icon>close<\\/mat-icon>\\r\\n                    <\\/button>\\r\\n                    <\\/div>\\r\\n                <\\/div>\\r\\n            <\\/div>\\r\\n        <\\/div>\\r\\n        <div style=\\\"margin-top: 16px;\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n            <button mat-button mat-raised-button color=\\\"primary\\\"\\r\\n              [fxShow]=\\\"!disabled\\\"\\r\\n              (click)=\\\"addPredicate(false)\\\"\\r\\n              type=\\\"button\\\"\\r\\n              matTooltip=\\\"{{ \\'filter.add-filter\\' | translate }}\\\"\\r\\n              matTooltipPosition=\\\"above\\\">\\r\\n                        {{ \\'action.add\\' | translate }}\\r\\n            <\\/button>\\r\\n            <button mat-button mat-raised-button color=\\\"primary\\\"\\r\\n              [fxShow]=\\\"!disabled\\\"\\r\\n              (click)=\\\"addPredicate(true)\\\"\\r\\n              type=\\\"button\\\"\\r\\n              matTooltip=\\\"{{ \\'filter.add-complex-filter\\' | translate }}\\\"\\r\\n              matTooltipPosition=\\\"above\\\">\\r\\n                {{ \\'filter.add-complex\\' | translate }}\\r\\n            <\\/button>\\r\\n        <\\/div>\\r\\n        <\\/mat-expansion-panel>\\r\\n       <\\/section> \\r\\n    <\\/fieldset>\\r\\n  <\\/div>\\r\\n  <div mat-dialog-actions fxLayoutAlign=\\\"end center\\\">\\r\\n    <button mat-button color=\\\"primary\\\"\\r\\n            type=\\\"button\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async)\\\"\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            cdkFocusInitial>\\r\\n      {{ (data.readonly ? \\'action.close\\' : \\'action.cancel\\') | translate }}\\r\\n    <\\/button>\\r\\n    <button mat-raised-button color=\\\"primary\\\"\\r\\n            type=\\\"submit\\\"\\r\\n            *ngIf=\\\"!data.readonly\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async) || keyFilterFormGroup.invalid || !keyFilterFormGroup.dirty\\\">\\r\\n      {{ (data.isAdd ? \\'action.add\\' : \\'action.update\\') | translate }}\\r\\n    <\\/button>\\r\\n  <\\/div>\\r\\n<\\/form>\";\n\n                function keyFIlterCtrl(instance) {\n                    let vm = instance;\n                    vm.entityKeyTypes = [\n                        'ATTRIBUTE',\n                        'TIME_SERIES'\n                    ];\n\n                    vm.dynamicValueSourceTypes =\n                        dynamicValueSourceTypes;\n                    let EntityKeyValueType = {\n                        STRING: 'STRING',\n                        NUMERIC: 'NUMERIC',\n                        BOOLEAN: 'BOOLEAN',\n                        DATE_TIME: 'DATE_TIME'\n                    };\n                    vm.operation = \"AND\";\n                    if (!vm.data) {\n                        vm.data = {\n                            isAdd: true\n                        };\n                    } else {\n                        vm.data.isAdd = false;\n                    }\n                    vm.changeDynamic = function(predicateControl, oldValue) {\n                        predicateControl.get('value.dynamicMode').patchValue(!oldValue);\n                        if (!oldValue) {\n                            predicateControl.get('value').removeControl(\"defaultValue\");\n                            predicateControl.get('value').addControl('dynamicValue', vm.fb.group({\n                                sourceType: [\"CURRENT_DEVICE\", [vm.validators.required]],\n                                sourceAttribute: [\"\", [vm.validators.required]]\n                            }));\n                        } else {\n                            predicateControl.get('value').removeControl(\"dynamicValue\");\n                            predicateControl.get('value').addControl('defaultValue', vm.fb.control(\"\", [vm.validators.required]));\n                        }\n                    };\n\n                    function entityKeyValueTypeToFilterPredicateType(\n                        valueType) {\n                        switch (valueType) {\n                            case EntityKeyValueType.STRING:\n                                return FilterPredicateType.STRING;\n                            case EntityKeyValueType.NUMERIC:\n                            case EntityKeyValueType.DATE_TIME:\n                                return FilterPredicateType.NUMERIC;\n                            case EntityKeyValueType.BOOLEAN:\n                                return FilterPredicateType.BOOLEAN;\n                        }\n                    }\n                    const FilterPredicateType = {\n                        STRING: 'STRING',\n                        NUMERIC: 'NUMERIC',\n                        BOOLEAN: 'BOOLEAN',\n                        COMPLEX: 'COMPLEX'\n                    };\n                    const StringOperation = {\n                        EQUAL: 'EQUAL',\n                        NOT_EQUAL: 'NOT_EQUAL',\n                        STARTS_WITH: 'STARTS_WITH',\n                        ENDS_WITH: 'ENDS_WITH',\n                        CONTAINS: 'CONTAINS',\n                        NOT_CONTAINS: 'NOT_CONTAINS'\n                    };\n                    const NumericOperation = {\n                        EQUAL: 'EQUAL',\n                        NOT_EQUAL: 'NOT_EQUAL',\n                        GREATER: 'GREATER',\n                        LESS: 'LESS',\n                        GREATER_OR_EQUAL: 'GREATER_OR_EQUAL',\n                        LESS_OR_EQUAL: 'LESS_OR_EQUAL'\n                    };\n                    const BooleanOperation = {\n                        EQUAL: 'EQUAL',\n                        NOT_EQUAL: 'NOT_EQUAL'\n                    };\n\n                    const operationEnum = {\n                        EQUAL: 'filter.operation.equal',\n                        NOT_EQUAL: 'filter.operation.not-equal',\n                        STARTS_WITH: 'filter.operation.starts-with',\n                        ENDS_WITH: 'filter.operation.ends-with',\n                        CONTAINS: 'filter.operation.contains',\n                        NOT_CONTAINS: 'filter.operation.not-contains',\n                        GREATER: 'filter.operation.greater',\n                        LESS: 'filter.operation.less',\n                        GREATER_OR_EQUAL: 'filter.operation.greater-or-equal',\n                        LESS_OR_EQUAL: 'filter.operation.less-or-equal'\n                    };\n                    vm.operationEnum =\n                        operationEnum;\n                    vm.EntityKeyValueType =\n                        EntityKeyValueType;\n                    vm.entityKeyValueTypesKeys =\n                        Object\n                        .keys(EntityKeyValueType);\n                    vm.entityKeyValueTypes = {\n                        STRING: {\n                            name: 'filter.value-type.string',\n                            icon: 'mdi:format-text'\n                        },\n                        NUMERIC: {\n                            name: 'filter.value-type.numeric',\n                            icon: 'mdi:numeric'\n                        },\n                        BOOLEAN: {\n                            name: 'filter.value-type.boolean',\n                            icon: 'mdi:checkbox-marked-outline'\n                        },\n                        DATE_TIME: {\n                            name: 'filter.value-type.date-time',\n                            icon: 'mdi:calendar-clock'\n                        }\n                    };\n                    const htmlTemplate =\n                        \"<form *ngIf=\\\"complexFilterFormGroup\\\" [formGroup]=\\\"complexFilterFormGroup\\\" (ngSubmit)=\\\"save()\\\" style=\\\"min-width: 800px;\\\">\\r\\n  <mat-toolbar color=\\\"primary\\\">\\r\\n    <h2 translate>filter.complex-filter<\\/h2>\\r\\n    <span fxFlex><\\/span>\\r\\n    <button mat-icon-button\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            type=\\\"button\\\">\\r\\n      <mat-icon class=\\\"material-icons\\\">close<\\/mat-icon>\\r\\n    <\\/button>\\r\\n  <\\/mat-toolbar>\\r\\n  <div mat-dialog-content>\\r\\n    <fieldset [disabled]=\\\"isLoading$ | async\\\" fxLayout=\\\"column\\\">\\r\\n      <mat-form-field class=\\\"mat-block\\\">\\r\\n        <mat-label translate>filter.operation.operation<\\/mat-label>\\r\\n        <mat-select required formControlName=\\\"operation\\\">\\r\\n          <mat-option *ngFor=\\\"let operation of complexOperations\\\" [value]=\\\"operation\\\">\\r\\n            {{operation.toLowerCase()}}\\r\\n          <\\/mat-option>\\r\\n        <\\/mat-select>\\r\\n      <\\/mat-form-field>\\r\\n      <section fxLayout=\\\"column\\\">\\r\\n          <mat-expansion-panel [expanded]=\\\"true\\\">\\r\\n          <mat-expansion-panel-header>\\r\\n            <mat-panel-title>\\r\\n                <div>Filters<\\/div>\\r\\n            <\\/mat-panel-title>\\r\\n        <\\/mat-expansion-panel-header>\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <span fxFlex=\\\"8\\\"><\\/span>\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"8px\\\" fxFlex=\\\"92\\\">\\r\\n                <div fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                    <div fxFlex=\\\"40\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                        <label fxFlex class=\\\"tb-title no-padding\\\">Operation<\\/label>\\r\\n                        <label  *ngIf=\\\"data.valueType === EntityKeyValueType.STRING\\\"\\r\\n                    class=\\\"tb-title no-padding\\\" style=\\\"min-width: 70px;\\\">Ignore case<\\/label>\\r\\n                    <\\/div>\\r\\n                    <label fxFlex=\\\"60\\\" class=\\\"tb-title no-padding\\\">Value<\\/label>\\r\\n                <\\/div>\\r\\n                <label *ngIf=\\\"displayUserParameters\\\"\\r\\n                class=\\\"tb-title no-padding\\\" style=\\\"width: 60px;\\\">User parameters<\\/label>\\r\\n                <span [fxShow]=\\\"!disabled\\\" style=\\\"min-width: 40px;\\\">&nbsp;<\\/span>\\r\\n            <\\/div>\\r\\n        <\\/div>\\r\\n        <mat-divider><\\/mat-divider>\\r\\n        <div class=\\\"predicate-list\\\" *ngIf=\\\"predicatesFormArray().length\\\">\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" style=\\\"height: 45px;\\\"\\r\\n           formArrayName=\\\"predicates\\\"\\r\\n           *ngFor=\\\"let predicateControl of predicatesFormArray().controls; let $index = index\\\">\\r\\n                <div fxFlex=\\\"8\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" class=\\\"filters-operation\\\">\\r\\n                    <span *ngIf=\\\"$index > 0\\\">{{complexFilterFormGroup.get(\\\"operation\\\").value}}<\\/span>\\r\\n                <\\/div>\\r\\n                <div fxLayout=\\\"column\\\" fxFlex=\\\"92\\\" *ngIf=\\\"predicatesFormArray().value[$index]\\\"  >\\r\\n                    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" [formGroupName]=\\\"$index\\\" fxLayoutGap=\\\"8px\\\" fxFlex>\\r\\n                        <div fxFlex fxLayout=\\\"row\\\"  [ngSwitch]=\\\"predicatesFormArray().value[$index].type\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                            <div  fxFlex=\\\"40\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\"  *ngIf=\\\" predicatesFormArray().value[$index].type !== \\'COMPLEX\\' \\\"  fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker fxFlex class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select  formControlName=\\\"operation\\\" placeholder=\\\"{{\\'filter.operation.operation\\' | translate}}\\\">\\r\\n                                        <mat-option *ngFor=\\\"let operation of operations\\\" [value]=\\\"operation\\\">\\r\\n                                        {{operationEnum[operation] | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field>\\r\\n                                <mat-checkbox *ngSwitchCase=\\\"\\'STRING\\'\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center\\\" formControlName=\\\"ignoreCase\\\" style=\\\"min-width: 70px;\\\">\\r\\n                                    <\\/mat-checkbox>\\r\\n                                <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'STRING\\'\\\" fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field fxFlex *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\')\\\" floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <input matInput formControlName=\\\"defaultValue\\\" placeholder=\\\"{{\\'filter.value\\' | translate}}\\\">\\r\\n                                <\\/mat-form-field>\\r\\n                                \\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'NUMERIC\\'\\\"  fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-form-field fxFlex *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\') && data.valueType !== \\'DATE_TIME\\'\\\" floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <input matInput formControlName=\\\"defaultValue\\\" type=\\\"number\\\" placeholder=\\\"{{\\'filter.value\\' | translate}}\\\">\\r\\n                                <\\/mat-form-field>\\r\\n                                \\r\\n                                <tb-datetime formControlName=\\\"defaultValue\\\" dateText=\\\"filter.date\\\" timeText=\\\"filter.time\\\" required [showLabel]=\\\"false\\\"  *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\') && data.valueType === \\'DATE_TIME\\'\\\" ><\\/tb-datetime>\\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'BOOLEAN\\'\\\"  fxFlex=\\\"60\\\" fxLayoutAlign=\\\"center center\\\" formGroupName=\\'value\\' fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                <mat-checkbox *ngIf=\\\"!predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.defaultValue\\')\\\" fxFlex formControlName=\\\"defaultValue\\\">\\r\\n                                    {{ (predicateControl.get(\\'value.defaultValue\\').value ? \\'value.true\\' : \\'value.false\\') | translate }}\\r\\n                                <\\/mat-checkbox>\\r\\n                                <div formGroupName=\\'dynamicValue\\' *ngIf=\\\"predicateControl.value.value.dynamicMode && predicateControl.get(\\'value.dynamicValue\\')\\\" fxFlex fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n                                   <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                    <mat-label><\\/mat-label>\\r\\n                                    <mat-select formControlName=\\\"sourceType\\\" placeholder=\\\"{{\\'filter.dynamic-source-type\\' | translate}}\\\">\\r\\n                                        <mat-option [value]=\\\"null\\\">\\r\\n                                            {{\\'filter.no-dynamic-value\\' | translate}}\\r\\n                                        <\\/mat-option>\\r\\n                                        <mat-option *ngFor=\\\"let sourceType of dynamicValueSourceTypes\\\" [value]=\\\"sourceType\\\">\\r\\n                                            {{sourceType}}\\r\\n                                        <\\/mat-option>\\r\\n                                    <\\/mat-select>\\r\\n                                <\\/mat-form-field> \\r\\n                                <div fxFlex fxLayout=\\\"column\\\">\\r\\n                                    <mat-form-field floatLabel=\\\"always\\\" hideRequiredMarker class=\\\"mat-block\\\">\\r\\n                                        <mat-label><\\/mat-label>\\r\\n                                        <input matInput formControlName=\\\"sourceAttribute\\\" placeholder=\\\"{{\\'filter.source-attribute\\' | translate}}\\\">\\r\\n                                    <\\/mat-form-field>\\r\\n                                    <\\/div>\\r\\n                                <\\/div>\\r\\n                                <button mat-icon-button class=\\\"mat-elevation-z1 tb-mat-32\\\" color=\\\"primary\\\" type=\\\"button\\\" matTooltip=\\\"{{ (predicateControl.value.value.dynamicMode ? \\'filter.switch-to-default-value\\' : \\'filter.switch-to-dynamic-value\\') | translate }}\\\"  matTooltipPosition=\\\"above\\\"\\r\\n                                    (click)=\\\"changeDynamic(predicateControl, predicateControl.value.value.dynamicMode)\\\">\\r\\n                                    <mat-icon class=\\\"tb-mat-20\\\" [svgIcon]=\\\"predicateControl.value.value.dynamicMode ? \\'mdi:numeric\\' : \\'mdi:variable\\'\\\"><\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                            <div *ngSwitchCase=\\\"\\'COMPLEX\\'\\\">\\r\\n                                COMPLEX\\r\\n                                <button mat-icon-button color=\\\"primary\\\"\\r\\n                                class=\\\"tb-mat-32\\\"\\r\\n                                type=\\\"button\\\"\\r\\n                                (click)=\\\"addPredicate(true, predicateControl)\\\"\\r\\n                                matTooltip=\\\"{{ (disabled ? \\'filter.complex-filter\\' : \\'filter.edit-complex-filter\\') | translate }}\\\"\\r\\n                                matTooltipPosition=\\\"above\\\">\\r\\n                                    <mat-icon>{{ disabled ? \\'more_vert\\' : \\'edit\\' }}<\\/mat-icon>\\r\\n                                <\\/button>\\r\\n                            <\\/div>\\r\\n                        <\\/div>\\r\\n                        <button mat-icon-button color=\\\"primary\\\"\\r\\n                    [fxShow]=\\\"!disabled\\\"\\r\\n                    type=\\\"button\\\"\\r\\n                    (click)=\\\"removePredicate($index)\\\"\\r\\n                    matTooltip=\\\"{{ \\'filter.remove-filter\\' | translate }}\\\"\\r\\n                    matTooltipPosition=\\\"above\\\">\\r\\n                        <mat-icon>close<\\/mat-icon>\\r\\n                    <\\/button>\\r\\n                    <\\/div>\\r\\n                <\\/div>\\r\\n            <\\/div>\\r\\n        <\\/div>\\r\\n        <div style=\\\"margin-top: 16px;\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"8px\\\">\\r\\n            <button mat-button mat-raised-button color=\\\"primary\\\"\\r\\n              [fxShow]=\\\"!disabled\\\"\\r\\n              (click)=\\\"addPredicate(false)\\\"\\r\\n              type=\\\"button\\\"\\r\\n              matTooltip=\\\"{{ \\'filter.add-filter\\' | translate }}\\\"\\r\\n              matTooltipPosition=\\\"above\\\">\\r\\n                        {{ \\'action.add\\' | translate }}\\r\\n            <\\/button>\\r\\n            <button mat-button mat-raised-button color=\\\"primary\\\"\\r\\n              [fxShow]=\\\"!disabled\\\"\\r\\n              (click)=\\\"addPredicate(true)\\\"\\r\\n              type=\\\"button\\\"\\r\\n              matTooltip=\\\"{{ \\'filter.add-complex-filter\\' | translate }}\\\"\\r\\n              matTooltipPosition=\\\"above\\\">\\r\\n                {{ \\'filter.add-complex\\' | translate }}\\r\\n            <\\/button>\\r\\n        <\\/div>\\r\\n        <\\/mat-expansion-panel>\\r\\n       <\\/section> \\r\\n    <\\/fieldset>\\r\\n  <\\/div>\\r\\n  <div mat-dialog-actions fxLayoutAlign=\\\"end center\\\">\\r\\n    <button mat-button color=\\\"primary\\\"\\r\\n            type=\\\"button\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async)\\\"\\r\\n            (click)=\\\"cancel()\\\"\\r\\n            cdkFocusInitial>\\r\\n      {{ (data.readonly ? \\'action.close\\' : \\'action.cancel\\') | translate }}\\r\\n    <\\/button>\\r\\n    <button mat-raised-button color=\\\"primary\\\"\\r\\n            *ngIf=\\\"!data.readonly\\\"\\r\\n            type=\\\"submit\\\"\\r\\n            [disabled]=\\\"(isLoading$ | async) || complexFilterFormGroup.invalid || !complexFilterFormGroup.dirty\\\">\\r\\n      {{ (isAdd || data.isAdd ? \\'action.add\\' : \\'action.update\\') | translate }}\\r\\n    <\\/button>\\r\\n  <\\/div>\\r\\n<\\/form>\";\n\n                    createPredicate = function(\n                        valueType, complex) {\n                        let predicate = { type: complex ? \"COMPLEX\" : entityKeyValueTypeToFilterPredicateType(valueType) };\n                        switch (predicate.type) {\n                            case FilterPredicateType.STRING:\n                                predicate.operation = StringOperation.STARTS_WITH;\n                                predicate.value = { defaultValue: '' };\n                                predicate.ignoreCase = false;\n                                break;\n                            case FilterPredicateType.NUMERIC:\n                                predicate.operation = NumericOperation.EQUAL;\n                                predicate.value = {\n                                    defaultValue: valueType === EntityKeyValueType.DATE_TIME ? Date.now() : 0 };\n                                break;\n                            case FilterPredicateType.BOOLEAN:\n                                predicate.operation = BooleanOperation.EQUAL;\n                                predicate.value = { defaultValue: false };\n                                break;\n                            case FilterPredicateType.COMPLEX:\n                                predicate.operation = \"AND\";\n                                predicate.predicates = [];\n                                break;\n                        }\n                        return {\n                            keyFilterPredicate: predicate,\n                            userInfo: {\n                                editable: true,\n                                label: '',\n                                autogeneratedLabel: true,\n                                order: 0\n                            }\n                        };\n                    };\n                    customDialogCtrl = function(\n                        instace, data) {\n                        let vm = instace;\n                        initCtrl(vm);\n                    };\n                    vm.addPredicate = function(complex, control) {\n                        let formArray = vm.keyFilterFormGroup.get(\"predicate\");\n                        let predicate = createPredicate(vm.keyFilterFormGroup.value.valueType,complex);\n                        if (complex === true) {\n                            let data = { valueType: vm.keyFilterFormGroup.get(\"valueType\").value };\n                            if (control) {\n                                data = {...data, ...control.value };\n                                data.isAdd = false;\n                            } else {\n                                data.isAdd = true;\n                            }\n                            widgetContext.customDialog.customDialog(htmlTemplate, customDialogCtrl, data).subscribe(\n                                result => {\n                                    if (result !== null) {\n                                        let keyFilterPredicate = vm.fb.group({\n                                                operation: [ result.operation, [vm.validators.required] ], //operation: [ predicate.keyFilterPredicate.operation, [vm.validators.required] ],\n                                                type: [predicate.keyFilterPredicate.type, [vm.validators.required]],\n                                                predicates: vm.fb.array(result.predicates)\n                                        });\n                                        formArray.push(keyFilterPredicate);\n                                        widgetContext.detectChanges(true);\n                                    }\n                                });\n                        } else {\n                            let keyFilterPredicate = vm.fb.group({\n                                ignoreCase: [false],\n                                operation: [predicate.keyFilterPredicate.operation,[vm.validators.required]],\n                                type: [predicate.keyFilterPredicate.type,[vm.validators.required]],\n                                value: vm.fb.group({defaultValue: [\"\",[vm.validators.required]],dynamicMode: [false,[]]})\n                            })\n                            formArray.push(keyFilterPredicate);\n                        }\n                        widgetContext.detectChanges(true);\n                    };\n\n                    function initCtrl(vm) {\n                        vm.complexFilterFormGroup = vm.fb.group({\n                            operation: [\"AND\",vm.validators.required],\n                            predicates: vm.fb.array([], vm.validators.required)\n                        });\n                        vm.predicatesFormArray = function() {\n                            return vm.complexFilterFormGroup.get('predicates');\n                        };\n                        if (!vm.data) vm.data = { valueType: \"STRING\" };\n                        if (vm.data && vm.data.operation) {\n                            vm.complexFilterFormGroup.get('operation').setValue(vm.data.operation);\n                            if (vm.data.predicates && vm.data.predicates.length) {\n                                //   vm.predicatesFormArray().setValue(vm.data.predicates); \n                                createPredicates(vm.predicatesFormArray(), vm.data.predicates);\n                            }\n                        }\n                        vm.EntityKeyValueType = EntityKeyValueType;\n                        vm.dynamicValueSourceTypes = dynamicValueSourceTypes;\n                        vm.operationEnum = operationEnum;\n                        switch (vm.data.valueType) {\n                            case 'STRING':\n                                vm.operations = Object.keys(StringOperation);\n                                break;\n                            case 'NUMERIC':\n                            case 'DATE_TIME':\n                                vm.operations = Object.keys(NumericOperation);\n                                break;\n                            case 'BOOLEAN':\n                                vm.operations = Object.keys(BooleanOperation);\n                                break;\n                            default:\n                                vm.operations = [];\n                        }\n\n                        vm.complexOperations = [\n                            \"AND\", \"OR\"\n                        ];\n                        vm.removePredicate = function(index) {\n                            console.log('remove 1', vm.predicatesFormArray());\n                            vm.predicatesFormArray().removeAt(index);\n                        };\n                        vm.save = function() {\n                            vm.dialogRef.close(vm.complexFilterFormGroup.value);\n                        };\n                        vm.cancel = function() {\n                            vm.dialogRef.close(null);\n                        };\n                        vm.changeDynamic = function(predicateControl, oldValue) {\n                            predicateControl.get('value.dynamicMode').patchValue(!oldValue);\n                            if (!oldValue) {\n                                predicateControl.get('value').removeControl(\"defaultValue\");\n                                predicateControl.get('value').addControl('dynamicValue', vm.fb.group({\n                                            sourceType: [\"CURRENT_DEVICE\", [vm.validators.required]],\n                                            sourceAttribute: [\"\",[vm.validators.required]]\n                                }));\n                            } else {\n                                predicateControl.get('value').removeControl(\"dynamicValue\");\n                                predicateControl.get('value').addControl('defaultValue',vm.fb.control(\"\",[vm.validators.required]));\n                            }\n                        };\n                        vm.addPredicate = function(\n                            complex, control) {\n                            let formArray = vm.predicatesFormArray();\n                            let predicate =createPredicate(vm.data.valueType,complex);\n                            if (complex ===true) {\n                                let data = {\n                                    valueType: vm.data.valueType\n                                };\n                                if (control) {\n                                    data = {...data,...control.value};\n                                    data.isAdd = false;\n                                } else {\n                                    data.isAdd = true;\n                                }\n                                widgetContext.customDialog.customDialog(htmlTemplate,customDialogCtrl,data).subscribe(\n                                        result => {\n                                            if (result !== null) {\n                                                let keyFilterPredicate = vm.fb.group({\n                                                    operation: [predicate.keyFilterPredicate.operation,[vm.validators.required]],\n                                                    type: [predicate.keyFilterPredicate.type,[vm.validators.required]],\n                                                    predicates: vm.fb.array(result.predicates)\n                                                });\n                                                formArray.push(keyFilterPredicate);\n                                            }\n                                        });\n                            } else {\n                                let keyFilterPredicate = vm.fb.group({ignoreCase: [false],\n                                        operation: [predicate.keyFilterPredicate.operation,[vm.validators.required]],\n                                        type: [predicate.keyFilterPredicate.type,[vm.validators.required]],\n                                        value: vm.fb.group({defaultValue: [\"\",[vm.validators.required]],dynamicMode: [false,[]]})\n                                    });\n                                formArray.push(keyFilterPredicate);\n                            }\n                            widgetContext.detectChanges(true);\n                        };\n                    };\n                    vm.removePredicate = function(index) {\n                        console.log('remove 2', vm.keyFilterFormGroup.get('predicate'))\n                        vm.keyFilterFormGroup.get('predicate').removeAt(index);\n                    }\n                    vm.keyFilterFormGroup = vm.fb\n                        .group({\n                            key: vm.fb.group({\n                                type: [null, [vm.validators.required]],\n                                key: [null, [vm.validators.required]]\n                            }),\n                            valueType: [null, [vm.validators.required]],\n                            predicate: vm.fb.array([], [vm.validators.required])\n                        });\n                    if (vm.data.valueType) {\n                        vm.keyFilterFormGroup.get(\"valueType\").setValue(vm.data.valueType);\n                        switch (vm.data.valueType) {\n                            case 'STRING':\n                                vm.operations = Object.keys(StringOperation);\n                                break;\n                            case 'NUMERIC':\n                            case 'DATE_TIME':\n                                vm.operations = Object.keys(NumericOperation);\n                                break;\n                            case 'BOOLEAN':\n                                vm.operations = Object.keys(BooleanOperation);\n                                break;\n                            default:\n                                vm.operations = [];\n                        }\n                        vm.keyFilterFormGroup.get(\"key\").setValue(vm.data.key);\n                        createPredicates(vm.keyFilterFormGroup.get(\"predicate\"), vm.data.predicate);\n                    }\n\n                    vm.keyFilterFormGroup.get(\"valueType\").valueChanges.subscribe(\n                        valueType => {\n                                const prevValue = vm.keyFilterFormGroup.value.valueType;\n                                const predicates = vm.keyFilterFormGroup.get('predicate').value;\n                                if (prevValue && prevValue !==valueType && predicates && predicates.length) {\n                                    widgetContext.dialogs.confirm(widgetContext.translate.instant('filter.key-value-type-change-title'),\n                                    widgetContext.translate.instant('filter.key-value-type-change-message')).subscribe(\n                                        (result) => {\n                                            if (result) {\n                                                vm.keyFilterFormGroup.removeControl(\"predicate\");\n                                                vm.keyFilterFormGroup.addControl(\"predicate\",vm.fb.array([],[vm.validators.required]))\n                                            } else {\n                                                vm.keyFilterFormGroup.get('valueType').setValue(prevValue, {emitEvent: false});\n                                            }\n                                        }\n                                    );\n                                }\n                                switch (valueType) {\n                                    case 'STRING':\n                                        vm.operations = Object.keys(StringOperation);\n                                        break;\n                                    case 'NUMERIC':\n                                    case 'DATE_TIME':\n                                        vm.operations = Object.keys(NumericOperation);\n                                        break;\n                                    case 'BOOLEAN':\n                                        vm.operations = Object.keys(BooleanOperation);\n                                        break;\n                                    default:\n                                        vm.operations = [];\n                                }\n                                widgetContext.detectChanges(true);\n                            })\n\n                    vm.predicatesFormArray = function() {\n                        return vm.keyFilterFormGroup.get('predicate');\n                    }\n\n                    vm.save = function() {\n                        vm.dialogRef.close(vm.keyFilterFormGroup.value);\n                    }\n                    vm.cancel = function() {\n                        vm.dialogRef.close(\n                            null);\n                    }\n                }\n                let data = {};\n                if (keyFilterInfo && keyFilterInfo.data) {\n                    data = keyFilterInfo.data;\n                }\n                widgetContext.customDialog.customDialog(html, keyFIlterCtrl, data).subscribe(keyFilter => {\n                    if (keyFilter !== null) {\n                        if (keyFilterInfo && keyFilterInfo.index !== undefined) {\n                            vm.keyFiltersFormArray().at(keyFilterInfo.index).setValue(keyFilter);\n                        } else {\n                            vm.keyFiltersFormArray().push(vm.fb.control(keyFilter))\n                        };\n                        widgetContext.detectChanges(true);\n                    }\n                });\n            };\n\n            vm.conditionFormGroup = vm.fb.group({\n                condition: vm.fb.array([], vm.validators.required),\n                spec: vm.fb.group({\n                    type: [AlarmConditionType.SIMPLE],\n                    unit: [{ value: null, disable: true}],\n                    value: [{ value: null, disable: true}],\n                    count: [{ value: null, disable: true}]\n                })\n            });\n            if (vm.data && vm.data.spec) vm.conditionFormGroup.get(\"spec\").patchValue(vm.data.spec)\n            if (vm.data && vm.data.condition) vm.data.condition.forEach(\n                condition => vm.keyFiltersFormArray().push(vm.fb.control(condition))\n            )\n            let resetDuration = true;\n            vm.conditionFormGroup.get(\"spec.type\").valueChanges.subscribe(type => {\n                switch (type) {\n                    case AlarmConditionType.DURATION:\n                        vm.conditionFormGroup.get('spec.value').enable();\n                        vm.conditionFormGroup.get('spec.unit').enable();\n                        vm.conditionFormGroup.get('spec.count').disable();\n                        if (resetDuration) {\n                            vm.conditionFormGroup.get('spec').patchValue({count: null});\n                        }\n                        break;\n                    case AlarmConditionType.REPEATING:\n                        vm.conditionFormGroup.get('spec.count').enable();\n                        vm.conditionFormGroup.get('spec.value').disable();\n                        vm.conditionFormGroup.get('spec.unit').disable();\n                        if (resetDuration) {\n                            vm.conditionFormGroup.get('spec').patchValue({value: null,unit: null});\n                        }\n                        break;\n                    case AlarmConditionType.SIMPLE:\n                        vm.conditionFormGroup.get('spec.value').disable();\n                        vm.conditionFormGroup.get('spec.unit').disable();\n                        vm.conditionFormGroup.get('spec.count').disable();\n                        if (resetDuration) {\n                            vm.conditionFormGroup.get('spec').patchValue({value: null, unit: null, count: null });\n                        }\n                        break;\n                }\n                vm.conditionFormGroup.get('spec.value').updateValueAndValidity({ emitEvent: true});\n                vm.conditionFormGroup.get('spec.unit').updateValueAndValidity({emitEvent: true});\n                vm.conditionFormGroup.get('spec.count').updateValueAndValidity({emitEvent: true});\n        })\n\n            vm.save = function() {\n                vm.dialogRef.close(vm.conditionFormGroup.value)\n            }\n        }\n        widgetContext.customDialog.customDialog(html, \n            filterCtrl, \n            (!isClearAlarm ? createAlarmRuleControl.value.alarmRule.condition : createAlarmRuleControl.value.condition)).subscribe(\n                alarmRuleFilter => {\n                    if (isClearAlarm) {\n                        createAlarmRuleControl.get(\"condition\").setValue(alarmRuleFilter);\n                        vm.alarmProfile.updateValueAndValidity();\n                        vm.alarmProfile.markAsDirty();\n                    } else {\n                        createAlarmRuleControl.get(\"alarmRule.condition\").setValue(alarmRuleFilter);\n                        vm.alarmProfile.updateValueAndValidity();\n                        vm.alarmProfile.markAsDirty();\n                    }\n                }\n            )\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "b988f19f-0153-a2a1-bcec-ab89a41b2535"
              }, {
                "name" : "Configure Email Template",
                "icon" : "email",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit {{entityName}} email templates</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div formGroupName=\"attributes\" fxLayout=\"column\">\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Email Subject</mat-label>\n                    <input  step=\"any\" matInput formControlName=\"emailSubject\">\n                </mat-form-field>\n            </div>\n            <!--<div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n            <!--    <mat-form-field fxFlex class=\"mat-block\">-->\n            <!--        <mat-label>Email Template</mat-label>-->\n            <!--        <textarea matInput-->\n            <!--        formControlName=\"emailTemplate\"-->\n            <!--        cdkAutosizeMinRows=\"10\"></textarea>-->\n            <!--    </mat-form-field>-->\n            <!--</div>-->\n            <div class=\"tb-container tb-mail-body\">\n            <mat-label class=\"tb-title\" translate>admin.mail-body</mat-label>\n            <p class=\"hint\">{{\"Available Tokens: ${assetName}, ${deviceName}, ${alarmSeverity}, ${alarmType}, ${msg_datakeyName}\"}}</p>\n            <editor [init]=\"tinyMceOptions\" [(ngModel)]=\"emailTemplate\"\n                                (ngModelChange)=\"editEntityFormGroup.markAsDirty()\"\n                              [ngModelOptions]=\"{standalone: true}\"></editor>\n          </div>\n        </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty || (attributes.emailTemplate && attributes.emailTemplate === emailTemplate)\" >\n            Save\n        </button>\n    </div>\n</form>\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector; \nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entityType = entityId.entityType;\n    vm.entitySearchDirection = {\n        from: \"FROM\",\n        to: \"TO\"\n    };\n    vm.attributes = {};\n    vm.entity = {};\n    vm.emailTemplate = ``;\n    \n\n    vm.editEntityFormGroup = vm.fb.group({\n        attributes: vm.fb.group({\n            emailSubject: [null]\n            // emailTemplate: [null]\n        }),\n        oldRelations: vm.fb.array([]),\n        relations: vm.fb.array([])\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId)\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    function getEntityAttributes(attributes) {\n        for (var i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n\n\n    function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE')\n        ]).subscribe(\n            function (data) {\n                getEntityAttributes(data[0]);\n                vm.editEntityFormGroup.patchValue({\n                    attributes: vm.attributes\n                }, {emitEvent: false});\n                let emailTemplate = data[0].find(att=>att.key === \"emailTemplate\");\n                \n                if(emailTemplate) {\n                    vm.emailTemplate = emailTemplate.value\n                }\n            }\n        );\n    }\n\n\n    function saveAttributes(entityId) {\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        attributesArray.push({key: \"emailTemplate\", value: vm.emailTemplate});\n        \n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n}",
                "customResources" : [ ],
                "id" : "7fdb5656-d41f-e289-e48c-a5e51b658576"
              }, {
                "name" : "Delete",
                "icon" : "delete",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete ' + entityName;\n    let content = \"Are you sure you want to delete the Alarm Profile '\" + entityName + \"'?\";\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n}\n\nfunction deleteEntity() {\n    deleteEntityObservable(entityId).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction deleteEntityObservable(entityId) {\n    if (entityId.entityType == \"ASSET\") {\n        return assetService.deleteAsset(entityId.id);\n    }\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while deleting the entity. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "a2416dfe-dd4a-4156-5969-1a5fa9c78233"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "b2e4f868-2015-4c26-9806-3fdf76432624"
        },
        "20dac193-d528-319f-c7c3-7415827124ff" : {
          "isSystemType" : true,
          "bundleAlias" : "admin_bundle",
          "typeAlias" : "logo",
          "type" : "static",
          "title" : "New widget",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#0e0738",
            "color" : "rgba(255,255,255,0.87)",
            "padding" : "8px",
            "settings" : { },
            "title" : "New Logo",
            "dropShadow" : true,
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "widgetCss" : "",
            "noDataDisplayMessage" : "",
            "pageSize" : 1024
          },
          "row" : 0,
          "col" : 0,
          "id" : "20dac193-d528-319f-c7c3-7415827124ff"
        },
        "cc7d8127-912c-6696-516b-08972254eaea" : {
          "isSystemType" : true,
          "bundleAlias" : "admin_bundle",
          "typeAlias" : "dashboard_selector",
          "type" : "static",
          "title" : "New widget",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#0e0738",
            "color" : "rgba(255,255,255,0.87)",
            "padding" : "8px",
            "settings" : { },
            "title" : "New Dashboard Selector",
            "dropShadow" : true,
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "widgetCss" : "",
            "noDataDisplayMessage" : "",
            "pageSize" : 1024
          },
          "row" : 0,
          "col" : 0,
          "id" : "cc7d8127-912c-6696-516b-08972254eaea"
        },
        "17873480-28df-5556-d719-b045621936be" : {
          "isSystemType" : true,
          "bundleAlias" : "admin_bundle",
          "typeAlias" : "admin_icons_v2",
          "type" : "static",
          "title" : "New widget",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#0e0738",
            "color" : "rgba(255,255,255,0.87)",
            "padding" : "8px",
            "settings" : { },
            "title" : "New Admin Icons V2",
            "dropShadow" : true,
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableFullscreen" : true,
            "enableDataExport" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "widgetCss" : "",
            "noDataDisplayMessage" : "",
            "pageSize" : 1024
          },
          "row" : 0,
          "col" : 0,
          "id" : "17873480-28df-5556-d719-b045621936be"
        }
      },
      "states" : {
        "default" : {
          "name" : "Alarm profiles",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "b2e4f868-2015-4c26-9806-3fdf76432624" : {
                  "sizeX" : 72,
                  "sizeY" : 31,
                  "row" : 3,
                  "col" : 0
                },
                "20dac193-d528-319f-c7c3-7415827124ff" : {
                  "sizeX" : 11,
                  "sizeY" : 3,
                  "row" : 0,
                  "col" : 0
                },
                "cc7d8127-912c-6696-516b-08972254eaea" : {
                  "sizeX" : 39,
                  "sizeY" : 3,
                  "row" : 0,
                  "col" : 11
                },
                "17873480-28df-5556-d719-b045621936be" : {
                  "sizeX" : 22,
                  "sizeY" : 3,
                  "row" : 0,
                  "col" : 50
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "color" : "rgba(0,0,0,0.870588)",
                "columns" : 72,
                "margin" : 5,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70
              }
            }
          }
        }
      },
      "entityAliases" : {
        "35dc906d-c6e3-ee92-d741-bb79eb15f7bd" : {
          "id" : "35dc906d-c6e3-ee92-d741-bb79eb15f7bd",
          "alias" : "Alarm profiles",
          "filter" : {
            "type" : "assetType",
            "resolveMultiple" : true,
            "assetType" : "alarmProfile",
            "assetNameFilter" : ""
          }
        },
        "5a15b3e0-9f36-4b50-15bf-50b759b67346" : {
          "id" : "5a15b3e0-9f36-4b50-15bf-50b759b67346",
          "alias" : "test assets",
          "filter" : {
            "type" : "assetType",
            "resolveMultiple" : true,
            "assetType" : "Washroom",
            "assetNameFilter" : ""
          }
        },
        "8372eebd-2fa5-dd4f-3864-3e149646dc97" : {
          "id" : "8372eebd-2fa5-dd4f-3864-3e149646dc97",
          "alias" : "Locations",
          "filter" : {
            "type" : "assetType",
            "resolveMultiple" : true,
            "assetType" : "HierarchyLevel2",
            "assetNameFilter" : ""
          }
        }
      },
      "filters" : { },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "selectedTab" : 0,
        "realtime" : {
          "interval" : 1000,
          "timewindowMs" : 60000
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1611580885428,
            "endTimeMs" : 1611667285428
          }
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : false,
        "showEntitiesSelect" : false,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : false,
        "toolbarAlwaysOpen" : false,
        "titleColor" : "rgba(0,0,0,0.870588)",
        "showFilters" : false
      }
    },
    "createdTime" : 1656585438687,
    "customerId" : {
      "entityType" : "CUSTOMER",
      "id" : "543fe890-6f51-11ea-b009-812081829598"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "9da296f0-f860-11ec-a29c-3586948df39a"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "Alarm Profiles",
    "ownerId" : {
      "entityType" : "CUSTOMER",
      "id" : "543fe890-6f51-11ea-b009-812081829598"
    },
    "tenantId" : null,
    "title" : "Alarm Profiles"
  },
  "attributes" : {
    "SERVER_SCOPE" : [ {
      "booleanValue" : true,
      "doubleValue" : null,
      "jsonValue" : null,
      "key" : "isAdmin",
      "lastUpdateTs" : 1656948898176,
      "longValue" : null,
      "strValue" : null
    } ]
  }
}