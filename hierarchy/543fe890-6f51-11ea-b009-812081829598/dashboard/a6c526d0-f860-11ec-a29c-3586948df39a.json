{
  "entityType" : "DASHBOARD",
  "entity" : {
    "assignedCustomers" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "b04398f9-e5e1-56e0-ab66-c5d32fe9c29a" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "html_value_card",
          "type" : "latest",
          "title" : "New widget",
          "sizeX" : 73,
          "sizeY" : 2,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.2486429995985262
              } ],
              "entityAliasId" : "fed52d94-59e9-7c08-4246-bd5af87ce0d4"
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673791233524,
                  "endTimeMs" : 1673877633524
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgba(0,0,0,0.25)",
            "color" : "rgba(255,255,255,0.87)",
            "padding" : "8px",
            "settings" : {
              "cardHtml" : "<div class='card'>\n\n    ${Name}: Access & Privileges \n\n</div>",
              "cardCss" : ".card {\n    font-weight: bold;\n    font-size: 13px;\n    color: white;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: left;\n}"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : { },
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableDataExport" : false,
            "displayTimewindow" : true
          },
          "id" : "b04398f9-e5e1-56e0-ab66-c5d32fe9c29a"
        },
        "c0e5b7de-1fdb-3540-7ce6-6b6a3cb3b7da" : {
          "isSystemType" : true,
          "bundleAlias" : "admin_bundle",
          "typeAlias" : "group_permissions",
          "type" : "static",
          "title" : "New widget",
          "sizeX" : 9.5,
          "sizeY" : 5,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgba(0,0,0,0.25)",
            "color" : "rgba(255,255,255,0.87)",
            "padding" : "8px",
            "settings" : {
              "state_param_name" : "selected_user_group"
            },
            "title" : "New Group Permissions",
            "dropShadow" : true,
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableFullscreen" : true,
            "enableDataExport" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false
          },
          "row" : 0,
          "col" : 0,
          "id" : "c0e5b7de-1fdb-3540-7ce6-6b6a3cb3b7da"
        },
        "64191d62-2be7-0916-5a93-bffe2f0639f0" : {
          "isSystemType" : true,
          "bundleAlias" : "admin_bundle",
          "typeAlias" : "logo",
          "type" : "static",
          "title" : "New widget",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#0e0738",
            "color" : "rgba(255,255,255,0.87)",
            "padding" : "8px",
            "settings" : { },
            "title" : "New Logo",
            "dropShadow" : true,
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "widgetCss" : "",
            "noDataDisplayMessage" : "",
            "pageSize" : 1024
          },
          "row" : 0,
          "col" : 0,
          "id" : "64191d62-2be7-0916-5a93-bffe2f0639f0"
        },
        "0c15941d-3de2-3820-e864-712323a1de2d" : {
          "isSystemType" : true,
          "bundleAlias" : "admin_bundle",
          "typeAlias" : "dashboard_selector",
          "type" : "static",
          "title" : "New widget",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#0e0738",
            "color" : "rgba(255,255,255,0.87)",
            "padding" : "8px",
            "settings" : { },
            "title" : "New Dashboard Selector",
            "dropShadow" : true,
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "widgetCss" : "",
            "noDataDisplayMessage" : "",
            "pageSize" : 1024
          },
          "row" : 0,
          "col" : 0,
          "id" : "0c15941d-3de2-3820-e864-712323a1de2d"
        },
        "cf962590-543e-ddf0-2b08-df64d29a92e0" : {
          "isSystemType" : true,
          "bundleAlias" : "admin_bundle",
          "typeAlias" : "admin_icons_v2",
          "type" : "static",
          "title" : "New widget",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "realtime" : {
                "timewindowMs" : 60000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#0e0738",
            "color" : "rgba(255,255,255,0.87)",
            "padding" : "8px",
            "settings" : { },
            "title" : "New Admin Icons V2",
            "dropShadow" : true,
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableFullscreen" : true,
            "enableDataExport" : true,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "widgetCss" : "",
            "noDataDisplayMessage" : "",
            "pageSize" : 1024
          },
          "row" : 0,
          "col" : 0,
          "id" : "cf962590-543e-ddf0-2b08-df64d29a92e0"
        },
        "3aefbf5f-555e-2d0f-f68e-80279085ab17" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "entities_table",
          "type" : "latest",
          "title" : "New widget",
          "image" : null,
          "description" : null,
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673791233524,
                  "endTimeMs" : 1673877633524
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgba(0,0,0,0.25)",
            "color" : "#ffffff",
            "padding" : "0",
            "settings" : {
              "entitiesTitle" : "User groups",
              "enableSearch" : false,
              "enableSelectColumnDisplay" : false,
              "enableStickyHeader" : false,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : true,
              "entityNameColumnTitle" : "User group",
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false
            },
            "title" : "User Group List",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "d49c8f56-1cce-7f2e-27e3-7fd3816d1b6d",
              "filterId" : null,
              "dataKeys" : [ ]
            } ],
            "showTitleIcon" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "titleTooltip" : "",
            "titleIcon" : "account_circle",
            "iconColor" : "rgba(255,255,255,0.87)",
            "iconSize" : "24px",
            "actions" : {
              "rowClick" : [ {
                "name" : "Select user Group",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "updateDashboardState",
                "targetDashboardStateId" : null,
                "setEntityId" : true,
                "stateEntityParamName" : "selected_user_group",
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "1fa5700d-6c14-b81e-a526-f29233561058"
              } ],
              "headerButton" : [ {
                "name" : "Create New Group",
                "icon" : "add",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"\n      (ngSubmit)=\"save()\" class=\"add-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Create new user group</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Group Name</mat-label>\n                <input matInput formControlName=\"entityName\" required>\n                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">\n                    Entity name is required.\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <div formGroupName=\"attributes\" fxLayout=\"column\">\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n    \n                    <div class=\"boolean-value-input\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxFlex>\n                        <label class=\"checkbox-label\">Email Notification</label>\n                        <mat-checkbox formControlName=\"emailNotification\" style=\"margin-bottom: 40px;\">\n                            <!--{{ (addEntityFormGroup.get('attributes').get('emailNotification').value ? \"value.true\" : \"value.false\") | translate }}-->\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                    <div class=\"boolean-value-input\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxFlex>\n                        <label class=\"checkbox-label\">SMS Notification</label>\n                        <mat-checkbox formControlName=\"smsNotification\" style=\"margin-bottom: 40px;\">\n                            <!--{{ (addEntityFormGroup.get('attributes').get('smsNotification').value ? \"value.true\" : \"value.false\") | translate }}-->\n                        </mat-checkbox>\n                    </div>\n                </div>\n                \n            </div>\n            <div formGroupName=\"attributes\" fxLayout=\"column\">\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                    <div class=\"boolean-value-input\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxFlex>\n                        <label class=\"checkbox-label\">Device Alerts</label>\n                        <mat-checkbox formControlName=\"deviceAlerts\" style=\"margin-bottom: 40px;\">\n                            <!--{{ (addEntityFormGroup.get('attributes').get('smsNotification').value ? \"value.true\" : \"value.false\") | translate }}-->\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                    <div class=\"boolean-value-input\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxFlex>\n                        <label class=\"checkbox-label\">Use Case</label>\n                        <mat-checkbox formControlName=\"useCase\" style=\"margin-bottom: 40px;\">\n                            <!--{{ (addEntityFormGroup.get('attributes').get('smsNotification').value ? \"value.true\" : \"value.false\") | translate }}-->\n                        </mat-checkbox>\n                    </div>\n                </div>\n            </div>\n            <div formGroupName=\"attributes\" fxLayout=\"column\">\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                    <div class=\"boolean-value-input\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxFlex>\n                        <label class=\"checkbox-label\">Escalation Group</label>\n                        <mat-checkbox formControlName=\"escalationGroup\" style=\"margin-bottom: 40px;\">\n                            <!--{{ (addEntityFormGroup.get('attributes').get('smsNotification').value ? \"value.true\" : \"value.false\") | translate }}-->\n                        </mat-checkbox>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">\n            Create\n        </button>\n        <button mat-button color=\"primary\"\n                style=\"margin-right: 20px;\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n    </div>\n</form>\n",
                "customCss" : "mat-checkbox {\n    margin-left: 5px;\n}",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\n    vm.entitySearchDirection = {\n        from: \"FROM\",\n        to: \"TO\"\n    }\n\n    vm.addEntityFormGroup = vm.fb.group({\n     entityName: ['', [vm.validators.required]],\n     attributes: vm.fb.group({\n         emailNotification: [false],\n         smsNotification: [false],\n         useCase: [false],\n         deviceAlerts: [false],\n         escalationGroup: [false]\n     }),\n     relations: vm.fb.array([])\n    });\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n\n\n    vm.save = function() {\n        vm.addEntityFormGroup.markAsPristine();\n        saveEntityObservable().subscribe(\n            function (entity) {\n                widgetContext.rxjs.forkJoin([\n                    saveAttributes(entity.id)\n                ]).subscribe(\n                    function () {\n                        widgetContext.updateAliases();\n                        widgetContext.$scope.loadData();\n                        vm.dialogRef.close(null);\n                    }\n                );\n            }\n        );\n    };\n\n    function saveEntityObservable() {\n        const formValues = vm.addEntityFormGroup.value;\n        let entity = {\n            name: formValues.entityName,\n            type: \"USER\"\n        };\n        return entityGroupService.saveEntityGroup(entity);\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.addEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if(attributes[key] !== null) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n\n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "20d60170-81e5-13c1-4eff-efc615e21455"
              } ],
              "actionCellButton" : [ {
                "name" : "Edit Group",
                "icon" : "edit",
                "useShowWidgetActionFunction" : false,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"\n      (ngSubmit)=\"save()\" class=\"add-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit user group</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Group Name</mat-label>\n                <input matInput formControlName=\"entityName\" required>\n                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">\n                    Entity name is required.\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <div formGroupName=\"attributes\" fxLayout=\"column\">\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n    \n                    <div class=\"boolean-value-input\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxFlex>\n                        <label class=\"checkbox-label\">Email Notification</label>\n                        <mat-checkbox formControlName=\"emailNotification\" style=\"margin-bottom: 40px;\">\n                            <!--{{ (addEntityFormGroup.get('attributes').get('emailNotification').value ? \"value.true\" : \"value.false\") | translate }}-->\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                    <div class=\"boolean-value-input\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxFlex>\n                        <label class=\"checkbox-label\">SMS Notification</label>\n                        <mat-checkbox formControlName=\"smsNotification\" style=\"margin-bottom: 40px;\">\n                            <!--{{ (addEntityFormGroup.get('attributes').get('smsNotification').value ? \"value.true\" : \"value.false\") | translate }}-->\n                        </mat-checkbox>\n                    </div>\n                </div>\n                \n            </div>\n            <div formGroupName=\"attributes\" fxLayout=\"column\">\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                    <div class=\"boolean-value-input\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxFlex>\n                        <label class=\"checkbox-label\">Device Alerts</label>\n                        <mat-checkbox formControlName=\"deviceAlerts\" style=\"margin-bottom: 40px;\">\n                            <!--{{ (addEntityFormGroup.get('attributes').get('smsNotification').value ? \"value.true\" : \"value.false\") | translate }}-->\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                    <div class=\"boolean-value-input\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxFlex>\n                        <label class=\"checkbox-label\">Use Case</label>\n                        <mat-checkbox formControlName=\"useCase\" style=\"margin-bottom: 40px;\">\n                            <!--{{ (addEntityFormGroup.get('attributes').get('smsNotification').value ? \"value.true\" : \"value.false\") | translate }}-->\n                        </mat-checkbox>\n                    </div>\n                </div>\n            </div>\n            <div formGroupName=\"attributes\" fxLayout=\"column\">\n                <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                    <div class=\"boolean-value-input\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxFlex>\n                        <label class=\"checkbox-label\">Escalation Group</label>\n                        <mat-checkbox formControlName=\"escalationGroup\" style=\"margin-bottom: 40px;\">\n                            <!--{{ (addEntityFormGroup.get('attributes').get('smsNotification').value ? \"value.true\" : \"value.false\") | translate }}-->\n                        </mat-checkbox>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">\n            Create\n        </button>\n        <button mat-button color=\"primary\"\n                style=\"margin-right: 20px;\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n    </div>\n</form>\n",
                "customCss" : "mat-checkbox {\n    margin-left: 5px;\n}",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\n    vm.entitySearchDirection = {\n        from: \"FROM\",\n        to: \"TO\"\n    }\n\n    vm.addEntityFormGroup = vm.fb.group({\n     entityName: [entityName, [vm.validators.required]],\n     attributes: vm.fb.group({\n         emailNotification: [false],\n         smsNotification: [false], \n         deviceAlerts: [false],\n         useCase: [false],\n         escalationGroup: [false]\n     }),\n     relations: vm.fb.array([])\n    });\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n    entityGroupService.getEntityGroup(entityId.id).subscribe(entity=>{\n        vm.entity = entity;\n    });\n    attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['emailNotification', \"smsNotification\", \"escalationGroup\", \"deviceAlerts\", \"useCase\"]).subscribe(resp=>{\n        resp.forEach(el=>{\n            if (el.key == \"emailNotification\") {\n               vm.addEntityFormGroup.controls.attributes.controls.emailNotification.setValue(el.value);\n            } else if (el.key == \"smsNotification\") {\n                vm.addEntityFormGroup.controls.attributes.controls.smsNotification.setValue(el.value);\n            } else if (el.key == \"escalationGroup\") {\n                vm.addEntityFormGroup.controls.attributes.controls.escalationGroup.setValue(el.value);\n            } else if (el.key == \"useCase\") {\n                vm.addEntityFormGroup.controls.attributes.controls.useCase.setValue(el.value);\n            } else if (el.key == \"deviceAlerts\") {\n                vm.addEntityFormGroup.controls.attributes.controls.deviceAlerts.setValue(el.value);\n            }\n        })\n    });\n\n    vm.save = function() {\n        vm.addEntityFormGroup.markAsPristine();\n        saveEntityObservable().subscribe(\n            function (entity) {\n                widgetContext.rxjs.forkJoin([\n                    saveAttributes(entity.id)\n                ]).subscribe(\n                    function () {\n                        widgetContext.updateAliases();\n                        widgetContext.$scope.loadData();\n                        vm.dialogRef.close(null);\n                    }\n                );\n            }\n        );\n    };\n\n    function saveEntityObservable() {\n        const formValues = vm.addEntityFormGroup.value;\n        vm.entity.name = formValues.entityName;\n        return entityGroupService.saveEntityGroup(vm.entity);\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.addEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if(attributes[key] !== null) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n\n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "85340e9a-c81a-034c-6a71-f54aa930e77c"
              }, {
                "name" : "Delete group",
                "icon" : "delete",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<!--=======================================================================-->\n<!--=====  There are two example templates: for edit and add entity   =====-->\n<!--=======================================================================-->\n<!--========================  Edit entity example  ========================-->\n<!--=======================================================================-->\n<!-- -->\n<!--<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"-->\n<!--      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">-->\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\n<!--        <h2>Edit {{entityType.toLowerCase()}} {{entityName}}</h2>-->\n<!--        <span fxFlex></span>-->\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\n<!--        </button>-->\n<!--    </mat-toolbar>-->\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\n<!--    </mat-progress-bar>-->\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Name</mat-label>-->\n<!--                <input matInput formControlName=\"entityName\" required readonly=\"\">-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Label</mat-label>-->\n<!--                <input matInput formControlName=\"entityLabel\">-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Type</mat-label>-->\n<!--                <input matInput formControlName=\"entityType\" readonly>-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Type</mat-label>-->\n<!--                <input matInput formControlName=\"type\" readonly>-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Latitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Longitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Address</mat-label>-->\n<!--                    <input matInput formControlName=\"address\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Owner</mat-label>-->\n<!--                    <input matInput formControlName=\"owner\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Integer Value</mat-label>-->\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\n<!--                    <mat-error *ngIf=\"editEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\n<!--                        Invalid integer value.-->\n<!--                    </mat-error>-->\n<!--                </mat-form-field>-->\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                        {{ (editEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                    </mat-checkbox>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list old-relations\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"oldRelations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"oldRelations\" -->\n<!--                     *ngFor=\"let relation of oldRelations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        required=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        required=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeOldRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">New Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        [required]=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        [required]=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--            <div>-->\n<!--                <button mat-raised-button color=\"primary\"-->\n<!--                        type=\"button\"-->\n<!--                        (click)=\"addRelation()\"-->\n<!--                        matTooltip=\"Add Relation\"-->\n<!--                        matTooltipPosition=\"above\">-->\n<!--                    Add-->\n<!--                </button>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--    </div>-->\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\n<!--        <button mat-button color=\"primary\"-->\n<!--                type=\"button\"-->\n<!--                [disabled]=\"(isLoading$ | async)\"-->\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\n<!--            Cancel-->\n<!--        </button>-->\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\n<!--                type=\"submit\"-->\n<!--                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">-->\n<!--            Save-->\n<!--        </button>-->\n<!--    </div>-->\n<!--</form>-->\n<!---->\n<!--========================================================================-->\n<!--=========================  Add entity example  =========================-->\n<!--========================================================================-->\n<!---->\n<!--<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"-->\n<!--      (ngSubmit)=\"save()\" class=\"add-entity-form\">-->\n<!--    <mat-toolbar fxLayout=\"row\" color=\"primary\">-->\n<!--        <h2>Add entity</h2>-->\n<!--        <span fxFlex></span>-->\n<!--        <button mat-icon-button (click)=\"cancel()\" type=\"button\">-->\n<!--            <mat-icon class=\"material-icons\">close</mat-icon>-->\n<!--        </button>-->\n<!--    </mat-toolbar>-->\n<!--    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">-->\n<!--    </mat-progress-bar>-->\n<!--    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>-->\n<!--    <div mat-dialog-content fxLayout=\"column\">-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Name</mat-label>-->\n<!--                <input matInput formControlName=\"entityName\" required>-->\n<!--                <mat-error *ngIf=\"addEntityFormGroup.get('entityName').hasError('required')\">-->\n<!--                    Entity name is required.-->\n<!--                </mat-error>-->\n<!--            </mat-form-field>-->\n<!--            <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                <mat-label>Entity Label</mat-label>-->\n<!--                <input matInput formControlName=\"entityLabel\" >-->\n<!--            </mat-form-field>-->\n<!--        </div>-->\n<!--        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--            <tb-entity-type-select-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"entityType\"-->\n<!--                    [showLabel]=\"true\"-->\n<!--                    [allowedEntityTypes]=\"allowedEntityTypes\"-->\n<!--            ></tb-entity-type-select>-->\n<!--            <tb-entity-subtype-autocomplete-->\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value == 'ASSET'\"-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"type\"-->\n<!--                    [required]=\"true\"-->\n<!--                    [entityType]=\"'ASSET'\"-->\n<!--            ></tb-entity-subtype-autocomplete>-->\n<!--            <tb-entity-subtype-autocomplete-->\n<!--                    fxFlex *ngIf=\"addEntityFormGroup.get('entityType').value != 'ASSET'\"-->\n<!--                    class=\"mat-block\"-->\n<!--                    formControlName=\"type\"-->\n<!--                    [required]=\"true\"-->\n<!--                    [entityType]=\"'DEVICE'\"-->\n<!--            ></tb-entity-subtype-autocomplete>-->\n<!--        </div>-->\n<!--        <div formGroupName=\"attributes\" fxLayout=\"column\">-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Latitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"latitude\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Longitude</mat-label>-->\n<!--                    <input type=\"number\" step=\"any\" matInput formControlName=\"longitude\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Address</mat-label>-->\n<!--                    <input matInput formControlName=\"address\">-->\n<!--                </mat-form-field>-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Owner</mat-label>-->\n<!--                    <input matInput formControlName=\"owner\">-->\n<!--                </mat-form-field>-->\n<!--            </div>-->\n<!--            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                <mat-form-field fxFlex class=\"mat-block\">-->\n<!--                    <mat-label>Integer Value</mat-label>-->\n<!--                    <input type=\"number\" step=\"1\" matInput formControlName=\"number\">-->\n<!--                    <mat-error *ngIf=\"addEntityFormGroup.get('attributes.number').hasError('pattern')\">-->\n<!--                        Invalid integer value.-->\n<!--                    </mat-error>-->\n<!--                </mat-form-field>-->\n<!--                <div class=\"boolean-value-input\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>-->\n<!--                    <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                    <mat-checkbox formControlName=\"booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                        {{ (addEntityFormGroup.get('attributes.booleanValue').value ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                    </mat-checkbox>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--        <div class=\"relations-list\">-->\n<!--            <div class=\"mat-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--            <div class=\"body\" [fxShow]=\"relations().length\">-->\n<!--                <div class=\"row\" fxLayout=\"row\" fxLayoutAlign=\"start center\" formArrayName=\"relations\" *ngFor=\"let relation of relations().controls; let i = index;\">-->\n<!--                    <div [formGroupName]=\"i\" class=\"mat-elevation-z2\" fxFlex fxLayout=\"row\" style=\"padding: 5px 0 5px 5px;\">-->\n<!--                        <div fxFlex fxLayout=\"column\">-->\n<!--                            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">-->\n<!--                                <mat-form-field class=\"mat-block\" style=\"min-width: 100px;\">-->\n<!--                                    <mat-label>Direction</mat-label>-->\n<!--                                    <mat-select formControlName=\"direction\" name=\"direction\">-->\n<!--                                        <mat-option *ngFor=\"let direction of entitySearchDirection | keyvalue\" [value]=\"direction.value\">-->\n<!--                                            {{ (\"relation.search-direction.\" + direction.value) | translate}}-->\n<!--                                        </mat-option>-->\n<!--                                    </mat-select>-->\n<!--                                    <mat-error *ngIf=\"relation.get('direction').hasError('required')\">-->\n<!--                                        Relation direction is required.-->\n<!--                                    </mat-error>-->\n<!--                                </mat-form-field>-->\n<!--                                <tb-relation-type-autocomplete-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        formControlName=\"relationType\"-->\n<!--                                        [required]=\"true\">-->\n<!--                                </tb-relation-type-autocomplete>-->\n<!--                            </div>-->\n<!--                            <div fxLayout=\"row\" fxLayout.xs=\"column\">-->\n<!--                                <tb-entity-select-->\n<!--                                        fxFlex class=\"mat-block\"-->\n<!--                                        [required]=\"true\"-->\n<!--                                        formControlName=\"relatedEntity\">-->\n<!--                                </tb-entity-select>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                        <div fxLayout=\"column\" fxLayoutAlign=\"center center\">-->\n<!--                            <button mat-icon-button color=\"primary\"-->\n<!--                                    aria-label=\"Remove\"-->\n<!--                                    type=\"button\"-->\n<!--                                    (click)=\"removeRelation(i)\"-->\n<!--                                    matTooltip=\"Remove relation\"-->\n<!--                                    matTooltipPosition=\"above\">-->\n<!--                                <mat-icon>close</mat-icon>-->\n<!--                            </button>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--            </div>-->\n<!--            <div>-->\n<!--                <button mat-raised-button color=\"primary\"-->\n<!--                        type=\"button\"-->\n<!--                        (click)=\"addRelation()\"-->\n<!--                        matTooltip=\"Add Relation\"-->\n<!--                        matTooltipPosition=\"above\">-->\n<!--                    Add-->\n<!--                </button>-->\n<!--            </div>-->\n<!--        </div>-->\n<!--    </div>-->\n<!--    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">-->\n<!--        <button mat-button color=\"primary\"-->\n<!--                type=\"button\"-->\n<!--                [disabled]=\"(isLoading$ | async)\"-->\n<!--                (click)=\"cancel()\" cdkFocusInitial>-->\n<!--            Cancel-->\n<!--        </button>-->\n<!--        <button mat-button mat-raised-button color=\"primary\"-->\n<!--                type=\"submit\"-->\n<!--                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">-->\n<!--            Create-->\n<!--        </button>-->\n<!--    </div>-->\n<!--</form>-->\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "/*=======================================================================*/\n/*=====  There are three examples: for delete, edit and add entity  =====*/\n/*=======================================================================*/\n/*=======================  Delete entity example  =======================*/\n/*=======================================================================*/\n//\nlet $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete ' + \"group\" + ' ' +\n                entityName;\n    let content = 'Are you sure you want to delete the ' +\n                 \"group\" + ' ' + entityName + '?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n}\n\nfunction deleteEntity() {\n    deleteEntityObservable(entityId).subscribe(\n        function success() {\n            widgetContext.$scope.loadData();\n            let params = widgetContext.stateController.getStateParams();\n            delete params.selected_user_group;\n            widgetContext.stateController.updateState(\"default\", params);\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction deleteEntityObservable(entityId) {\n        return entityGroupService.deleteEntityGroup(entityId.id);\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while deleting the entity. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}\n//\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\n//let entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n//\n//openEditEntityDialog();\n//\n//function openEditEntityDialog() {\n//    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n//}\n//\n//function EditEntityDialogController(instance) {\n//    let vm = instance;\n//\n//    vm.entityName = entityName;\n//    vm.entityType = entityId.entityType;\n//    vm.entitySearchDirection = {\n//        from: \"FROM\",\n//        to: \"TO\"\n//    };\n//    vm.attributes = {};\n//    vm.oldRelationsData = [];\n//    vm.relationsToDelete = [];\n//    vm.entity = {};\n//\n//    vm.editEntityFormGroup = vm.fb.group({\n//        entityName: ['', [vm.validators.required]],\n//        entityType: [null],\n//        entityLabel: [null],\n//        type: ['', [vm.validators.required]],\n//        attributes: vm.fb.group({\n//            latitude: [null],\n//            longitude: [null],\n//            address: [null],\n//            owner: [null],\n//            number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n//            booleanValue: [false]\n//        }),\n//        oldRelations: vm.fb.array([]),\n//        relations: vm.fb.array([])\n//    });\n//\n//    getEntityInfo();\n//\n//    vm.cancel = function() {\n//        vm.dialogRef.close(null);\n//    };\n//\n//    vm.relations = function() {\n//        return vm.editEntityFormGroup.get('relations');\n//    };\n//\n//    vm.oldRelations = function() {\n//        return vm.editEntityFormGroup.get('oldRelations');\n//    };\n//\n//    vm.addRelation = function() {\n//        vm.relations().push(vm.fb.group({\n//            relatedEntity: [null, [vm.validators.required]],\n//            relationType: [null, [vm.validators.required]],\n//            direction: [null, [vm.validators.required]]\n//        }));\n//    };\n//\n//    function addOldRelation() {\n//        vm.oldRelations().push(vm.fb.group({\n//            relatedEntity: [{value: null, disabled: true}, [vm.validators.required]],\n//            relationType: [{value: null, disabled: true}, [vm.validators.required]],\n//            direction: [{value: null, disabled: true}, [vm.validators.required]]\n//        }));\n//    }\n//\n//    vm.removeRelation = function(index) {\n//        vm.relations().removeAt(index);\n//        vm.relations().markAsDirty();\n//    };\n//\n//    vm.removeOldRelation = function(index) {\n//        vm.oldRelations().removeAt(index);\n//        vm.relationsToDelete.push(vm.oldRelationsData[index]);\n//        vm.oldRelations().markAsDirty();\n//    };\n//\n//    vm.save = function() {\n//        vm.editEntityFormGroup.markAsPristine();\n//        widgetContext.rxjs.forkJoin([\n//            saveAttributes(entityId),\n//            saveRelations(entityId),\n//            saveEntity()\n//        ]).subscribe(\n//            function () {\n//                widgetContext.updateAliases();\n//                vm.dialogRef.close(null);\n//            }\n//        );\n//    };\n//\n//    function getEntityAttributes(attributes) {\n//        for (var i = 0; i < attributes.length; i++) {\n//            vm.attributes[attributes[i].key] = attributes[i].value;\n//        }\n//    }\n//\n//    function getEntityRelations(relations) {\n//        let relationsFrom = relations[0];\n//        let relationsTo = relations[1];\n//        for (let i=0; i < relationsFrom.length; i++) {\n//            let relation = {\n//                direction: 'FROM',\n//                relationType: relationsFrom[i].type,\n//                relatedEntity: relationsFrom[i].to\n//            };\n//            vm.oldRelationsData.push(relation);\n//            addOldRelation();\n//        }\n//        for (let i=0; i < relationsTo.length; i++) {\n//            let relation = {\n//                direction: 'TO',\n//                relationType: relationsTo[i].type,\n//                relatedEntity: relationsTo[i].from\n//            };\n//            vm.oldRelationsData.push(relation);\n//            addOldRelation();\n//        }\n//    }\n//\n//    function getEntityInfo() {\n//        entityService.getEntity(entityId.entityType, entityId.id).subscribe(function (entity) {\n//            vm.entity = entity;\n//            widgetContext.rxjs.forkJoin([\n//                entityRelationService.findInfoByFrom(entityId),\n//                entityRelationService.findInfoByTo(entityId),\n//                attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE')\n//            ]).subscribe(\n//                function (data) {\n//                    getEntityRelations(data.slice(0,2));\n//                    getEntityAttributes(data[2]);\n//                    vm.editEntityFormGroup.patchValue({\n//                        entityName: vm.entity.name,\n//                        entityType: vm.entityType,\n//                        entityLabel: vm.entity.label,\n//                        type: vm.entity.type,\n//                        attributes: vm.attributes,\n//                        oldRelations: vm.oldRelationsData\n//                    }, {emitEvent: false});\n//                }\n//            );\n//        });\n//    }\n//\n//    function saveEntity() {\n//        const formValues = vm.editEntityFormGroup.value;\n//        if (vm.entity.label !== formValues.entityLabel){\n//            vm.entity.label = formValues.entityLabel;\n//            if (formValues.entityType == 'ASSET') {\n//                return assetService.saveAsset(vm.entity);\n//            } else if (formValues.entityType == 'DEVICE') {\n//                return deviceService.saveDevice(vm.entity);\n//            }\n//        } else {\n//            return widgetContext.rxjs.of([]);\n//        }\n//    }\n//\n//    function saveAttributes(entityId) {\n//        let attributes = vm.editEntityFormGroup.get('attributes').value;\n//        let attributesArray = [];\n//        for (let key in attributes) {\n//            if (attributes[key] !== vm.attributes[key]) {\n//                attributesArray.push({key: key, value: attributes[key]});\n//            }\n//        }\n//        if (attributesArray.length > 0) {\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n//        } else {\n//            return widgetContext.rxjs.of([]);\n//        }\n//    }\n//\n//    function saveRelations(entityId) {\n//        let relations = vm.editEntityFormGroup.get('relations').value;\n//        let tasks = [];\n//        for(let i=0; i < relations.length; i++) {\n//            let relation = {\n//                type: relations[i].relationType,\n//                typeGroup: 'COMMON'\n//            };\n//            if (relations[i].direction == 'FROM') {\n//                relation.to = relations[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = relations[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.saveRelation(relation));\n//        }\n//        for (let i=0; i < vm.relationsToDelete.length; i++) {\n//            let relation = {\n//                type: vm.relationsToDelete[i].relationType\n//            };\n//            if (vm.relationsToDelete[i].direction == 'FROM') {\n//                relation.to = vm.relationsToDelete[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = vm.relationsToDelete[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.deleteRelation(relation.from, relation.type, relation.to));\n//        }\n//        if (tasks.length > 0) {\n//            return widgetContext.rxjs.forkJoin(tasks);\n//        } else {\n//            return widgetContext.rxjs.of([]);\n//        }\n//    }\n//}\n//\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n//\n//openAddEntityDialog();\n//\n//function openAddEntityDialog() {\n//    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n//}\n//\n//function AddEntityDialogController(instance) {\n//    let vm = instance;\n//\n//    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\n//    vm.entitySearchDirection = {\n//        from: \"FROM\",\n//        to: \"TO\"\n//    }\n//\n//    vm.addEntityFormGroup = vm.fb.group({\n//      entityName: ['', [vm.validators.required]],\n//      entityType: ['DEVICE'],\n//      entityLabel: [null],\n//      type: ['', [vm.validators.required]],\n//      attributes: vm.fb.group({\n//          latitude: [null],\n//          longitude: [null],\n//          address: [null],\n//          owner: [null],\n//          number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n//          booleanValue: [null]\n//      }),\n//      relations: vm.fb.array([])\n//    });\n//\n//    vm.cancel = function() {\n//        vm.dialogRef.close(null);\n//    };\n//\n//    vm.relations = function() {\n//        return vm.addEntityFormGroup.get('relations');\n//    };\n//\n//    vm.addRelation = function() {\n//        vm.relations().push(vm.fb.group({\n//          relatedEntity: [null, [vm.validators.required]],\n//          relationType: [null, [vm.validators.required]],\n//          direction: [null, [vm.validators.required]]\n//        }));\n//    };\n//\n//    vm.removeRelation = function(index) {\n//        vm.relations().removeAt(index);\n//        vm.relations().markAsDirty();\n//    };\n//\n//    vm.save = function() {\n//        vm.addEntityFormGroup.markAsPristine();\n//        saveEntityObservable().subscribe(\n//            function (entity) {\n//                widgetContext.rxjs.forkJoin([\n//                    saveAttributes(entity.id),\n//                    saveRelations(entity.id)\n//                ]).subscribe(\n//                    function () {\n//                        widgetContext.updateAliases();\n//                        vm.dialogRef.close(null);\n//                    }\n//                );\n//            }\n//        );\n//    };\n//\n//    function saveEntityObservable() {\n//        const formValues = vm.addEntityFormGroup.value;\n//        let entity = {\n//            name: formValues.entityName,\n//            type: formValues.type,\n//            label: formValues.entityLabel\n//        };\n//        if (formValues.entityType == 'ASSET') {\n//            return assetService.saveAsset(entity);\n//        } else if (formValues.entityType == 'DEVICE') {\n//            return deviceService.saveDevice(entity);\n//        }\n//    }\n//\n//    function saveAttributes(entityId) {\n//        let attributes = vm.addEntityFormGroup.get('attributes').value;\n//        let attributesArray = [];\n//        for (let key in attributes) {\n//            if(attributes[key] !== null) {\n//                attributesArray.push({key: key, value: attributes[key]});\n//            }\n//        }\n//        if (attributesArray.length > 0) {\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n//        } else {\n//            return widgetContext.rxjs.of([]);\n//        }\n//    }\n//\n//    function saveRelations(entityId) {\n//        let relations = vm.addEntityFormGroup.get('relations').value;\n//        let tasks = [];\n//        for(let i=0; i < relations.length; i++) {\n//            let relation = {\n//                type: relations[i].relationType,\n//                typeGroup: 'COMMON'\n//            };\n//            if (relations[i].direction == 'FROM') {\n//                relation.to = relations[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = relations[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.saveRelation(relation));\n//        }\n//        if (tasks.length > 0) {\n//            return widgetContext.rxjs.forkJoin(tasks);\n//        } else {\n//            return widgetContext.rxjs.of([]);\n//        }\n//    }\n//}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "8ba1263c-d5b6-9f8e-2ebd-361e0666eef5"
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "3aefbf5f-555e-2d0f-f68e-80279085ab17"
        },
        "a7c12d15-4a19-0ff1-48cd-874ac324fb97" : {
          "isSystemType" : true,
          "bundleAlias" : "cards",
          "typeAlias" : "entities_table",
          "type" : "latest",
          "title" : "New widget",
          "sizeX" : 43,
          "sizeY" : 16,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY"
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673791233524,
                  "endTimeMs" : 1673877633524
                },
                "quickInterval" : "CURRENT_DAY"
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgba(0,0,0,0.25)",
            "color" : "rgba(255,255,255,0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Users",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : false,
              "enableStickyHeader" : true,
              "enableStickyAction" : true,
              "reserveSpaceForHiddenAction" : "false",
              "displayEntityName" : false,
              "displayEntityLabel" : false,
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false
            },
            "title" : "Users",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "dataKeys" : [ {
                "name" : "firstName",
                "type" : "entityField",
                "label" : "First name",
                "color" : "#2196f3",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.23473004693244892
              }, {
                "name" : "lastName",
                "type" : "entityField",
                "label" : "Last name",
                "color" : "#4caf50",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.7590216635879539
              }, {
                "name" : "email",
                "type" : "entityField",
                "label" : "Email",
                "color" : "#f44336",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.8026567935647766
              }, {
                "name" : "shift",
                "type" : "attribute",
                "label" : "Current Shift",
                "color" : "#ffc107",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "useCellContentFunction" : false
                },
                "_hash" : 0.8951812401590735
              } ],
              "entityAliasId" : "ef34b777-4d20-782b-a25a-b18fe97b5333"
            } ],
            "showTitleIcon" : false,
            "titleIcon" : "people",
            "iconColor" : "rgba(255,255,255,0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : { },
            "displayTimewindow" : true,
            "actions" : {
              "headerButton" : [ {
                "name" : "Add new customer user",
                "icon" : "add",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Create new user</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"(isLoading$ | async) || saving\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Email</mat-label>\n                <input matInput formControlName=\"email\" type=\"email\" required>\n            </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>First name</mat-label>\n                <input matInput formControlName=\"firstName\">\n            </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Last Name</mat-label>\n                <input matInput formControlName=\"lastName\">\n            </mat-form-field>\n        </div>\n\n        <div formGroupName=\"attributes\" fxLayout=\"column\">\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Phone Number</mat-label>\n                    <input step=\"any\" matInput formControlName=\"phoneNumber\">\n                </mat-form-field>\n            </div>\n        </div>\n        \n        <mat-form-field fxFlex class=\"mat-block\">\n            <mat-label>Activation method</mat-label>\n            <mat-select formControlName=\"userActivationMethod\">\n                <mat-option *ngFor=\"let method of activationMethods\" [value]=\"method.value\">\n                    {{ method.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Create\n        </button>\n        <button mat-button color=\"primary\"\n                style=\"margin-right: 20px;\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n    </div>\n</form>",
                "customCss" : "\n.edit-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n\n.relations-list.old-relations tb-entity-select tb-entity-autocomplete button {\n    display: none;\n} ",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\nlet customerService = $injector.get(widgetContext.servicesMap.get('customerService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet translate = $injector.get(widgetContext.servicesMap.get('translate'));\n\nlet authority = \"CUSTOMER_USER\";\nlet selected_user_group = widgetContext.stateController.getStateParams().selected_user_group;\nif (selected_user_group) {\n    openEditEntityDialog();\n    entityGroupService.getEntityGroup(selected_user_group.entityId.id).subscribe(resp=>{\n        if (resp.ownerId && resp.ownerId.entityType == \"TENANT\") {\n            authority = \"TENANT_ADMIN\";\n        }\n    });\n}\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n    vm.saving = false;\n    // vm.entityName = entityName;\n    // vm.entityType = entityId.entityType;\n    vm.entitySearchDirection = {\n        from: \"FROM\",\n        to: \"TO\"\n    };\n    \n    vm.activationMethods = [\n        {\n            value: 'displayActivationLink',\n            name: 'Display activation link'\n        },\n        {\n            value: 'sendActivationMail',\n            name: 'Send activation email'\n        }\n    ];\n    \n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        email: ['', [vm.validators.required, vm.validators.pattern(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\_\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)]],\n        firstName: [null],\n        lastName: [null],\n        userActivationMethod: ['displayActivationLink'],\n        attributes: vm.fb.group({\n            phoneNumber: [null]\n        })\n    });\n    \n    function getShifts() {\n        if (widgetContext.currentUser.authority.toLowerCase().includes(\"tenant\")){\n            return assetService.getTenantAssets(widgetContext.pageLink(100), \"Shift\");\n        } else {\n            return assetService.getCustomerAssets(widgetContext.currentUser.customerId, widgetContext.pageLink(100), \"shift\");\n        }\n    }\n    \n    function getDefaultShiftId () {\n        getShifts().subscribe(shifts=>{\n            let defaultShift = shifts.data.find(el=>el.label === \"Default Shift\");\n            if (defaultShift) {\n            vm.shift = defaultShift;\n            } else {\n                let customerName = \"\";\n                customerService.getCustomer(widgetContext.currentUser.customerId).subscribe(resp=>{\n                    customerName = resp.name;\n                    createDefaultShift(customerName);\n                }, err=>{\n                    createDefaultShift(customerName);\n                });\n            }\n            console.log(vm.shift);\n        });\n    }\n    \n    function createShiftRelation(entityId) {\n        let newRelation = {\n            to: vm.shift.id,\n            from: entityId,\n            type: \"Manages\",\n            typeGroup: \"COMMON\"\n        };\n        return entityRelationService.saveRelation(newRelation);\n    }\n    \n    function createDefaultShift(customerName) {\n        var entityShift = {\n            name: \"Default Shift-\"+customerName,\n            label: \"Default Shift\",\n            type: 'shift'\n            };\n        assetService.saveAsset(entityShift).subscribe(shift=>{\n            vm.shift = shift;\n            attributeService.saveEntityAttributes(shift.id, \"SERVER_SCOPE\", [{key: \"schedule\", value: {\"Monday\":{\"startTime\":{\"hours\":8,\"minutes\":0},\"endTime\":{\"hours\":17,\"minutes\":0}},\"Tuesday\":{\"startTime\":{\"hours\":8,\"minutes\":0},\"endTime\":{\"hours\":17,\"minutes\":0}},\"Thursday\":{\"startTime\":{\"hours\":8,\"minutes\":0},\"endTime\":{\"hours\":17,\"minutes\":0}},\"Wednesday\":{\"startTime\":{\"hours\":8,\"minutes\":0},\"endTime\":{\"hours\":17,\"minutes\":0}},\"Friday\":{\"startTime\":{\"hours\":8,\"minutes\":0},\"endTime\":{\"hours\":17,\"minutes\":0}}}\n            }]);\n        });\n    }\n    \n    getDefaultShiftId();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.saving = true;\n        vm.editEntityFormGroup.markAsPristine();\n        const formValues = vm.editEntityFormGroup.value;\n        const sendActivationMail = (formValues.userActivationMethod === 'sendActivationMail');\n        console.log('sendActivationMail', sendActivationMail)\n        formValues.authority = authority;\n        console.log('formValues', formValues)\n        userService.saveUser(formValues, sendActivationMail, selected_user_group.entityId.id).subscribe(\n            user => {\n                let newRelation = {\n                    to: vm.shift.id,\n                    from: user.id,\n                    type: \"Manages\",\n                    typeGroup: \"COMMON\"\n                };\n                entityRelationService.saveRelation(newRelation).subscribe();\n                saveAttributes(user.id).subscribe(\n                    () => {\n                        vm.saving = false;\n                        widgetContext.updateAliases();\n                        if (formValues.userActivationMethod === 'displayActivationLink') {\n                            userService.getActivationLink(user.id.id).subscribe(\n                                (activationLink) => {\n                                    displayActivationLink(activationLink).subscribe(\n                                        () => {\n                                            vm.dialogRef.close(null);\n                                        }\n                                    );\n                                }\n                            );\n                        } else {\n                            vm.dialogRef.close(null);\n                        }\n                    },\n                    () => {\n                        vm.saving = false;\n                    }\n                );\n            }\n        );\n        \n        \n        /*saveEntity().subscribe(user => {\n          widgetContext.rxjs.forkJoin([\n            saveAttributes(user.id),\n            createShiftRelation(user.id)\n        ]).subscribe(\n            function () {\n                vm.saving = false;\n                widgetContext.updateAliases();\n                if (sendActivationMail) {\n                    userService.getActivationLink(user.id.id).subscribe(\n                        (activationLink) => {\n                            displayActivationLink(activationLink).subscribe(\n                                () => {\n                                    vm.dialogRef.close(null);\n                                }\n                            );\n                        }\n                    );\n                } else {\n                    vm.dialogRef.close(null);\n                }\n            }\n        );  \n        }\n        );*/\n    };\n\n\n\n    // function saveEntity() {\n    //     const formValues = vm.editEntityFormGroup.value;\n    //     vm.sendActivationMail = (formValues.userActivationMethod === 'sendActivationMail');\n    //     formValues.authority = authority;\n    //     return userService.saveUser(formValues, vm.sendActivationMail, selected_user_group.entityId.id);\n    // }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        attributesArray.push({key:\"shift\", value: vm.shift.label || vm.shift.name});\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n    \n    function displayActivationLink(activationLink) {\n        const template = '<form style=\"min-width: 400px;\">\\n' +\n            '  <mat-toolbar color=\"primary\">\\n' +\n            '    <h2 translate>user.activation-link</h2>\\n' +\n            '    <span fxFlex></span>\\n' +\n            '    <button mat-button mat-icon-button\\n' +\n            '            (click)=\"close()\"\\n' +\n            '            type=\"button\">\\n' +\n            '      <mat-icon class=\"material-icons\">close</mat-icon>\\n' +\n            '    </button>\\n' +\n            '  </mat-toolbar>\\n' +\n            '  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\\n' +\n            '  </mat-progress-bar>\\n' +\n            '  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\\n' +\n            '  <div mat-dialog-content tb-toast toastTarget=\"activationLinkDialogContent\">\\n' +\n            '    <div class=\"mat-content\" fxLayout=\"column\">\\n' +\n            '      <span [innerHTML]=\"\\'user.activation-link-text\\' | translate: {activationLink: activationLink}\"></span>\\n' +\n            '      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\\n' +\n            '        <pre class=\"tb-highlight\" fxFlex><code>{{ activationLink }}</code></pre>\\n' +\n            '        <button mat-icon-button\\n' +\n            '                color=\"primary\"\\n' +\n            '                ngxClipboard\\n' +\n            '                cbContent=\"{{ activationLink }}\"\\n' +\n            '                (cbOnSuccess)=\"onActivationLinkCopied()\"\\n' +\n            '                matTooltip=\"{{ \\'user.copy-activation-link\\' | translate }}\"\\n' +\n            '                matTooltipPosition=\"above\">\\n' +\n            '          <mat-icon svgIcon=\"mdi:clipboard-arrow-left\"></mat-icon>\\n' +\n            '        </button>\\n' +\n            '      </div>\\n' +\n            '    </div>\\n' +\n            '  </div>\\n' +\n            '  <div mat-dialog-actions fxLayoutAlign=\"end center\">\\n' +\n            '    <button mat-button color=\"primary\"\\n' +\n            '            type=\"button\"\\n' +\n            '            cdkFocusInitial\\n' +\n            '            [disabled]=\"(isLoading$ | async)\"\\n' +\n            '            (click)=\"close()\">\\n' +\n            '      {{ \\'action.ok\\' | translate }}\\n' +\n            '    </button>\\n' +\n            '  </div>\\n' +\n            '</form>';\n        return customDialog.customDialog(template, ActivationLinkDialogController, {activationLink: activationLink});\n    }\n\n    function ActivationLinkDialogController(instance) {\n        var vm = instance;\n\n        vm.activationLink = instance.data.activationLink;\n\n        vm.onActivationLinkCopied = onActivationLinkCopied;\n        vm.close = close;\n\n        function onActivationLinkCopied(){\n            widgetContext.showSuccessToast(translate.instant('user.activation-link-copied-message'), 1000, 'bottom', 'left', 'activationLinkDialogContent');\n        }\n\n        function close() {\n            vm.dialogRef.close(null);\n        }\n    }\n\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "f979bf83-690f-20b9-ee65-6baec6459122"
              }, {
                "name" : "Go to Shift management",
                "icon" : "perm_contact_calendar",
                "type" : "openDashboard",
                "targetDashboardStateId" : null,
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openNewBrowserTab" : null,
                "targetDashboardId" : "734ce180-a6c1-11ec-a249-29abcfd69a2d",
                "id" : "aba0ddb4-3e24-ecff-0472-b60c3ff3386a"
              } ],
              "actionCellButton" : [ {
                "name" : "Move User To Group",
                "icon" : "people",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "return widgetContext.currentUser.sub !== data.Email;",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Add {{entityName}} to group</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <mat-form-field class=\"example-full-width\" >\n            <mat-label>User group</mat-label>\n            <input type=\"text\" matInput  formControlName=\"assetGroup\" [matAutocomplete]=\"auto\" placeholder=\"Asset group\" required>\n            <mat-autocomplete #auto=\"matAutocomplete\">\n                <mat-option *ngFor=\"let group of groupFilterArray()\" [value]=\"group\">\n                    {{group}}\n                </mat-option>\n            </mat-autocomplete>\n        </mat-form-field>\n\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || loading || editEntityForm.invalid || !editEntityForm.dirty || invalid()\">\n            Save\n        </button>\n        <button mat-button color=\"primary\"\n                style=\"margin-right: 20px;\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n    </div>\n</form>",
                "customCss" : "\n.edit-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n\n.relations-list.old-relations tb-entity-select tb-entity-autocomplete button {\n    display: none;\n} ",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\n\nconsole.log('widgetContext', widgetContext)\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n    \n    const currentGroupId = widgetContext.stateController.getStateParams().selected_user_group.id.id;\n\n    vm.entityName = entityName;\n    vm.entityType = entityId.entityType;\n    vm.groupArray = [];\n    vm.loading = true;\n    vm.currentUser = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        assetGroup: ['', [vm.validators.required]]\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n\n    vm.save = function() {\n        vm.loading = true;\n        vm.editEntityFormGroup.markAsPristine();\n        const targetGroup = vm.groupArray.filter(group => group.name == vm.editEntityFormGroup.controls.assetGroup.value)[0];\n        const targetGroupId = targetGroup.id.id;\n        const targetGroupName = targetGroup.name;\n\n        let body = {\n            email: vm.currentUser.email,\n            groupName: targetGroupName\n        };\n        let config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Authorization': 'Bearer ' + localStorage.getItem('jwt_token')\n            },\n            params: {\n                ignoreLoading: false,\n                ignoreErrors: false,\n                resendRequest: false\n            }\n        };\n        \n        widgetContext.http.post('api/rule-engine/', body, config).subscribe();\n        \n        widgetContext.rxjs.forkJoin([\n            entityGroupService.removeEntityFromEntityGroup(currentGroupId, entityId.id),\n            entityGroupService.addEntityToEntityGroup(targetGroupId, entityId.id)\n        ]).subscribe(\n            function () {\n                vm.loading = false;\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n        \n        /*entityGroupService.addEntityToEntityGroup(id, entityId.id).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );*/\n    };\n    \n    vm.invalid = function () {\n        return !vm.groupArray.some(group=>group.name == vm.editEntityFormGroup.controls.assetGroup.value);\n    };\n\n\n    function getEntityInfo() {\n        userService.getUser(entityId.id).subscribe(\n            user => {\n                vm.currentUser = user;\n                console.log('user', vm.currentUser)\n            }\n        )\n        entityGroupService.getEntityGroups(\"USER\").subscribe(\n            groups => {\n                vm.groupArray = groups.filter(\n                    group => group.name !== \"All\"\n                );\n                vm.groupArray = vm.groupArray.filter(\n                    group => group.id.id !== currentGroupId\n                );\n                vm.loading = false;\n            }\n        );\n    }\n    \n    vm.groupFilterArray = function () {\n        let assetGroupValue = vm.editEntityFormGroup.controls.assetGroup.value;\n        let newArray = [];\n        if (vm.groupArray && vm.groupArray.length) { \n            newArray = vm.groupArray.filter(value=>{\n             return value.name.toLowerCase().indexOf(assetGroupValue.toLowerCase()) === 0;\n             }).map(el=>el.name);\n        }\n        return newArray;\n    };\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "99b07dd0-319b-3425-c5db-ebfe1240a464"
              }, {
                "name" : "Remove user from group",
                "icon" : "remove_circle_outline",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "return widgetContext.currentUser.sub !== data.Email;",
                "type" : "customPretty",
                "customHtml" : "<!--=======================================================================-->\n<!--=====  There are two example templates: for edit and add entity   =====-->\n<!--=======================================================================-->\n<!--========================  Edit entity example  ========================-->\n<!--=======================================================================-->\n<!-- -->\n<!--<md-dialog aria-label=\"Edit entity\">-->\n<!--    <form name=\"editEntityForm\" class=\"edit-entity-form\" ng-submit=\"vm.save()\">-->\n<!--        <md-toolbar>-->\n<!--            <div class=\"md-toolbar-tools\">-->\n<!--                <h2>Edit {{vm.entityType.toLowerCase()}} {{vm.entityName}}</h2>-->\n<!--                <span flex></span>-->\n<!--                <md-button class=\"md-icon-button\" ng-click=\"vm.cancel()\">-->\n<!--                    <ng-md-icon icon=\"close\" aria-label=\"Close\"></ng-md-icon>-->\n<!--                </md-button>-->\n<!--            </div>-->\n<!--        </md-toolbar>-->\n<!--        <md-dialog-content>-->\n<!--            <div class=\"md-dialog-content\">-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Entity Name</label>-->\n<!--                        <input ng-model=\"vm.entityName\" readonly>-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Entity Type</label>-->\n<!--                        <input ng-model=\"vm.entityType\" readonly>-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Type</label>-->\n<!--                        <input ng-model=\"vm.type\" readonly>-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Latitude</label>-->\n<!--                        <input name=\"latitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.latitude\">-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Longitude</label>-->\n<!--                        <input name=\"longitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.longitude\">-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                 <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Address</label>-->\n<!--                        <input ng-model=\"vm.attributes.address\">-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Owner</label>-->\n<!--                        <input ng-model=\"vm.attributes.owner\">-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Integer Value</label>-->\n<!--                        <input name=\"integerNumber\" type=\"number\" step=\"1\" ng-pattern=\"/^-?[0-9]+$/\" ng-model=\"vm.attributes.number\">-->\n<!--                        <div ng-messages=\"editEntityForm.integerNumber.$error\">-->\n<!--                            <div ng-message=\"pattern\">Invalid integer value.</div>-->\n<!--                        </div>-->\n<!--                    </md-input-container>-->\n<!--                    <div class=\"boolean-value-input\" layout=\"column\" layout-align=\"center start\" flex>-->\n<!--                        <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                        <md-checkbox ng-model=\"vm.attributes.booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                            {{ (vm.attributes.booleanValue ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                        </md-checkbox>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--                <div class=\"relations-list old-relations\">-->\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--                    <div class=\"body\" ng-show=\"vm.relations.length\">-->\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.relations track by $index\">-->\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px; margin-bottom: 3px;\">-->\n<!--                                <div flex layout=\"column\">-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\n<!--                                            <label>Direction</label>-->\n<!--                                            <md-select ng-disabled=\"true\" required ng-model=\"relation.direction\">-->\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\n<!--                                                </md-option>-->\n<!--                                            </md-select>-->\n<!--                                        </md-input-container>-->\n<!--                                        <tb-relation-type-autocomplete ng-disabled=\"true\" flex class=\"md-block\"-->\n<!--                                           the-form=\"editEntityForm\"-->\n<!--                                           ng-model=\"relation.relationType\"-->\n<!--                                           tb-required=\"true\">-->\n<!--                                        </tb-relation-type-autocomplete>-->\n<!--                                    </div>-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\n<!--                                            the-form=\"editEntityForm\"-->\n<!--                                            ng-disabled=\"true\"-->\n<!--                                            tb-required=\"true\"-->\n<!--                                            ng-model=\"relation.relatedEntity\">-->\n<!--                                        </tb-entity-select>-->\n<!--                                    </div>-->\n<!--                                </div>-->\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\n<!--                                               ng-click=\"vm.removeOldRelation($index,relation)\" aria-label=\"Remove\">-->\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\n<!--                                            close-->\n<!--                                        </md-icon>-->\n<!--                                    </md-button>-->\n<!--                                </div>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--                <div class=\"relations-list\">-->\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">New Relations</div>-->\n<!--                    <div class=\"body\" ng-show=\"vm.newRelations.length\">-->\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.newRelations track by $index\">-->\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px; margin-bottom: 3px;\">-->\n<!--                                <div flex layout=\"column\">-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\n<!--                                            <label>Direction</label>-->\n<!--                                            <md-select name=\"direction\" required ng-model=\"relation.direction\">-->\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\n<!--                                                </md-option>-->\n<!--                                            </md-select>-->\n<!--                                            <div ng-messages=\"editEntityForm.direction.$error\">-->\n<!--                                                <div ng-message=\"required\">Relation direction is required.</div>-->\n<!--                                            </div>-->\n<!--                                        </md-input-container>-->\n<!--                                        <tb-relation-type-autocomplete flex class=\"md-block\"-->\n<!--                                           the-form=\"editEntityForm\"-->\n<!--                                           ng-model=\"relation.relationType\"-->\n<!--                                           tb-required=\"true\">-->\n<!--                                        </tb-relation-type-autocomplete>-->\n<!--                                    </div>-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\n<!--                                            the-form=\"editEntityForm\"-->\n<!--                                            tb-required=\"true\"-->\n<!--                                            ng-model=\"relation.relatedEntity\">-->\n<!--                                        </tb-entity-select>-->\n<!--                                    </div>-->\n<!--                                </div>-->\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\n<!--                                               ng-click=\"vm.removeRelation($index)\" aria-label=\"Remove\">-->\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\n<!--                                            close-->\n<!--                                        </md-icon>-->\n<!--                                    </md-button>-->\n<!--                                </div>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                   <div>-->\n<!--                       <md-button class=\"md-primary md-raised\" ng-click=\"vm.addRelation()\" aria-label=\"Add\">-->\n<!--                           <md-tooltip md-direction=\"top\">Add Relation</md-tooltip>-->\n<!--                           Add-->\n<!--                       </md-button>-->\n<!--                   </div> -->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </md-dialog-content>-->\n<!--        <md-dialog-actions>-->\n<!--            <md-button type=\"submit\" ng-disabled=\"editEntityForm.$invalid || !editEntityForm.$dirty\" class=\"md-raised md-primary\">Save</md-button>-->\n<!--            <md-button ng-click=\"vm.cancel()\" class=\"md-primary\">Cancel</md-button>-->\n<!--        </md-dialog-actions>-->\n<!--    </form>-->\n<!--</md-dialog>-->\n<!---->\n<!--========================================================================-->\n<!--=========================  Add entity example  =========================-->\n<!--========================================================================-->\n<!---->\n<!--<md-dialog aria-label=\"Add entity\">-->\n<!--    <form name=\"addEntityForm\" class=\"add-entity-form\" ng-submit=\"vm.save()\">-->\n<!--        <md-toolbar>-->\n<!--            <div class=\"md-toolbar-tools\">-->\n<!--                <h2>Add entity</h2>-->\n<!--                <span flex></span>-->\n<!--                <md-button class=\"md-icon-button\" ng-click=\"vm.cancel()\">-->\n<!--                    <ng-md-icon icon=\"close\" aria-label=\"Close\"></ng-md-icon>-->\n<!--                </md-button>-->\n<!--            </div>-->\n<!--        </md-toolbar>-->\n<!--        <md-dialog-content>-->\n<!--            <div class=\"md-dialog-content\">-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Entity Name</label>-->\n<!--                        <input ng-model=\"vm.entityName\" name=entityName required>-->\n<!--                        <div ng-messages=\"addEntityForm.entityName.$error\">-->\n<!--                            <div ng-message=\"required\">Entity name is required.</div>-->\n<!--                        </div>-->\n<!--                    </md-input-container>-->\n<!--                    <tb-entity-type-select class=\"md-block\" style=\"min-width: 100px; width: 100px;\"-->\n<!--                       the-form=\"addEntityForm\"-->\n<!--                       tb-required=\"true\"-->\n<!--                       allowed-entity-types=\"vm.allowedEntityTypes\"-->\n<!--                       ng-model=\"vm.entityType\">-->\n<!--                    </tb-entity-type-select>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Entity Subtype</label>-->\n<!--                        <input ng-model=\"vm.type\" name=type required>-->\n<!--                        <div ng-messages=\"addEntityForm.type.$error\">-->\n<!--                            <div ng-message=\"required\">Entity subtype is required.</div>-->\n<!--                        </div>-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Latitude</label>-->\n<!--                        <input name=\"latitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.latitude\">-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Longitude</label>-->\n<!--                        <input name=\"longitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.longitude\">-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                 <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Address</label>-->\n<!--                        <input ng-model=\"vm.attributes.address\">-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Owner</label>-->\n<!--                        <input ng-model=\"vm.attributes.owner\">-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Integer Value</label>-->\n<!--                        <input name=\"integerNumber\" type=\"number\" step=\"1\" ng-pattern=\"/^-?[0-9]+$/\" ng-model=\"vm.attributes.number\">-->\n<!--                        <div ng-messages=\"addEntityForm.integerNumber.$error\">-->\n<!--                            <div ng-message=\"pattern\">Invalid integer value.</div>-->\n<!--                        </div>-->\n<!--                    </md-input-container>-->\n<!--                    <div class=\"boolean-value-input\" layout=\"column\" layout-align=\"center start\" flex>-->\n<!--                        <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                        <md-checkbox ng-model=\"vm.attributes.booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                            {{ (vm.attributes.booleanValue ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                        </md-checkbox>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--                <div class=\"relations-list\">-->\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--                    <div class=\"body\" ng-show=\"vm.relations.length\">-->\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.relations track by $index\">-->\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px;\">-->\n<!--                                <div flex layout=\"column\">-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\n<!--                                            <label>Direction</label>-->\n<!--                                            <md-select name=\"direction\" required ng-model=\"relation.direction\">-->\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\n<!--                                                </md-option>-->\n<!--                                            </md-select>-->\n<!--                                            <div ng-messages=\"addEntityForm.direction.$error\">-->\n<!--                                                <div ng-message=\"required\">Relation direction is required.</div>-->\n<!--                                            </div>-->\n<!--                                        </md-input-container>-->\n<!--                                        <tb-relation-type-autocomplete flex class=\"md-block\"-->\n<!--                                           the-form=\"addEntityForm\"-->\n<!--                                           ng-model=\"relation.relationType\"-->\n<!--                                           tb-required=\"true\">-->\n<!--                                        </tb-relation-type-autocomplete>-->\n<!--                                    </div>-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\n<!--                                            the-form=\"addEntityForm\"-->\n<!--                                            tb-required=\"true\"-->\n<!--                                            ng-model=\"relation.relatedEntity\">-->\n<!--                                        </tb-entity-select>-->\n<!--                                    </div>-->\n<!--                                </div>-->\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\n<!--                                               ng-click=\"vm.removeRelation($index)\" aria-label=\"Remove\">-->\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\n<!--                                            close-->\n<!--                                        </md-icon>-->\n<!--                                    </md-button>-->\n<!--                                </div>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                   <div>-->\n<!--                       <md-button class=\"md-primary md-raised\" ng-click=\"vm.addRelation()\" aria-label=\"Add\">-->\n<!--                           <md-tooltip md-direction=\"top\">Add Relation</md-tooltip>-->\n<!--                           Add-->\n<!--                       </md-button>-->\n<!--                   </div> -->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </md-dialog-content>-->\n<!--        <md-dialog-actions>-->\n<!--            <md-button type=\"submit\" ng-disabled=\"addEntityForm.$invalid || !addEntityForm.$dirty\" class=\"md-raised md-primary\">Create</md-button>-->\n<!--            <md-button ng-click=\"vm.cancel()\" class=\"md-primary\">Cancel</md-button>-->\n<!--        </md-dialog-actions>-->\n<!--    </form>-->\n<!--</md-dialog>-->\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n\n.relations-list.old-relations tb-entity-select tb-entity-autocomplete button {\n    display: none;\n} \n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\nlet selected_user_group = widgetContext.stateController.getStateParams().selected_user_group;\nopenDeleteEntityDialog();selected_user_group\n\nfunction openDeleteEntityDialog() {\n    let title = 'Remove  ' +\n                entityName + ' from current group';\n    let content = 'Are you sure you want to remove the '  + entityName + ' from the group?';\n    dialogs.confirm(title, content, 'Cancel', 'Remove').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n}\n\nfunction deleteEntity() {\n    deleteEntityObservable(entityId).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction deleteEntityObservable(entityId) {\n    return entityGroupService.removeEntityFromEntityGroup(selected_user_group.entityId.id, entityId.id);\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while removing the entity. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "6cf960f2-323b-b164-308c-e66d945ecc37"
              }, {
                "name" : "User Status",
                "icon" : "lock_open",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "",
                "customCss" : "",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\nlet selected_asset_group = widgetContext.stateController.getStateParams().selected_asset_group;\nlet userActive = false;\n// openDeleteEntityDialog();\nuserService.getUser(entityId.id).subscribe(user=>{\n    userActive = user.additionalInfo.userCredentialsEnabled ;\n    if (user.additionalInfo.userCredentialsEnabled === undefined) {\n        userActive = true;\n    } else {\n        userActive = user.additionalInfo.userCredentialsEnabled;\n    }\n    openDeleteEntityDialog();\n});\n\nfunction openDeleteEntityDialog() {\n    let title = 'Change '  + entityName + ' status';\n    let content = 'Are you sure you want to ' + (userActive? \"deactivate \" : \"activate \") + entityName + '?';\n    dialogs.confirm(title, content, 'Cancel', userActive? \"Deactivate\" : \"Activate\").subscribe(\n        function(result) {\n            if (result) {\n                changeStatus();\n            }\n        }\n    );\n}\n\nfunction changeStatus() {\n    userService.setUserCredentialsEnabled(entityId.id, !userActive).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while changing user status. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "8f47428d-2741-9e8a-4793-4d4eef6092b2"
              }, {
                "name" : "Assign user to shift",
                "icon" : "schedule",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Change {{entityName}} Shift</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <tb-entity-autocomplete\n            fxFlex\n            required\n            entityType=\"ASSET\"\n            entitySubtype=\"Shift\"\n            labelText=\"User Shift\"\n            [useFullEntityId]=\"true\"\n            formControlName=\"shift\">\n          </tb-entity-autocomplete>\n        </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n        <button mat-button color=\"primary\"\n                style=\"margin-right: 20px;\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n    </div>\n</form>\n",
                "customCss" : "\n.edit-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n\n.relations-list.old-relations tb-entity-select tb-entity-autocomplete button {\n    display: none;\n} ",
                "customFunction" : "\nlet $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet currentShift = null;\nfindCurrentShift();\n    function findCurrentShift () {\n        entityRelationService.findByFromAndType(entityId, \"Manages\").subscribe(resp=>{\n            if (resp && resp.length ) {\n            currentShift = resp[0].to;\n            }\n            openEditEntityDialog();\n        });\n    }\n\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entityType = entityId.entityType;\n\n    vm.editEntityFormGroup = vm.fb.group({\n        shift: [currentShift, [vm.validators.required]],\n    });\n    \n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n    \n\n    vm.save = function() {\n        assetService.getAsset(vm.editEntityFormGroup.value.shift.id).subscribe(shift=>{\nvm.editEntityFormGroup.markAsPristine();\n        let newRelation = {\n            to: vm.editEntityFormGroup.value.shift,\n            from: entityId,\n            type: \"Manages\",\n            typeGroup: \"COMMON\"\n            \n        };\n        let tasks = [entityRelationService.saveRelation(newRelation)];\n        if (currentShift) {\n            tasks.push(entityRelationService.deleteRelation(entityId, \"Manages\", currentShift));\n        }\n        tasks.push(attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", [{key: \"shift\", value: shift.label || shift.name}]));\n        widgetContext.rxjs.forkJoin(tasks).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n        });\n        \n    };\n\n}",
                "customResources" : [ ],
                "id" : "4bbc50d3-1b61-fc7d-274c-21711a1f049a"
              }, {
                "name" : "Edit User",
                "icon" : "edit",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit {{entityType.toLowerCase()}} {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Email</mat-label>\n                <input matInput formControlName=\"email\" type=\"email\" required>\n            </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>First name</mat-label>\n                <input matInput formControlName=\"firstName\">\n            </mat-form-field>\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>Last Name</mat-label>\n                <input matInput formControlName=\"lastName\">\n            </mat-form-field>\n        </div>\n\n        <div formGroupName=\"attributes\" fxLayout=\"column\">\n            <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n                <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Phone Number</mat-label>\n                    <input step=\"any\" matInput formControlName=\"phoneNumber\">\n                </mat-form-field>\n            </div>\n        </div>\n\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n        <button mat-button color=\"primary\"\n                style=\"margin-right: 20px;\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n    </div>\n</form>",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n\n.relations-list.old-relations tb-entity-select tb-entity-autocomplete button {\n    display: none;\n} \n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entityType = entityId.entityType;\n    vm.entitySearchDirection = {\n        from: \"FROM\",\n        to: \"TO\"\n    };\n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        email: ['', [vm.validators.required, vm.validators.pattern(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\_\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)]],\n        firstName: [null],\n        lastName: [null],\n        attributes: vm.fb.group({\n            phoneNumber: [null]\n        })\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n            saveEntity()\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n\n\n    function getEntityInfo() {\n        entityService.getEntity(entityId.entityType, entityId.id).subscribe(function (entity) {\n            vm.entity = entity;\n            \n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['phoneNumber']).subscribe(\n                function (data) {\n                    let attributes = {\n                        phoneNumber: null\n                    };\n                    if (data && data.length && data[0].key == \"phoneNumber\") {\n                        attributes.phoneNumber = data[0].value;\n                    }\n                    vm.editEntityFormGroup.patchValue({\n                        email: vm.entity.email,\n                        firstName: vm.entity.firstName,\n                        lastName: vm.entity.lastName,\n                        attributes: attributes\n                    }, {emitEvent: false});\n                }\n            );\n        });\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        return userService.saveUser({...vm.entity, ... formValues});\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key]) {\n                attributesArray.push({key: key, value: attributes[key]});\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        } else {\n            return widgetContext.rxjs.of([]);\n        }\n    }\n\n}",
                "customResources" : [ ],
                "id" : "810b4be9-7492-0ee2-21fc-59a2f49d3151"
              }, {
                "name" : "Delete User",
                "icon" : "delete",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "return widgetContext.currentUser.sub !== data.Email;",
                "type" : "customPretty",
                "customHtml" : "<!--=======================================================================-->\n<!--=====  There are two example templates: for edit and add entity   =====-->\n<!--=======================================================================-->\n<!--========================  Edit entity example  ========================-->\n<!--=======================================================================-->\n<!-- -->\n<!--<md-dialog aria-label=\"Edit entity\">-->\n<!--    <form name=\"editEntityForm\" class=\"edit-entity-form\" ng-submit=\"vm.save()\">-->\n<!--        <md-toolbar>-->\n<!--            <div class=\"md-toolbar-tools\">-->\n<!--                <h2>Edit {{vm.entityType.toLowerCase()}} {{vm.entityName}}</h2>-->\n<!--                <span flex></span>-->\n<!--                <md-button class=\"md-icon-button\" ng-click=\"vm.cancel()\">-->\n<!--                    <ng-md-icon icon=\"close\" aria-label=\"Close\"></ng-md-icon>-->\n<!--                </md-button>-->\n<!--            </div>-->\n<!--        </md-toolbar>-->\n<!--        <md-dialog-content>-->\n<!--            <div class=\"md-dialog-content\">-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Entity Name</label>-->\n<!--                        <input ng-model=\"vm.entityName\" readonly>-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Entity Type</label>-->\n<!--                        <input ng-model=\"vm.entityType\" readonly>-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Type</label>-->\n<!--                        <input ng-model=\"vm.type\" readonly>-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Latitude</label>-->\n<!--                        <input name=\"latitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.latitude\">-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Longitude</label>-->\n<!--                        <input name=\"longitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.longitude\">-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                 <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Address</label>-->\n<!--                        <input ng-model=\"vm.attributes.address\">-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Owner</label>-->\n<!--                        <input ng-model=\"vm.attributes.owner\">-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Integer Value</label>-->\n<!--                        <input name=\"integerNumber\" type=\"number\" step=\"1\" ng-pattern=\"/^-?[0-9]+$/\" ng-model=\"vm.attributes.number\">-->\n<!--                        <div ng-messages=\"editEntityForm.integerNumber.$error\">-->\n<!--                            <div ng-message=\"pattern\">Invalid integer value.</div>-->\n<!--                        </div>-->\n<!--                    </md-input-container>-->\n<!--                    <div class=\"boolean-value-input\" layout=\"column\" layout-align=\"center start\" flex>-->\n<!--                        <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                        <md-checkbox ng-model=\"vm.attributes.booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                            {{ (vm.attributes.booleanValue ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                        </md-checkbox>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--                <div class=\"relations-list old-relations\">-->\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--                    <div class=\"body\" ng-show=\"vm.relations.length\">-->\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.relations track by $index\">-->\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px; margin-bottom: 3px;\">-->\n<!--                                <div flex layout=\"column\">-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\n<!--                                            <label>Direction</label>-->\n<!--                                            <md-select ng-disabled=\"true\" required ng-model=\"relation.direction\">-->\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\n<!--                                                </md-option>-->\n<!--                                            </md-select>-->\n<!--                                        </md-input-container>-->\n<!--                                        <tb-relation-type-autocomplete ng-disabled=\"true\" flex class=\"md-block\"-->\n<!--                                           the-form=\"editEntityForm\"-->\n<!--                                           ng-model=\"relation.relationType\"-->\n<!--                                           tb-required=\"true\">-->\n<!--                                        </tb-relation-type-autocomplete>-->\n<!--                                    </div>-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\n<!--                                            the-form=\"editEntityForm\"-->\n<!--                                            ng-disabled=\"true\"-->\n<!--                                            tb-required=\"true\"-->\n<!--                                            ng-model=\"relation.relatedEntity\">-->\n<!--                                        </tb-entity-select>-->\n<!--                                    </div>-->\n<!--                                </div>-->\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\n<!--                                               ng-click=\"vm.removeOldRelation($index,relation)\" aria-label=\"Remove\">-->\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\n<!--                                            close-->\n<!--                                        </md-icon>-->\n<!--                                    </md-button>-->\n<!--                                </div>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--                <div class=\"relations-list\">-->\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">New Relations</div>-->\n<!--                    <div class=\"body\" ng-show=\"vm.newRelations.length\">-->\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.newRelations track by $index\">-->\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px; margin-bottom: 3px;\">-->\n<!--                                <div flex layout=\"column\">-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\n<!--                                            <label>Direction</label>-->\n<!--                                            <md-select name=\"direction\" required ng-model=\"relation.direction\">-->\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\n<!--                                                </md-option>-->\n<!--                                            </md-select>-->\n<!--                                            <div ng-messages=\"editEntityForm.direction.$error\">-->\n<!--                                                <div ng-message=\"required\">Relation direction is required.</div>-->\n<!--                                            </div>-->\n<!--                                        </md-input-container>-->\n<!--                                        <tb-relation-type-autocomplete flex class=\"md-block\"-->\n<!--                                           the-form=\"editEntityForm\"-->\n<!--                                           ng-model=\"relation.relationType\"-->\n<!--                                           tb-required=\"true\">-->\n<!--                                        </tb-relation-type-autocomplete>-->\n<!--                                    </div>-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\n<!--                                            the-form=\"editEntityForm\"-->\n<!--                                            tb-required=\"true\"-->\n<!--                                            ng-model=\"relation.relatedEntity\">-->\n<!--                                        </tb-entity-select>-->\n<!--                                    </div>-->\n<!--                                </div>-->\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\n<!--                                               ng-click=\"vm.removeRelation($index)\" aria-label=\"Remove\">-->\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\n<!--                                            close-->\n<!--                                        </md-icon>-->\n<!--                                    </md-button>-->\n<!--                                </div>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                   <div>-->\n<!--                       <md-button class=\"md-primary md-raised\" ng-click=\"vm.addRelation()\" aria-label=\"Add\">-->\n<!--                           <md-tooltip md-direction=\"top\">Add Relation</md-tooltip>-->\n<!--                           Add-->\n<!--                       </md-button>-->\n<!--                   </div> -->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </md-dialog-content>-->\n<!--        <md-dialog-actions>-->\n<!--            <md-button type=\"submit\" ng-disabled=\"editEntityForm.$invalid || !editEntityForm.$dirty\" class=\"md-raised md-primary\">Save</md-button>-->\n<!--            <md-button ng-click=\"vm.cancel()\" class=\"md-primary\">Cancel</md-button>-->\n<!--        </md-dialog-actions>-->\n<!--    </form>-->\n<!--</md-dialog>-->\n<!---->\n<!--========================================================================-->\n<!--=========================  Add entity example  =========================-->\n<!--========================================================================-->\n<!---->\n<!--<md-dialog aria-label=\"Add entity\">-->\n<!--    <form name=\"addEntityForm\" class=\"add-entity-form\" ng-submit=\"vm.save()\">-->\n<!--        <md-toolbar>-->\n<!--            <div class=\"md-toolbar-tools\">-->\n<!--                <h2>Add entity</h2>-->\n<!--                <span flex></span>-->\n<!--                <md-button class=\"md-icon-button\" ng-click=\"vm.cancel()\">-->\n<!--                    <ng-md-icon icon=\"close\" aria-label=\"Close\"></ng-md-icon>-->\n<!--                </md-button>-->\n<!--            </div>-->\n<!--        </md-toolbar>-->\n<!--        <md-dialog-content>-->\n<!--            <div class=\"md-dialog-content\">-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Entity Name</label>-->\n<!--                        <input ng-model=\"vm.entityName\" name=entityName required>-->\n<!--                        <div ng-messages=\"addEntityForm.entityName.$error\">-->\n<!--                            <div ng-message=\"required\">Entity name is required.</div>-->\n<!--                        </div>-->\n<!--                    </md-input-container>-->\n<!--                    <tb-entity-type-select class=\"md-block\" style=\"min-width: 100px; width: 100px;\"-->\n<!--                       the-form=\"addEntityForm\"-->\n<!--                       tb-required=\"true\"-->\n<!--                       allowed-entity-types=\"vm.allowedEntityTypes\"-->\n<!--                       ng-model=\"vm.entityType\">-->\n<!--                    </tb-entity-type-select>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Entity Subtype</label>-->\n<!--                        <input ng-model=\"vm.type\" name=type required>-->\n<!--                        <div ng-messages=\"addEntityForm.type.$error\">-->\n<!--                            <div ng-message=\"required\">Entity subtype is required.</div>-->\n<!--                        </div>-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Latitude</label>-->\n<!--                        <input name=\"latitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.latitude\">-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Longitude</label>-->\n<!--                        <input name=\"longitude\" type=\"number\" step=\"any\" ng-model=\"vm.attributes.longitude\">-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                 <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Address</label>-->\n<!--                        <input ng-model=\"vm.attributes.address\">-->\n<!--                    </md-input-container>-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Owner</label>-->\n<!--                        <input ng-model=\"vm.attributes.owner\">-->\n<!--                    </md-input-container>-->\n<!--                </div>-->\n<!--                <div layout=\"row\">-->\n<!--                    <md-input-container flex class=\"md-block\">-->\n<!--                        <label>Integer Value</label>-->\n<!--                        <input name=\"integerNumber\" type=\"number\" step=\"1\" ng-pattern=\"/^-?[0-9]+$/\" ng-model=\"vm.attributes.number\">-->\n<!--                        <div ng-messages=\"addEntityForm.integerNumber.$error\">-->\n<!--                            <div ng-message=\"pattern\">Invalid integer value.</div>-->\n<!--                        </div>-->\n<!--                    </md-input-container>-->\n<!--                    <div class=\"boolean-value-input\" layout=\"column\" layout-align=\"center start\" flex>-->\n<!--                        <label class=\"checkbox-label\">Boolean Value</label>-->\n<!--                        <md-checkbox ng-model=\"vm.attributes.booleanValue\" style=\"margin-bottom: 40px;\">-->\n<!--                            {{ (vm.attributes.booleanValue ? \"value.true\" : \"value.false\") | translate }}-->\n<!--                        </md-checkbox>-->\n<!--                    </div>-->\n<!--                </div>-->\n<!--                <div class=\"relations-list\">-->\n<!--                    <div class=\"md-body-1\" style=\"padding-bottom: 10px; color: rgba(0,0,0,0.57);\">Relations</div>-->\n<!--                    <div class=\"body\" ng-show=\"vm.relations.length\">-->\n<!--                        <div class=\"row\" layout=\"row\" layout-align=\"start center\" ng-repeat=\"relation in vm.relations track by $index\">-->\n<!--                            <div class=\"md-whiteframe-1dp\" flex layout=\"row\" style=\"padding-left: 5px;\">-->\n<!--                                <div flex layout=\"column\">-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <md-input-container class=\"md-block\" style=\"min-width: 100px;\">-->\n<!--                                            <label>Direction</label>-->\n<!--                                            <md-select name=\"direction\" required ng-model=\"relation.direction\">-->\n<!--                                                <md-option ng-repeat=\"direction in vm.entitySearchDirection\" ng-value=\"direction\">-->\n<!--                                                    {{ (\"relation.search-direction.\" + direction) | translate}}-->\n<!--                                                </md-option>-->\n<!--                                            </md-select>-->\n<!--                                            <div ng-messages=\"addEntityForm.direction.$error\">-->\n<!--                                                <div ng-message=\"required\">Relation direction is required.</div>-->\n<!--                                            </div>-->\n<!--                                        </md-input-container>-->\n<!--                                        <tb-relation-type-autocomplete flex class=\"md-block\"-->\n<!--                                           the-form=\"addEntityForm\"-->\n<!--                                           ng-model=\"relation.relationType\"-->\n<!--                                           tb-required=\"true\">-->\n<!--                                        </tb-relation-type-autocomplete>-->\n<!--                                    </div>-->\n<!--                                    <div layout=\"row\">-->\n<!--                                        <tb-entity-select flex class=\"md-block\"-->\n<!--                                            the-form=\"addEntityForm\"-->\n<!--                                            tb-required=\"true\"-->\n<!--                                            ng-model=\"relation.relatedEntity\">-->\n<!--                                        </tb-entity-select>-->\n<!--                                    </div>-->\n<!--                                </div>-->\n<!--                                <div layout=\"column\" layout-align=\"center center\">-->\n<!--                                    <md-button class=\"md-icon-button md-primary\" style=\"width: 40px; min-width: 40px;\"-->\n<!--                                               ng-click=\"vm.removeRelation($index)\" aria-label=\"Remove\">-->\n<!--                                        <md-tooltip md-direction=\"top\">Remove relation</md-tooltip>-->\n<!--                                        <md-icon aria-label=\"Remove\" class=\"material-icons\">-->\n<!--                                            close-->\n<!--                                        </md-icon>-->\n<!--                                    </md-button>-->\n<!--                                </div>-->\n<!--                            </div>-->\n<!--                        </div>-->\n<!--                    </div>-->\n<!--                   <div>-->\n<!--                       <md-button class=\"md-primary md-raised\" ng-click=\"vm.addRelation()\" aria-label=\"Add\">-->\n<!--                           <md-tooltip md-direction=\"top\">Add Relation</md-tooltip>-->\n<!--                           Add-->\n<!--                       </md-button>-->\n<!--                   </div> -->\n<!--                </div>-->\n<!--            </div>-->\n<!--        </md-dialog-content>-->\n<!--        <md-dialog-actions>-->\n<!--            <md-button type=\"submit\" ng-disabled=\"addEntityForm.$invalid || !addEntityForm.$dirty\" class=\"md-raised md-primary\">Create</md-button>-->\n<!--            <md-button ng-click=\"vm.cancel()\" class=\"md-primary\">Cancel</md-button>-->\n<!--        </md-dialog-actions>-->\n<!--    </form>-->\n<!--</md-dialog>-->\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n\n.relations-list.old-relations tb-entity-select tb-entity-autocomplete button {\n    display: none;\n} \n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form md-input-container {\n    padding-right: 10px;\n}\n\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    margin-bottom: 8px;\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body md-autocomplete-wrap md-input-container {\n    height: 30px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet userService = $injector.get(widgetContext.servicesMap.get('userService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete ' + entityId.entityType.toLowerCase() + ' ' +\n                entityName;\n    let content = 'Are you sure you want to delete the ' +\n                 entityId.entityType.toLowerCase() + ' ' + entityName + '?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n}\n\nfunction deleteEntity() {\n    deleteEntityObservable(entityId).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction deleteEntityObservable(entityId) {\n    return userService.deleteUser(entityId.id);\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while deleting the entity. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "04e0120b-54ba-c46e-f043-c0f0eac159ee"
              } ]
            },
            "enableDataExport" : false,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "id" : "a7c12d15-4a19-0ff1-48cd-874ac324fb97"
        }
      },
      "states" : {
        "default" : {
          "name" : "Users & Access Control Management",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "b04398f9-e5e1-56e0-ab66-c5d32fe9c29a" : {
                  "sizeX" : 72,
                  "sizeY" : 2,
                  "row" : 20,
                  "col" : 0
                },
                "c0e5b7de-1fdb-3540-7ce6-6b6a3cb3b7da" : {
                  "sizeX" : 72,
                  "sizeY" : 11,
                  "row" : 22,
                  "col" : 0
                },
                "64191d62-2be7-0916-5a93-bffe2f0639f0" : {
                  "sizeX" : 12,
                  "sizeY" : 3,
                  "row" : 0,
                  "col" : 0
                },
                "0c15941d-3de2-3820-e864-712323a1de2d" : {
                  "sizeX" : 41,
                  "sizeY" : 3,
                  "row" : 0,
                  "col" : 12
                },
                "cf962590-543e-ddf0-2b08-df64d29a92e0" : {
                  "sizeX" : 19,
                  "sizeY" : 3,
                  "row" : 0,
                  "col" : 53
                },
                "3aefbf5f-555e-2d0f-f68e-80279085ab17" : {
                  "sizeX" : 30,
                  "sizeY" : 17,
                  "row" : 3,
                  "col" : 0
                },
                "a7c12d15-4a19-0ff1-48cd-874ac324fb97" : {
                  "sizeX" : 42,
                  "sizeY" : 17,
                  "row" : 3,
                  "col" : 30
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#0e0738",
                "color" : "rgba(0,0,0,0.870588)",
                "columns" : 72,
                "margin" : 5,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70
              }
            }
          }
        }
      },
      "entityAliases" : {
        "fed52d94-59e9-7c08-4246-bd5af87ce0d4" : {
          "id" : "fed52d94-59e9-7c08-4246-bd5af87ce0d4",
          "alias" : "Selected User Group",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : "selected_user_group",
            "defaultStateEntity" : null
          }
        },
        "ef34b777-4d20-782b-a25a-b18fe97b5333" : {
          "id" : "ef34b777-4d20-782b-a25a-b18fe97b5333",
          "alias" : "Selected Users",
          "filter" : {
            "type" : "entityGroup",
            "resolveMultiple" : true,
            "groupStateEntity" : true,
            "stateEntityParamName" : "selected_user_group",
            "defaultStateGroupType" : "USER",
            "defaultStateEntityGroup" : "84566780-9b9c-11ea-a561-95cd528454c9",
            "groupType" : null,
            "entityGroup" : null
          }
        },
        "7a80c473-67b7-3183-ddfc-f49c5534c6ff" : {
          "id" : "7a80c473-67b7-3183-ddfc-f49c5534c6ff",
          "alias" : "Locations",
          "filter" : {
            "type" : "singleEntity",
            "resolveMultiple" : false,
            "singleEntity" : {
              "entityType" : "ASSET",
              "id" : "2afdb0b0-1156-11ea-b8a2-7323fcd53d8f"
            }
          }
        },
        "609887c2-8f4f-246a-515e-df6b380afb6b" : {
          "id" : "609887c2-8f4f-246a-515e-df6b380afb6b",
          "alias" : "User groups",
          "filter" : {
            "type" : "entityGroupList",
            "resolveMultiple" : true,
            "groupType" : "USER",
            "entityGroupList" : [ "bc6d9620-9f19-11ec-a249-29abcfd69a2d", "bc677ba0-9f19-11ec-a249-29abcfd69a2d", "881341a0-3b71-11ed-97a1-df4579e3ce80", "f86f9db0-dc33-11ec-9ed7-67b7d71109b4", "48b601a0-6509-11ea-8272-bfa0d62e6118", "dbf3b420-647e-11ea-8272-bfa0d62e6118", "dbd70460-647e-11ea-8272-bfa0d62e6118", "d1baf3c0-dbe7-11ea-97af-d3e312c0d8a4" ]
          }
        },
        "d49c8f56-1cce-7f2e-27e3-7fd3816d1b6d" : {
          "id" : "d49c8f56-1cce-7f2e-27e3-7fd3816d1b6d",
          "alias" : "User groups Seneca",
          "filter" : {
            "type" : "entityGroupList",
            "resolveMultiple" : true,
            "groupType" : "USER",
            "entityGroupList" : [ "d2bb5cf0-948f-11ea-886a-31552cfa7a2a", "554cbd10-d67d-11ea-97af-d3e312c0d8a4", "3e0e2200-8e21-11ea-886a-31552cfa7a2a", "81fb14a0-9394-11ea-886a-31552cfa7a2a" ]
          }
        }
      },
      "timewindow" : {
        "displayValue" : "",
        "hideInterval" : false,
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "selectedTab" : 0,
        "realtime" : {
          "interval" : 1000,
          "timewindowMs" : 60000
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1595423381310,
            "endTimeMs" : 1595509781310
          }
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : false,
        "titleColor" : "rgba(0,0,0,0.870588)",
        "showFilters" : true,
        "showDashboardLogo" : false,
        "dashboardLogoUrl" : null,
        "hideToolbar" : false,
        "showUpdateDashboardImage" : true,
        "dashboardCss" : ""
      },
      "filters" : { }
    },
    "createdTime" : 1656585454013,
    "customerId" : {
      "entityType" : "CUSTOMER",
      "id" : "543fe890-6f51-11ea-b009-812081829598"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "a6c526d0-f860-11ec-a29c-3586948df39a"
    },
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "name" : "Users & Access Control Management",
    "ownerId" : {
      "entityType" : "CUSTOMER",
      "id" : "543fe890-6f51-11ea-b009-812081829598"
    },
    "tenantId" : null,
    "title" : "Users & Access Control Management"
  },
  "attributes" : {
    "SERVER_SCOPE" : [ {
      "booleanValue" : null,
      "doubleValue" : null,
      "jsonValue" : null,
      "key" : "icon",
      "lastUpdateTs" : 1656948980066,
      "longValue" : null,
      "strValue" : "account_box"
    }, {
      "booleanValue" : true,
      "doubleValue" : null,
      "jsonValue" : null,
      "key" : "isAdmin",
      "lastUpdateTs" : 1656948861108,
      "longValue" : null,
      "strValue" : null
    } ]
  }
}